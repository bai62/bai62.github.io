<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【每日算法Day17】分糖果</title>
      <link href="/2021/11/01/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day17%E3%80%91%E5%88%86%E7%B3%96%E6%9E%9C/"/>
      <url>/2021/11/01/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day17%E3%80%91%E5%88%86%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。</p><p>医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。</p><p>给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的最多种类数。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>示例 1：</p><p>输入：candyType = [1,1,2,2,3,3]<br>输出：3<br>解释：Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。<br>示例 2：</p><p>输入：candyType = [1,1,2,3]<br>输出：2<br>解释：Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。<br>示例 3：</p><p>输入：candyType = [6,6,6,6]<br>输出：1<br>解释：Alice 只能吃 4 / 2 = 2 枚糖，尽管她能吃 2 枚，但只能吃到 1 种糖。</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>n == candyType.length<br>2 &lt;= n &lt;= 104<br>n 是一个偶数<br>-105 &lt;= candyType[i] &lt;= 105</p><h3 id="题解：贪心"><a href="#题解：贪心" class="headerlink" title="题解：贪心"></a>题解：贪心</h3><p>null</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candyType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> candyType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> candyType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> candyType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candyType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">unordered_set</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>candyType<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>candyType<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>candyType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>unordered_set适用于不需要排序，比较的集合</li><li>unordered_set&lt;int&gt;(.begin(),.end())可以将迭代器作为参数初始化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新服务器多用户免密登录多设备</title>
      <link href="/2021/11/01/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E7%94%A8%E6%88%B7%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%A4%9A%E8%AE%BE%E5%A4%87/"/>
      <url>/2021/11/01/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E7%94%A8%E6%88%B7%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%A4%9A%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在购买服务器时修改机器名</p></li><li><p>VNC远程连接服务器后修改配置项为允许ssh登录</p></li><li><p><code>ssh root@ip</code> ，输入密码后登录服务器</p></li><li><p><code>sudo apt-get update</code>更新apt-get</p></li><li><p>创建有sudo权限的用户usr1</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adduser usr1  # 创建用户usr1usermod -aG sudo usr1  # 给用户usr1分配sudo权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li><p>服务器root和usr1中<code>ssh-keygen</code>，<code>touch ~/.ssh/authorized_keys</code></p></li><li><p>在所有设备中<code>ssh-keygen</code>，<code>sudo vi ~/.ssh/config</code>将config文件中的内容设为如下</p></li></ol><pre class="line-numbers language-none"><code class="language-none">Host ser    HostName &lt;ip&gt;    User root    Host s    HostName &lt;ip&gt;    User usr1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>在所有设备中<code>ssh-copy-id ser</code>, <code>ssh-copy-id s</code>即可免密登录</li></ol><h3 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h3><ul><li><p>服务器中两个用户将所有设备的公钥放在<code>~/.ssh/authorized_keys</code>下</p></li><li><p>windows下没有<code>ssh-copy-id</code>命令，在windows下使用如下方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh usr1@ip &quot;cat &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在有vim，tmux的配置文件的设备中<code>scp .bashrc .vimrc .tmux.conf ser:</code>，<code>scp .bashrc .vimrc .tmux.conf s:</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day16】键盘行</title>
      <link href="/2021/10/31/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day16%E3%80%91%E9%94%AE%E7%9B%98%E8%A1%8C/"/>
      <url>/2021/10/31/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day16%E3%80%91%E9%94%AE%E7%9B%98%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="Leetcode500-键盘行"><a href="#Leetcode500-键盘行" class="headerlink" title="Leetcode500. 键盘行"></a><a href="https://leetcode-cn.com/problems/keyboard-row/">Leetcode500. 键盘行</a></h4><p>给你一个字符串数组 words ，只返回可以使用在 美式键盘 同一行的字母打印出来的单词。键盘如下图所示。</p><p>美式键盘 中：</p><p>第一行由字符 “qwertyuiop” 组成。<br>第二行由字符 “asdfghjkl” 组成。<br>第三行由字符 “zxcvbnm” 组成。</p><p><img src="https://i.loli.net/2021/10/31/A5ImunMXL3vCVpw.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>示例 1：</p><p>输入：words = [“Hello”,”Alaska”,”Dad”,”Peace”]<br>输出：[“Alaska”,”Dad”]<br>示例 2：</p><p>输入：words = [“omk”]<br>输出：[]<br>示例 3：</p><p>输入：words = [“adsdf”,”sfd”]<br>输出：[“adsdf”,”sfd”]</p><p>提示：</p><p>1 &lt;= words.length &lt;= 20<br>1 &lt;= words[i].length &lt;= 100<br>words[i] 由英文字母（小写和大写字母）组成</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>首先判断字符串的第一个字符，进行分类。由于每个分类都要遍历字符串来检查匹配情况，检查字符是否匹配的代码被封装成<code>checkStr() </code>函数，将需要比较的两个字符串传入，返回布尔值表示是否匹配</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkStr</span><span class="token punctuation">(</span>string x<span class="token punctuation">,</span> string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string qstr <span class="token operator">=</span> <span class="token string">"qwertyuiopQWERTYUIOP"</span><span class="token punctuation">;</span>        string astr <span class="token operator">=</span> <span class="token string">"asdfghjklASDFGHJKL"</span><span class="token punctuation">;</span>        string zstr <span class="token operator">=</span> <span class="token string">"zxcvbnmZXCVBNM"</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>qstr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">checkStr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> qstr<span class="token punctuation">)</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>astr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">checkStr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> astr<span class="token punctuation">)</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zstr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">checkStr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> zstr<span class="token punctuation">)</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之总线与IO系统</title>
      <link href="/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%80%BB%E7%BA%BF%E4%B8%8EIO%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%80%BB%E7%BA%BF%E4%B8%8EIO%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><ul><li>总线是一组能为多个部件<strong>分时共享</strong>的公共信息传送线路</li><li>4根信号线组成一根总线，所有硬件部件都可以通过这跟总线传递数据</li><li>可并行发送4bit数据。同一时刻只能有一个部件发送数据，但是可以有多个部件接受数据</li></ul><p><img src="https://i.loli.net/2021/10/30/xm8Q64fBn5ORF29.png"></p><h2 id="I-O系统"><a href="#I-O系统" class="headerlink" title="I/O系统"></a>I/O系统</h2><p>数据流：键盘 -&gt; IO接口的数据寄存器 -&gt; 数据总线 -&gt; CPU某寄存器  -&gt; 主存</p><h3 id="CPU控制I-O设备"><a href="#CPU控制I-O设备" class="headerlink" title="CPU控制I/O设备"></a>CPU控制I/O设备</h3><ul><li>I/O接口：主机与I/O设备之间的桥梁</li></ul><h4 id="程序查询方式"><a href="#程序查询方式" class="headerlink" title="程序查询方式"></a>程序查询方式</h4><p>I/O控制器中的<strong>状态寄存器</strong>轮询检查，知道检测到状态已完成，再从数据寄存器中取出数据</p><h4 id="程序中断方式"><a href="#程序中断方式" class="headerlink" title="程序中断方式"></a>程序中断方式</h4><ul><li>高速IO设备会多次造成CPU中断</li></ul><p>CPU先去执行其他程序，键盘I/O完成后向CPU发出中断请求，CPU响应中断请求，并取走请求</p><h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><ul><li>主存与高速I/O设备有一条直通数据通路(DMA Bus)。CPU向DMA接口发出读写命令，并指明主存地址、辅存地址、外设读写地址、读写数据量等参数</li><li>完成一整次读写，DMA才会向CPU发起中断请求</li></ul><p><img src="https://i.loli.net/2021/10/30/Lw31VyoTr7i86qK.png"></p><ul><li>DMA和CPU不能同时访问主存</li></ul><h4 id="外设使用DMA的过程"><a href="#外设使用DMA的过程" class="headerlink" title="外设使用DMA的过程"></a>外设使用DMA的过程</h4><ol><li>接受外设发出的DMA请求(外设传送一个字的请求)，并向CPU发出总线请求</li><li>CPU响应总线请求，发出总线响应信号，接管总线控制权，进入DMA操作周期</li><li>确定传送数据的主存单元地址及长度，并能自动修改主存地址计数和传送长度计数。</li><li>规定数据在主存和外设间的传送方向，发出读写等控制信号，执行数据传送操作</li><li>向CPU报告DMA操作的结束</li></ol><p><img src="https://i.loli.net/2021/10/30/vBDLGPSpWcUbHX7.png"></p><p><img src="https://i.loli.net/2021/10/30/Tx5Jl1EfXVI23cH.png"></p><h3 id="通道执行方式"><a href="#通道执行方式" class="headerlink" title="通道执行方式"></a>通道执行方式</h3><p><img src="https://i.loli.net/2021/10/30/f3iF9SsJmqlNRUk.png"></p><ul><li>IO指令：CPU执行的指令<ul><li>操作码，命令码，设备码</li></ul></li><li>通道指令：通道执行的指令<ul><li>通道程序提前编制好放在主存中</li><li>CPU执行I/O指令对通道发出命令，由通道执行一系列通道命令，代替CPU对I/O设备进行管理</li></ul></li></ul><h4 id="VRAM-显存"><a href="#VRAM-显存" class="headerlink" title="VRAM(显存)"></a>VRAM(显存)</h4><ul><li>帧频：屏幕刷新率，60Hz为屏幕一秒钟刷新60次</li><li>分辨率：宽，高像素的乘积</li></ul><p>VRAM最小容量(一帧理论最小值) = 分辨率 * 灰度级位数</p><p>VRAM带宽 = 分辨率 * 灰度级位数 * 帧频 </p><ul><li>显存除了作为当前显示帧的缓存，还会用于保存即将渲染的图像数据(游戏)</li><li>集成显卡的计算机，会将一片内存作为显存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day15】只出现一次的数字III</title>
      <link href="/2021/10/30/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day15%E3%80%91%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
      <url>/2021/10/30/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day15%E3%80%91%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/</url>
      
        <content type="html"><![CDATA[<h4 id="Leetcode264-只出现一次的数字-III"><a href="#Leetcode264-只出现一次的数字-III" class="headerlink" title="Leetcode264,只出现一次的数字 III"></a><a href="https://leetcode-cn.com/problems/single-number-iii/">Leetcode264,只出现一次的数字 III</a></h4><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。</p><p>进阶：你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 1：</p><p>输入：nums = [1,2,1,3,2,5]<br>输出：[3,5]<br>解释：[5, 3] 也是有效的答案。<br>示例 2：</p><p>输入：nums = [-1,0]<br>输出：[-1,0]<br>示例 3：</p><p>输入：nums = [0,1]<br>输出：[1,0]<br>提示：</p><p>2 &lt;= nums.length &lt;= 3 * 104<br>-231 &lt;= nums[i] &lt;= 231 - 1<br>除两个只出现一次的整数外，nums 中的其他数字都出现两次</p><h3 id="题解-O-logn"><a href="#题解-O-logn" class="headerlink" title="题解(O(logn))"></a>题解(O(logn))</h3><p>遍历数组，第一次出现时插入set，第二次出现时删除set。随后set中剩下的元素则为仅出现过一次的元素</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> check<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                check<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                check<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>check<span class="token punctuation">)</span>            nums<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之存储系统</title>
      <link href="/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="存储器概述"><a href="#存储器概述" class="headerlink" title="存储器概述"></a>存储器概述</h2><p><img src="https://i.loli.net/2021/10/30/YkbeODrR1gUf4pM.png" alt="img"></p><p><img src="https://i.loli.net/2021/10/30/Agf5IJVZkOTG7p1.png" alt="img"></p><ul><li>辅存中的数据只有被调入到主存中才可以被CPU访问</li><li>主存–辅存：实现虚拟储存系统，解决了主存容量不够的问题</li><li>Cache–主存：解决了主存与CPU速度不匹配的问题</li></ul><table><thead><tr><th align="center">储存器</th><th align="center">介质</th></tr></thead><tbody><tr><td align="center">Cache</td><td align="center">SRAM</td></tr><tr><td align="center">内存</td><td align="center">DRA</td></tr><tr><td align="center">硬盘</td><td align="center">SSD</td></tr><tr><td align="center">硬盘</td><td align="center">HDD</td></tr></tbody></table><h3 id="半导体随机存储器"><a href="#半导体随机存储器" class="headerlink" title="半导体随机存储器"></a>半导体随机存储器</h3><h4 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h4><ul><li>Static Random Access Memory</li><li>用于缓存</li></ul><h4 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h4><ul><li>Dynamic Random Access Memory</li><li>用于主存</li><li>DRAM的数据访问电路和刷新电路都比SRAM复杂，访问延时更长</li></ul><h2 id="高速缓冲储存器"><a href="#高速缓冲储存器" class="headerlink" title="高速缓冲储存器"></a>高速缓冲储存器</h2><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><h4 id="空间局部性"><a href="#空间局部性" class="headerlink" title="空间局部性"></a>空间局部性</h4><p>最近未来要用到的信息(指令和数据)，很可能与现在正在使用的信息在储存空间上是相邻的</p><h4 id="时间局部性"><a href="#时间局部性" class="headerlink" title="时间局部性"></a>时间局部性</h4><p>最近未来要用到的信息(指令和数据)，很可能是现在正在使用到的信息(循环结构的指令代码)</p><h4 id="局部性原理的应用"><a href="#局部性原理的应用" class="headerlink" title="局部性原理的应用"></a>局部性原理的应用</h4><p>根据局部性原理，可以把CPU目前访问的地址“周围”的部分数据放到Cache中</p><ul><li>二维数组按“列优先”访问二维数组，空间局部性更差</li></ul><h2 id="虚拟储存器"><a href="#虚拟储存器" class="headerlink" title="虚拟储存器"></a>虚拟储存器</h2><h3 id="页式储存系统"><a href="#页式储存系统" class="headerlink" title="页式储存系统"></a>页式储存系统</h3><ul><li>一个进程在逻辑上分为若干个大小相等的“页面”，每个页面可以按需离散地放入不同的主存块中</li><li>页表在主内存中</li></ul><h4 id="页表的结构"><a href="#页表的结构" class="headerlink" title="页表的结构"></a>页表的结构</h4><ul><li>有效位：页面是否已被调入主存</li><li>访问位：被访问次数低的页面优先被替换</li><li>脏位：在主存中的副本数据是否被修改</li><li>物理页：主存块号</li></ul><p><img src="https://i.loli.net/2021/10/30/Kzv4lm9kJ7GCj8V.png" alt="img"></p><h3 id="快表-TLB"><a href="#快表-TLB" class="headerlink" title="快表(TLB)"></a>快表(TLB)</h3><p><img src="https://i.loli.net/2021/10/30/XeE6tfmkG5gvMQz.png" alt="img"></p><ul><li>快表中储存的室页表项的副本；cache中储存的是主存块的副本</li><li>快表使用SRAM，相联存储器加快地址变换的速度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之指令流水线</title>
      <link href="/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2021/10/30/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="指令流水线的概念"><a href="#指令流水线的概念" class="headerlink" title="指令流水线的概念"></a>指令流水线的概念</h2><ul><li>多功能流水线是指流水线的各段可以进行不同的连接，在同一时间或不同时间内，通过不同的连接方式实现不同的功能</li><li>静态流水线是同时只能完成一种功能的多功能流水线</li></ul><h3 id="单指令处理器-Single-Cycle-Processor"><a href="#单指令处理器-Single-Cycle-Processor" class="headerlink" title="单指令处理器(Single Cycle Processor)"></a>单指令处理器(Single Cycle Processor)</h3><p><img src="https://i.loli.net/2021/10/30/OnkXZWabqtPeYBh.png" alt="image-20211030091334874"></p><h3 id="五级流水线"><a href="#五级流水线" class="headerlink" title="五级流水线"></a>五级流水线</h3><p><img src="https://i.loli.net/2021/10/30/UcA1MWjSvzEu4TO.png" alt="image-20211030091318760"></p><ul><li>将一条指令分为取指令、译码、执行、访存、写回五个阶段</li><li>当过了5个CPU时钟周期后，可以保证每个时钟周期都有一条指令执行完成，即实现了一个CPU的时钟周期；由于取指阶段肯定是所有5个阶段里耗时最长的，即一个CPU的时钟周期可以设置为取指阶段的花费时间</li><li>每一个流水线级的时间都是一个CPU的时钟周期，但是其中实际操作的时间，可能短于一个CPU时钟周期。比如我们译码器其实就是一个组合逻辑电路，门延迟很低，需要等待。</li></ul><h3 id="超长流水线的性能瓶颈"><a href="#超长流水线的性能瓶颈" class="headerlink" title="超长流水线的性能瓶颈"></a>超长流水线的性能瓶颈</h3><ul><li>流水线每一级后都有一个缓冲寄存器(锁存器)，保存当前阶段的执行结果，供给下一水段使用</li><li>指令的执行有 3 纳秒，也就是 3000 皮秒。我们需要 20 级的流水线，那流水线寄存器的写入就需要花费 400 皮秒</li><li>提升流水线的深度，必须提升CPU主频，增加晶体管数目，导致CPU功耗变大</li><li>流水线越长，冒险(hazard)问题就越难以解决。不能把后面没有依赖关系的指令放到前面来执行(乱序技术)。</li><li>没有依赖关系的三条流水线可能会因超标量流水线成为一条流水线</li></ul><h2 id="冒险和预测"><a href="#冒险和预测" class="headerlink" title="冒险和预测"></a>冒险和预测</h2><p><a href="https://www.cnblogs.com/lfri/p/10053598.html">该部分转自博客园</a></p><h3 id="结构冒险-Structural-Hazard"><a href="#结构冒险-Structural-Hazard" class="headerlink" title="结构冒险(Structural Hazard)"></a>结构冒险(Structural Hazard)</h3><ul><li>结构冒险：两条指令同时需要相同的硬件</li><li>CPU访问高速内存，高速缓存分成了指令缓存和数据缓存两部分</li></ul><h4 id="读指令和读数据冲突"><a href="#读指令和读数据冲突" class="headerlink" title="读指令和读数据冲突"></a>读指令和读数据冲突</h4><p>如果指令和数据放在同一个储存器中，则不能同时读储存器</p><p><img src="https://i.loli.net/2021/10/30/flZq92HYkR7iEtn.png"></p><h5 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h5><p>流水线停顿(stall)，产生空泡(bubble)</p><p><img src="https://i.loli.net/2021/10/30/XW8ijLeOrcT9KsF.png"></p><h5 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h5><p>设置指令高速缓存和数据高速缓存(指令和数据在主存储器中的存储没有区分，符合冯诺依曼结构)</p><h4 id="读寄存器和写寄存器的冲突"><a href="#读寄存器和写寄存器的冲突" class="headerlink" title="读寄存器和写寄存器的冲突"></a>读寄存器和写寄存器的冲突</h4><p><img src="https://i.loli.net/2021/10/30/BvzTVgdsk3AxPG2.png"></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>前半个周期写，后半个周期读，并且设置独立的读写端口</p><h3 id="数据冒险-Data-Hazard"><a href="#数据冒险-Data-Hazard" class="headerlink" title="数据冒险(Data Hazard)"></a>数据冒险(Data Hazard)</h3><ul><li>数据冒险：通知执行多个指令之间，由<strong>数据依赖</strong>的情况</li><li>原本回写运算结果是在WB 阶段，直通是指在运算结果确定的EX 阶段，将数据直接传递给下一个指令</li></ul><h4 id="先写后读-Read-After-Write"><a href="#先写后读-Read-After-Write" class="headerlink" title="先写后读(Read After Write)"></a>先写后读(Read After Write)</h4><ul><li>数据依赖，读依赖于之前的写正常的依赖关系所以叫数据依赖</li></ul><p><img src="https://i.loli.net/2021/10/30/K1mkSLig8P9NQso.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> #先写后读<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="先读后写"><a href="#先读后写" class="headerlink" title="先读后写"></a>先读后写</h4><ul><li>反依赖，要保证读到写之前的数据，与正常的相反叫反依赖</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span>；n2 <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span> #先读后写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="写后再写"><a href="#写后再写" class="headerlink" title="写后再写"></a>写后再写</h4><ul><li>输出依赖</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="停顿和冒泡解决数据冒险"><a href="#停顿和冒泡解决数据冒险" class="headerlink" title="停顿和冒泡解决数据冒险"></a>停顿和冒泡解决数据冒险</h4><p>流水线停顿(pipeline stall)和流水线冒泡(pipeline bubbling)并不是真正让流水线停下来，而是插入一个nop操作</p><p><img src="https://i.loli.net/2021/10/30/LdnNGSMrzXvaoy5.png"></p><h3 id="控制冒险-Control-Hazard"><a href="#控制冒险-Control-Hazard" class="headerlink" title="控制冒险(Control Hazard)"></a>控制冒险(Control Hazard)</h3><p>程序存在跳转语句，如果程序的实际执行路径是要跳转到其他的地址去执行，那么流水线中已经做的这些取指和译码工作就白做了，这就是流水线的控制冒险。此时，处理器需要<strong>排空流水线</strong>，跳转到新的地址处重新进入流水线。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之数据通路</title>
      <link href="/2021/10/29/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF/"/>
      <url>/2021/10/29/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h2><h3 id="指令周期-Instruction-Cycle"><a href="#指令周期-Instruction-Cycle" class="headerlink" title="指令周期(Instruction Cycle)"></a>指令周期(Instruction Cycle)</h3><img src="https://i.loli.net/2021/10/29/pKWMVOH25ZCRzET.png" style="zoom:43%;" /><ul><li>Fetch 把PC寄存器(主内存Main Memory)中的指令加载到指令寄存器中，并实现PC寄存器指令自增</li><li>Decode(解码) CPU控制器解析指令为RIJ类型，需要使用的寄存器、数据或内存地址</li><li>Execute ALU(算术逻辑单元)运行指令，进行算术逻辑操作、数据传输或地址跳转 </li></ul><h3 id="机器周期-Machine-Cycle-CPU周期"><a href="#机器周期-Machine-Cycle-CPU周期" class="headerlink" title="机器周期(Machine Cycle)/CPU周期"></a>机器周期(Machine Cycle)/CPU周期</h3><ul><li>CPU内部操作速度远慢于访问内存的速度</li><li>时钟周期：计算机中最小时间单位，在一个时钟周期内，CPU仅完成一个最基本的动作</li><li>CPU周期：取指令、存储器读、存储器写等，这每一项工作称为一个基本操作，完成一个基本操作所需要的时间</li><li>一个CPU周期的时间，是几个时钟周期的总和</li><li>一个指令周期至少需要两个CPU周期。取出至少需要一个CPU周期，执行至少也需要一个CPU周期，复杂的指令需要更多的CPU周期</li><li>一个指令周期，包含多个 CPU 周期，而一个 CPU 周期包含多个时钟周期</li></ul><p><img src="https://i.loli.net/2021/10/29/VRgO3xijKHGmB29.png"></p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="操作元件"><a href="#操作元件" class="headerlink" title="操作元件"></a>操作元件</h4><p>组合逻辑元件，ALU，特定的输入下，根据下面的组合电路的逻辑，生成特定的输出</p><h4 id="储存元件"><a href="#储存元件" class="headerlink" title="储存元件"></a>储存元件</h4><p>状态元件，比如寄存器</p><ul><li>指令译码器(instruction decoder)：将输入的机器码，解析成不同的操作码和操作数，然后传输给ALU进行计算</li><li>锁存器(Latch)：储存上一次计算结果，在有需要时拿到电路的下路去用</li><li>D触发器</li></ul><h4 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h4><p>给定输入，就能得到固定的输出</p><h4 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h4><ul><li>任意时刻的输出不取决于当前的输入，可能与电路原来的状态(以前电路的输入)。使PC寄存器自增读取下一条指令成为可能</li><li>不含Clock，含有Clock signal，以时钟触发的电路</li><li>软件或者硬件层面的指令，在不同事件下按事件顺序发生</li></ul><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p><img src="https://i.loli.net/2021/10/29/yNdJDv9nLK5oH3O.png"></p><h4 id="CPU通路"><a href="#CPU通路" class="headerlink" title="CPU通路"></a>CPU通路</h4><ul><li>PC寄存器：随着主频不断的自增的计数器</li><li>地址译码器：找到对应计数器所表示的内存地址，并读取出指令</li><li>指令寄存器：由D触发器组成的寄存器。通过CPU时钟的控制，以机器码的形式保存正在执行的指令</li><li>指令译码器：从指令寄存器拿到的指令，解析成opcode和对应的操作数(控制信号，寄存器地址，立即数)</li><li>ALU：拿到opcode和操作数后，输出线路连接ALU，通过条件码寄存器和数据寄存器开始进行各种算数和逻辑运算。计算的结果回写到由D触发器组成的寄存器或主内存中(main memory)</li></ul><h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><ul><li>cmp将比较的结果更新到条件码寄存器中</li><li>jmp根据条件吗寄存器中的标志位，来决定是否跳转以及跳转到的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day15】三数之和</title>
      <link href="/2021/10/29/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day15%E3%80%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/10/29/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day15%E3%80%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：nums = []<br>输出：[]</p><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><p>输入：nums = [0]<br>输出：[]</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>0 &lt;= nums.length &lt;= 3000<br>-105 &lt;= nums[i] &lt;= 105</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>遍历找三元组的过程中，先确定第一个数，然后用双指针在该数之后的区间寻找符合条件的另外两个数</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//去重</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> L <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        L<span class="token operator">++</span><span class="token punctuation">,</span> R<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>L<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//去重</span>                        L<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//q</span>                        R<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    R<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    L<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>双指针将O(n2)降至O(n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day14】重新排序的到2的幂</title>
      <link href="/2021/10/28/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day14%E3%80%91%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%88%B02%E7%9A%84%E5%B9%82/"/>
      <url>/2021/10/28/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day14%E3%80%91%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E5%88%B02%E7%9A%84%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定正整数 N ，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p><p>如果我们可以通过上述方式得到 2 的幂，返回 true；否则，返回 false。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：1<br>输出：true</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：10<br>输出：false</p><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><p>输入：16<br>输出：true</p><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h4><p>输入：24<br>输出：false</p><h4 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h4><p>输入：46<br>输出：true</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;= N &lt;= 10^9</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看数字的数目，不看数字的相对位置。2的幂有31个数字，因此我们统计2的幂的数字中[0,9]的数字数量，并用哈希表存储，对于每个n的判断，直接查哈希表中是否存在。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> tb<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>            string <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                num<span class="token punctuation">[</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            tb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">reorderedPowerOf2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">num</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token punctuation">[</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tb<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>int最大值为2147483647,0x7fffffff,1111111111111111111111111111111(31位)</li><li>strint cnt(10,1)长度位10，初始值位1的数组</li><li>键(0~9)，可以用string做哈希表</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之指令和运算</title>
      <link href="/2021/10/27/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%90%E7%AE%97/"/>
      <url>/2021/10/27/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/byr_wy/article/details/100928802?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%85%A8%E5%B1%80%E5%81%8F%E7%A7%BB%E8%A1%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-6-100928802.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">本文前半部分转自CSDN</a></p><p>常见的机器指令可分为：算术类指令、数据传输类指令、逻辑类指令、条件分支类指令、无条件跳转指令</p><h3 id="CPU执行指令"><a href="#CPU执行指令" class="headerlink" title="CPU执行指令"></a>CPU执行指令</h3><ul><li>CPU由寄存器组成，寄存器由多个触发器或者锁存器组成</li><li>N个触发器或者锁存器，就组成N bit的寄存器</li><li>三种特殊寄存器：PC寄存器、指令寄存器、条件码寄存器</li><li>硬件层面实现if和for循环，只需要以上三种特殊寄存器</li></ul><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><ul><li><p>函数的跳转比起if和for循环的跳转，需要记录返回的地址，这就是压栈与出栈</p></li><li><p>整个函数 A 所占用的所有内存空间，就是函数 A 的栈帧（Stack Frame)</p></li><li><p>一层层压栈之后，栈顶的内存地址是在逐渐变小而不是变大</p></li><li><p>rbp 又叫栈帧指针（Frame Pointer），是一个存放了当前栈帧位置的寄存器，rsp</p></li><li><p>函数内联：当没有嵌套调用时，将产生的函数指令插入到调用的位置进行优化</p></li><li><p>函数作用域内的临时变量，分配在栈上</p></li><li><p>把大的for循环写里面能提高CPU流水线的分支预测的准确率</p><h3 id="编译、链接和装载"><a href="#编译、链接和装载" class="headerlink" title="编译、链接和装载"></a>编译、链接和装载</h3></li><li><p>只有通过链接器（Linker）把多个目标文件（obj）以及调用的各种函数库链接起来，我们才能得到一个可执行文件</p></li><li><p>可执行文件和目标文件所使用的都是一种叫ELF格式，即可执行与可链接文件格式<br>ELF 文件里面，存储在一个叫作符号表（Symbols Table）的位置。符号表相当于一个地址簿，把名字和地址关联了起来。</p></li><li><p>Windows 的可执行文件格式是一种叫作PE（Portable Executable Format）的文件格式，所以在linux下执行的程序不能在windows下执行</p></li><li><p>可执行程序加载后占用的内存空间应该是连续的，我们需要同时加载很多个程序，并且不能让程序自己规定在内存中加载的位置</p></li><li><p>指令里用到的内存地址叫作虚拟内存地址（Virtual Memory Address），实际在内存硬件里面的空间地址，我们叫物理内存地址（Physical Memory Address）</p></li><li><p>这种找出一段连续的物理内存和虚拟内存地址进行映射的方法，我们叫分段（Segmentation）,分段造成了内存碎片问题，通过内存交换解决</p></li><li><p>内存分页是把整个物理内存空间切成一段段固定尺寸的大小</p></li><li><p>动态链接，共享库windows下为dll，linux下为so</p></li><li><p>在共享库的 data section 里面，保存了一张全局偏移表（GOT，Global Offset Table）。虽然共享库的代码部分的物理内存是共享的，但是数据部分是各个动态链接它的应用程序里面各加载一份的</p></li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="补码的两种表示方式"><a href="#补码的两种表示方式" class="headerlink" title="补码的两种表示方式"></a>补码的两种表示方式</h4><p><img src="https://i.loli.net/2021/10/27/bhD8Eo4mivO2xAu.png"></p><ul><li><p><code>-7 = -1*2**3 + 0*2**2 + 0*2**1 + 1*2**0</code></p></li><li><p><code>-5 = -1*2**3 + 0*2**2 + 1*2**1 + 1*2**0</code></p></li><li><p>用补码来表示负数，使得我们的整数相加变得很容易，不需要做任何特殊处理，只是把它当成普通的二进制相加，就能得到正确的结果</p></li></ul><h4 id="编码-1"><a href="#编码-1" class="headerlink" title="编码"></a>编码</h4><ul><li>ASCII、Unicode是字符集，UTF-8是字符编码</li><li>二进制序列化储存数据比直接存储盛夏很多空间</li></ul><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><img src="https://i.loli.net/2021/10/29/jlyaRvODEhimCX7.png"></p><h3 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h3><h4 id="一位全加器"><a href="#一位全加器" class="headerlink" title="一位全加器"></a>一位全加器</h4><ul><li>Ci为1的情况：A,B均为1；A,B其中一个为1(异或)，C为1</li><li>Si为1的情况：A,B中一个1，C为0；A,B相同，</li></ul><p><img src="https://i.loli.net/2021/10/28/cjp35GhRJk872lS.png"></p><p><img src="https://i.loli.net/2021/10/29/fVn3bLrIJxpDFTC.jpg"></p><ul><li><p>通过一个异或门计算出个位，通过一个与门计算出是否进位，打包称为半加器</p></li><li><p>两个半加器和一个或门，组成全加器</p></li></ul><p><img src="https://i.loli.net/2021/10/29/ovGyrLMZHniYjVk.jpg"></p><h4 id="串行加法-器"><a href="#串行加法-器" class="headerlink" title="串行加法 器"></a>串行加法 器</h4><p><img src="https://i.loli.net/2021/10/28/FktDB96dnQAeqZc.png"></p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><h4 id="BCD编码"><a href="#BCD编码" class="headerlink" title="BCD编码"></a>BCD编码</h4><ul><li><p>定点数12.45, 57.83</p></li><li><p>32 个比特，每四个比特表示0~9的数字。 一种八个数，从 0 到 999999.99 这样 1 亿个实数了。</p></li><li><p>BCD编码：定点数</p></li></ul><h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><ul><li><p>32bit浮点数组成(sef)：1bit符号位+8bit指数位+23比特有效数位，表示为科学计数法</p></li><li><p>浮点数先对齐再计算，所以对应指数位较小的数在计算之前有效位会右移，所以最右侧有效位精度丢失</p></li><li><p>Kahan summation解决精度丢失</p><ul><li>在每次的计算过程中，都用一次减法，把当前加法计算中损失的精度记录下来，然后在后面的循环中，把这个精度损失放在要加的小数上，再做一次运算</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【fi】计算机组成原理之计算机的基本硬件组成</title>
      <link href="/2021/10/27/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/"/>
      <url>/2021/10/27/%E3%80%90fi%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h3><h4 id="CPU-Central-Processing-Unit"><a href="#CPU-Central-Processing-Unit" class="headerlink" title="CPU:Central Processing Unit"></a>CPU:Central Processing Unit</h4><ul><li>中央处理器</li></ul><h4 id="内存-Memory"><a href="#内存-Memory" class="headerlink" title="内存:Memory"></a>内存:Memory</h4><ul><li>程序加载到内存后运行。程序读取的数据，计算得到的结果放在内存里</li></ul><h4 id="主板-Motherboard"><a href="#主板-Motherboard" class="headerlink" title="主板:Motherboard"></a>主板:Motherboard</h4><ul><li> 芯片组(Chipset)控制了数据在不同配件之间的流转</li><li> 总线(Bus)数据在总线上高速传输</li><li> 总线速度(Bus Speed)决定了数据能够传输多快</li></ul><h4 id="GPU-Graphics-Processing-Unit"><a href="#GPU-Graphics-Processing-Unit" class="headerlink" title="GPU(Graphics Processing Unit)"></a>GPU(Graphics Processing Unit)</h4><ul><li>在显卡上(Graphics Card)，用作图形渲染，训练深度学习模型等各种计算工作</li></ul><h4 id="南桥-SouthBridge"><a href="#南桥-SouthBridge" class="headerlink" title="南桥(SouthBridge)"></a>南桥(SouthBridge)</h4><ul><li>将CPU与硬盘、鼠标等外部设备通信</li></ul><h4 id="北桥-NorthBridge"><a href="#北桥-NorthBridge" class="headerlink" title="北桥(NorthBridge)"></a>北桥(NorthBridge)</h4><ul><li>连接CPU与显卡、内存等之间的通信</li><li>现在北桥芯片的任务已经嵌入CPU的内部</li></ul><h3 id="冯诺依曼机"><a href="#冯诺依曼机" class="headerlink" title="冯诺依曼机"></a>冯诺依曼机</h3><ul><li>冯诺依曼机侧重于”<strong>程序存储</strong>“与”<strong>二进制执行</strong>“，并提出实现这两点必须的五个部分:<strong>控制器</strong>，<strong>运算器</strong>，<strong>存储单元</strong>，<strong>输入</strong>和<strong>输出</strong>设备。这个体系基本奠定了近现代计算机</li></ul><h3 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h3><p><img src="https://i.loli.net/2021/10/26/gGl5f3DairK42Jn.jpg"></p><ul><li>控制器(Control Unit)控制指令的执行过程</li><li>运算器(Arithmetic Logic)从数字电路层面实现加法和乘法</li><li>储存器(Memory Unit)自上到下为CPU高速缓存，内存，SSD硬盘，机械硬盘</li><li>CPU时钟(CPU Clock)构造寄存器和内存的锁存器和触发器</li><li><strong>数据通路</strong>连接了整个运算器和控制器，最终组成了CPU</li></ul><h3 id="计算机性能影响因素"><a href="#计算机性能影响因素" class="headerlink" title="计算机性能影响因素"></a>计算机性能影响因素</h3><h4 id="响应时间-Response-time"><a href="#响应时间-Response-time" class="headerlink" title="响应时间(Response time)"></a>响应时间(Response time)</h4><ul><li>即执行时间(Execution time)</li><li>跑得快</li><li>性能  = 1/响应时间</li></ul><h4 id="吞吐率-Throughput"><a href="#吞吐率-Throughput" class="headerlink" title="吞吐率(Throughput)"></a>吞吐率(Throughput)</h4><ul><li><p>即带宽(Bandwidth)</p></li><li><p>搬的多</p></li><li><p>通过多核，多找几个人搬，提升吞吐率</p></li></ul><h3 id="CPU时钟"><a href="#CPU时钟" class="headerlink" title="CPU时钟"></a>CPU时钟</h3><p><img src="https://i.loli.net/2021/10/26/AGrq85SLaZCi4hf.png"></p><ul><li>A computer operates in two modes which are user mode and kernel mode. When the computer is running application software, it is in user mode. After the application software request for hardware, the computer enters kernel mode. The kernel is the core of the computer system. Subsequently, the computer frequently switches between user mode and kernel mode. Most critical tasks of the operating system are executing in the kernel mode. The <strong>key difference</strong> between User Mode and Kernel Mode is that <strong>user mode is the mode in which the applications are running and kernel mode is the privileged mode to which the computer enters when accessing hardware resources.</strong></li><li><strong>Real</strong> is <strong>wall clock time</strong> - time from start to finish of the call. This is all elapsed time including time slices used by other processes and time the process spends blocked (for example if it is waiting for I/O to complete).</li><li><strong>User</strong> is the amount of CPU time spent in <strong>user-mode code</strong> (outside the kernel) <em>within</em> the process. This is only actual CPU time used in <strong>executing the process</strong>. Other processes and time the process spends blocked do not count towards this figure.</li><li><strong>Sys</strong> is the amount of CPU time spent in the kernel within the process. This means executing CPU time spent in system calls <em>within the kernel,</em> as opposed to library code, which is still running in user-space. Like ‘user’, this is only CPU time used by the process. See below for a brief description of kernel mode (also known as ‘supervisor’ mode) and the system call mechanism.</li></ul><p><code>User+Sys</code> will tell you how much actual CPU time your process used. Note that this is across all CPUs, so if the process has multiple threads (and this process is running on a computer with more than one processor) it could potentially exceed the wall clock time reported by <code>Real</code> (which usually occurs). Note that in the output these figures include the <code>User</code> and <code>Sys</code> time of all child processes (and their descendants) as well when they could have been collected.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day13】盛水最多的容器</title>
      <link href="/2021/10/27/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day13%E3%80%91%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/10/27/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day13%E3%80%91%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p><img src="https://i.loli.net/2021/10/27/sH9uMgAGBI7Jy8v.jpg"></p><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：height = [1,1]<br>输出：1</p><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><p>输入：height = [4,3,2,1,4]<br>输出：16</p><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h4><p>输入：height = [1,2,1]<br>输出：2</p><p>提示：</p><p>n == height.length<br>2 &lt;= n &lt;= 105<br>0 &lt;= height[i] &lt;= 104</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>容器的容积由两板中短板决定。初始时两个指针在数组两侧，移动短板时容积变大、变小或不变，移动长板时容积变小或不变。所以不能移动长板</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">?</span> l<span class="token operator">++</span> <span class="token operator">:</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ten】英语五天强化Day3</title>
      <link href="/2021/10/25/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day3/"/>
      <url>/2021/10/25/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day3/</url>
      
        <content type="html"><![CDATA[<ul><li><p>简单句</p><ul><li>主谓 It rains</li><li>主谓宾 </li><li>主系表 feel seem sound smell become get turn</li><li>主谓宾宾 She offers me a great hand.</li><li>主谓宾补 L makes C sad.</li></ul></li><li><p>并列句</p></li><li><p>复合句</p><ul><li>定语从句</li><li>状语从句 </li><li>名词性从句 主宾表同位</li></ul></li></ul><h2 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h2><ul><li>关系代词：在从句中做主语或宾语that, which, who(whom,whose),</li><li>关系副词：在从句中做状语where when why</li></ul><blockquote><p>A plane is a machine that can fly.</p><p>The girl we saw yesterday was Jim’s sister #做宾语时可省略</p><p>The girl whom  we saw yesterday was Jim’s sister #whom为宾格</p><p>They planted some trees which didn’t need much water.</p><p>The fish we brough this morning  weres not fresh.</p><p>This is the place that we live in.</p><p>This is the place in which we live</p><p>This is the place where we live.</p><p>The foreigner who helped us yesterday is from USA.</p><p>The person to whom you just talked is Mr.Li. #whom可将引导词提前</p><p>This is the scientist whose name is known all over the world.</p><p>The room whose window faces south is mine.</p><p>He has written a book whose name I’ve forgotten.#whose和修饰词在从句中做宾语</p><p>I’ll never forget the <strong>time</strong> when(<strong>during</strong> which) we worked on the farm. #when必修饰一段时间</p><p>Do you remember the <strong>afternoon</strong> when(<strong>on</strong> which) we first met three years ago.</p><p>This is the <strong>place</strong> where(<strong>at/in</strong> which) we first met.#where必须修饰一个地点</p><p>The <strong>hotel</strong> where(<strong>in</strong> which) we stayed wasn’t very clean.</p><p>This is a field where(in which) we can cooperate.</p><p>I didn’t get a  <strong>pay rise</strong>, but this isn’t the <strong>reason</strong> why(<strong>for</strong> which) I left. #why必须修饰一个原因</p><p>The reason why(for which) he was late is he missed the train.</p><p>as引导的非限定行定语从句放在主句之前句中或之后，用于修饰整个句子。主句和从句语义一致</p><p>which引导的非限定性定语从句放于句中或句末。主句和从句语义相反</p><p>as is known (to all); as is said; as is reported;as is announced;which is known</p><p>Dr.Chen, as we all know, is not only handsome but also wise, who is also a good teacher.</p><p>He made a long speech, as was expected.</p><p>He made a long speech, which was unexpected.</p><p>She <strong>brought with</strong> her three friends, none of <strong>whom</strong> I had ever met brfore.</p><p>Because of the financial crisis, days are gone when local 5-star hotels charged 6,000 yuan for one night.</p><p><strong>Life is a long race where we compete with others to go beyond ourselves.</strong></p><p>The Beatles, as many of you are old enough  to remember, came from Liverpool.</p><p>I’ll give you my friend’s home <strong>address, where</strong> I can be reached most  evenings.</p><p>All the neighbors admire this family, where the parents are treating their child like a friend.</p><p>As is often the case, we have worked out the production plan.#定语从句修饰整个句子，但翻译为正如平时那样，</p></blockquote><h2 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h2><ul><li>主语从句，宾语从句，表语从句，同位语从句</li><li>that, whether, what, who, which, whatever, whoever, how, when, where, why</li></ul><blockquote><p>在主句做主语的主语从句过长时后置，翻译时分为两句话</p><p><strong>It</strong> worried her a bit that her hair was turining gray.#that引导的主语从句做真正的主语，that没有意义也不可省略</p><p>That she is a rich woman is known to us all.</p><p>We didn’t know you had sold your house.#that引导宾语从句，可省略</p><p>Whether or not she’ll come isn’t clear.#whether可以引导主语从句和宾语从句，表是否</p><p>It all depends on whether or not/ifwe can get their cooperation.#if只可以引导宾语从句，表是否</p><p>what在从句中做主语或宾语</p><p>What she saw frightened her.#what在从句中作宾语</p><p>What was once regarded as impossible now bocome a reality.#what在从句中作主语</p><p>What hurts our feelings most was the personal comment of the judge.</p><p>What is gone is gone.</p><p>sure, happy,glad, glad, pleased后面可跟宾语从句</p><p>James said he was feeling better.</p><p>He ask me whether/if I know John.</p><p>Let me know whether you can come or not.</p><p>think, believe, suppose, expect表示相信认为的动词，主语表示否定时否定前移</p><p>I don’t think the film is interesting.</p><p>I don’t suppose we are going out tommorrow</p><p>有宾语补足语，在主句做宾语的宾语从句过长时后置，翻译时分为两句话。make, find, see, hear, feel, think, consider, regard, that… for granted</p><p>George made it clear that he opposed the project.</p><p>I took it for granted that you’d stay with us.#认为..理所当然</p><p>grant 同意允许；批准；授予；赋予v./拨款n.</p><p>As a friend of yours, I want to tell you what I hear.</p><p>Don’t poke your nose into what doesn’t concern you.</p><p>The city is different from what it was ten years age.</p><p>Philip was depressed by what he had gone through.</p><p>表语从句非正式文体中that可以省略</p><p>系动词：be, look, see, sound, smell, turn, get, become</p><p>The advantage of solar energy is it will never run out.</p><p><strong>What surprised me was that he spoke English so well.</strong></p><p>It looked <strong>as if</strong> it was going to rain.#表语从句可由as if(好像)引导</p><p>that引导的名词性从句还可以用在一些<strong>形容词</strong>后面，这种句型般都用人作主语，所用的形容词都是表示思想状况或感情色彩的形容</p><p>I’m happy that you can learn English well.</p><p>He became angry that you make the same mistake.</p><p>He <strong>remains</strong> confident that he will win.</p><p>We were <strong>rather</strong> disappointed that you were not able to come.</p><p>I shouldl like to be a teacher. That’s what I want to be. </p><p>-&gt; It’s what I want to be that I should like to be a teacher.</p><p>This is why…</p><p>This is because…</p><p>The reason why … is/was that…</p><p>He didn’t go bike with me. That’s because there was something wrong with his bike.</p><p>同位语从句=名词fact, newws, idea, truth, hope, suggestion, question, problem, doubt, fear, belief </p><p>The news that the United States was hit by terrorist attacks took the whole world by surprise.</p><p>The idea that you can do this work well without thinking is quite wrong.</p><p>People used to hold the belief that the earth was the center of the universe.</p><p>The difficulty lies in the fact that we are short of money.</p><p>I’ve got an answer that A is right.</p><p>I’ve got an answer that surprised me a lot.</p><p>The idea that some people are suprior to others is sheer nonsense.</p><p>The idea that he proposed at the meeting is sheer nonsense.</p><p>No one is happy with the fact that he found out.</p><p>No one is happy with the fact that he will become their boss.</p><p>That you don’t like him is none of my business.</p><p>She is very dear to us. We have been prepared to do whatever it takes to save her life.</p><p>whatever = what加强</p><p>Whether we’ll go camping tomorrow depends on the werther.</p><p>The fact has worried many scientists that the earch is becoming warmer and wamer these years. #同位语过长时，可以后置</p><p>That’s what the Party called on us to do.</p><p>The reason is that he is unable to operate the machine.</p><p>That he made an important speech at the meeting was true.</p><p>What makes this shop different is that it offers more personal services.</p><p>What the doctors really doubt is whether my mother will recover from the serious disease soon.</p><p>The suggestion that the students have plenty of exercise is very good.</p></blockquote><h2 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h2><blockquote><p>状语一般由副词、介词短语、非谓语动词或非谓语动词短语构成</p><p>状语一般在句末，也可放在句首或句中</p><p>He speak English very well</p><p>He is studying hard to win the scholarship.</p><p>The boy was praised for bravery.</p><p><strong>Faced with the situation,</strong> what are we supposed to do?</p><p>I still remember the day <strong>when I went to school</strong>.</p><p><strong>When she was 12 years old</strong>, she began to live in Dalian.</p><p><strong>If I am not busy tomorrow</strong>, I will play football with you.</p><p>as 作为；像as handsome as you；因为；随着；当。。时候；<strong>尽管虽然</strong>(倒装)，引导让步状语从句，把被强调内容提前</p><p>Ugly as I am, I’m tender</p><p>while 尽管(句首让步)；当。。；于此同时；然而(弱转折)</p><p>While the Internet is of great help, I don’t think it’s a good idea to spend too much time on it. </p><p>Leave your key with a neighbor <strong>in case</strong> you lock yourself out one day.</p><p>ever since 自从。。以后</p><p>soon after 。。后不久</p><p><strong>even if</strong> 尽管。。虽然= <strong>even though</strong> = <strong>even when</strong> = although = though</p><p>in case 以防万一</p><p>in that 因为</p><p>now that 既然</p><p>so that 因此 = such that</p><p>Mary made coffe while her guests were finishing their meal.</p><p>Many of them turned a deaf ear to his advice, even though they knew it to be valuable.</p><p>I won’t tell you, unless something unexpected happens.</p><p>as long as 只要 = so long as</p><p>once 一旦</p><p>Strange as it might sound, his idea was accepted by all the people at the meeting.#as表示尽管，将被强调词提前</p><p>You can’t borrow books from the school libary before you get your student card.</p><p><strong>He tried his best to solve the problem,however difficult it was.</strong>/difficult as it was# however  = no matter how</p><p>whatever happens = no matter what happens</p><p>Animal suffered at the hand of Man <strong>in that</strong> they were destroyed by man to <strong>make way for</strong> agricultural land to provide food for more people.# in that因为；make way for为。。让路</p><p>He had his camera ready, in case he saw something that would make a good picture.</p><p>if only 要是。。就好了(虚拟语气)</p><p>only if 只有只要</p><p>I wonder how much you charge for your services.</p><p>– The first two are free while the third costs $30.#while表示弱转折，不翻译为然而</p><p>We thought there were 35 students in the dinning hall, while, in fact, there were 40.#弱转折</p><p>The old tower must be saved, whatever the cost is.#无论是什么；however无论多么</p><p>While volleyball is her main foucus, she’s also a great at basketball.</p><p>Although he has limited technical knowledge, the old worker has a lot of experience.</p><p>since 自从。。；既然</p></blockquote><h2 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h2><blockquote><p>The method used by us is wrong.</p><p>Wang Peng sat in his empty restaurant feeling very frustrated.</p><p>To study/Studying English well is very important .</p><p>一个对象，进行两个并列的动作使用doing</p><p>Walking in the street, she met her old friend.</p><p>Seeing no body at home, she decided to eat outside.</p><p>一个对象，同时被动或系表，使用ed非谓语动词</p><p>The flower picked by him are very beautiful.</p><p>To be a winner, you need to give all you have and try your best.</p><p>It is no use complaining without taking action.#It is no use doing</p><p>Tsinghua University, founded in 1911, is home to a great a number of outstanding figures.</p><p>We were astonished to find the temple still in its originanl condition.</p><p>Alexander tried to get his work recognized in his medical circles.</p><p>medical circle 医学圈</p><p>On receving a phone call from his wife saying she had a fall, Mr Gordon immediately rushed home from his office.</p><p>on doing sth…, 一。。就</p><p>The difference in thickness and weight from the earlier verion makes Ipad 2 more comfortable to hold/to be held#主动表被动.</p><p>be 形容词 to do可以主动表被动</p><p>The fish <strong>is</strong> delicious to eat./to be eaten</p><p><strong>make</strong> English so easy to learn</p><p><strong>there is</strong> nothing to read</p><p>This island, <strong>joined</strong> to the mainland <strong>by</strong> a bridge, is easy to go to.</p><p>Simon made a big bamboo box to keep the little sick bird till it could fly.</p><p>Tom asked the candy maker if they could make chocolate easier to break into small pieces.</p><p>Gathering around the fire, the tourists danced with the local people.</p><p>Sarah pretended to be cheerful, saying nothing about the argument.</p><p>More TV programs, according to government officials, will be produced to raise people’s concern over food.</p><p>Michael put up a picture of YaoMing beside the bed to keep himself to remind of his dream.</p><p>Bats are surprisingly long-lived creatures, some having a life span of around 20 years.</p></blockquote><h2 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h2><blockquote><p>To study English well is very important.</p><p>It’s very important to learn English well.</p><p>It’s very important that we should learn English well.#主语从句</p><p>He didn’t make it clear when and where the meeting would be held.#宾语从句+宾补</p><p>The chairman thought it necessary to invite Professor Smith to speak at the meeting.</p><p>take it for granted that … 认为理所当然</p><p>强调句</p><p>It is … that …</p><p>It is … which …</p><p>It is … who …</p><p>It was the M River that MT spent much of his childhood.</p><p>It’s I that love you.</p><p>It’s you that I love.</p><p>It’s the spirit of confidence that is the key to succeess.</p><p>It was not untill the midnight that they reached the camp site.</p><p>Everyone knows it is dangerous to play with fire, but what is difficult is to prevent children from playing with fire.#To play with fire is dangerous.</p><p>Whu don’t you bring it his attention that you’re too ill to work on.</p><p>thanks to 幸亏；由于</p><p>The <strong>employment rate</strong> has continued to rise in the big cites thanks to efforts of the local government to increase it.#jobless rate</p><p>The doctor thought it would be good for you to have a hoilday.</p><p>It is not how much we do but how much love we put into what we do that benifits our work most.</p><p>It’s not what we do once in a while that shpaes our lives, but what we do consistently.</p><p>The cost of renting a house in central Xi’an is higher that that in any other area of the city.</p><p>get around 传播 </p><p><strong>The information</strong> on the internet gets around <strong>much more rapidly than</strong> that in the newspaper.</p><p>The people in China area more than those in England.</p><p>The pen on the disk is much newer than that in the pencil case.</p><p>The <strong>population</strong> of China is much <strong>lager</strong> than that of any other county in the world.</p></blockquote><h2 id="虚拟语气与倒装句"><a href="#虚拟语气与倒装句" class="headerlink" title="虚拟语气与倒装句"></a>虚拟语气与倒装句</h2><blockquote><p>here, there, now, then 等副词句首时，谓语动词常用be</p><p>There goes the bell. </p><p>Then came the chairman.</p><p>Here is your letter.</p><p>Tod can’t swim, nor can I.</p><p>Tod can’t swim, I can nor.</p><p>No other countries could join in, nor could slaves or women.</p><p>bare fist 赤手空拳</p><p>never, hardly, seldom, scarcely, rarely, barely, at no time(从不), in no way(没门), by no means, not only等放句首的句子</p><p>At no time did they actually break the rules of the game. It was unfair to punish them.</p><p>Never shall I go there again.</p><p><strong>Seldom was he late for class.</strong></p><p>Women are not only allowed, but play a very important role/part.</p><p><strong>Not only did</strong> they take photos, but also they had a big dinner.</p><p>no… sooner than(一..就), hardly… when…(一..就), not until…放句首的句子</p><p>Hardly had I reached the station when the train left.</p><p>No sooner had she gone out than the phone rang.</p><p>Not until the teacher came did he finish his homework.</p><p>only放句首修饰副词、介词短语或状语从句时倒装</p><p>Only in this way can you learn English well. </p><p>Only that time did he do his homework.</p><p>Only when he told me did I realize what trouble I was in.</p><p>Only then did we decide to answer violence with violence.</p><p>Only in this way, can we protect the environment better.</p><p>Only books can enrich the mind of people.</p><p>Only you can save me.</p><p>Only when he apologizes for his rudeness will I speak to him again.</p><p>“Never for a second,” the boy says, “did I doubt that my father would come to my rescue.”</p><p>Only by increasing the number of doctors by 50 percent can the patients be treated properly in this hospital.</p><p><strong>Not until</strong> he went through real hardship did he realize the love we have for our families is important.</p><p>The work had been finished when I got there.</p><p>He had finished it by the end of May.</p><p>I have seen this film.</p><p>I have lived here since I was born.</p><p>与现在事实相反时从句用过去时(did/were)主句用would/should/could/might+动词原形</p><p>How nice it would be if I had a sister like you.</p><p>与过去事实相反时从句用过去完成时(had done)，主句用would/should/could/might + have done</p><p>Were you in time for the lecture?</p><p>– If I hade been told earlier, I would have. </p><p>对将来虚拟时，从句中可用三种形式，即动词的过去式/should+动词原形/were to+动词原形</p><p>如果把if省去，should提前构成倒装</p><p>Should he come tommorrow, …</p><p>This printer is of good quality. If it should/were to break down within the first year, we woud reapair it at our expense.</p><p>Should you be fired, your health care and other benefits will not be immediately cut off.</p><p>错综时间条件句：主句和从句的谓语要根据各自不同的时间选择适当的动词形式</p><p>You would be much better now, if you had taken the doctor’s advice.</p><p>but for 要不是</p><p>without you 没有你</p><p>含蓄虚拟语气</p><p>But for of the help my English teacher, I would not have won the first prize <strong>in the English Writing Competition</strong>.</p><p>wish后的宾语从句中：与现在事实相反时用were或动词的一般过去时；过去事实相反时用had+过去分词；对将来虚拟时用would/could/might+动词原形</p><p>How I wish every family had a large house with a beautiful garden!</p><p>I wish I would fly.#将来虚拟</p><p><strong>It’s high time that</strong>谓语动词用<strong>过去时</strong>或s<strong>hould + 动词原形</strong>(should不能省略)，表示“早就该。。。”</p><p>It’s no use envying others  their success. It’s time that you worked hard.</p><p><strong>insist</strong>, <strong>order</strong>, <strong>command</strong>, <strong>advise</strong>, <strong>suggest</strong>, <strong>propose</strong>, <strong>demand</strong>, <strong>require</strong>, <strong>request</strong>, <strong>ask</strong>这类虚拟语气由should+动词原形构成，其中<strong>should因该被省略</strong></p><p>He insisted that I (should) go with them.</p><p>He ordered that it (should) go sent back.</p><p>The doctor advised/suggested that he (should) not smoke.</p><p>He requires that I (should) <strong>appea</strong>r.</p><p>It is ordered that he (should) take the examination.</p><p>We suggested that the meeting (should) be put off.</p><p>provoke 激怒；挑衅v.</p><p>It’s demanded that North Korea (should) not threaten the religional stability by provoking South Korea.</p><p>suggest 暗示表名时不需要虚拟，建议时不需要虚拟</p><p>Her pale face suggested that she was ill, and her parents suggested that he have a medical examination.</p><p><strong>I had gone to my cousin’s birthday party last night, but I was not available.</strong></p><p>If we had booked a table earlier, we couldn’t be standing here in a queue</p><p>Do you think George has passed the driving test?</p><p>– No.If so, he <strong>would have driven</strong> his car to our college yesterday.#过去事实</p><p>Eye doctors <strong>recommned</strong> that a child’s first eye exam <strong>be</strong> at the age of six months old.</p><p>We would have got wet all over if we hadn’t.</p><p>I should not have laughed if I had thought you are serious.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day12】搜索二维矩阵Ⅱ</title>
      <link href="/2021/10/25/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day12%E3%80%91%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E2%85%A1/"/>
      <url>/2021/10/25/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day12%E3%80%91%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E2%85%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240. 搜索二维矩阵 II"></a><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II</a></h4><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：<img src="https://i.loli.net/2021/10/25/2yrku7aWt3TU5Ff.jpg"></h3><p>输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5<br>输出：true</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：<img src="https://i.loli.net/2021/10/25/yJgSktBE5oPCnwr.jpg"></h3><p>输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20<br>输出：false</p><p>提示：</p><blockquote><p>m == matrix.length<br>n == matrix[i].length<br>1 &lt;= n, m &lt;= 300<br>-109 &lt;= matrix[i] [j] &lt;= 109<br>每行的所有元素从左到右升序排列<br>每列的所有元素从上到下升序排列<br>-109 &lt;= target &lt;= 109</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="https://i.loli.net/2021/10/25/Ee6Sv3a2gMmTN5f.png"></p><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ten】英语五天强化Day2</title>
      <link href="/2021/10/24/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day2/"/>
      <url>/2021/10/24/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day2/</url>
      
        <content type="html"><![CDATA[<h2 id="高频词"><a href="#高频词" class="headerlink" title="高频词"></a>高频词</h2><p>prefer 更喜欢</p><p>-fer 拿</p><p>preference 更喜欢；偏爱n.</p><p>rather 十分 good</p><p>rather than  B 而不是</p><p>instead of 代替，而不是</p><p>instead (替代性的)相反</p><p>di- 分开</p><p>divide 分开</p><p>differ 不同v.</p><p>differ from 不同于=be different from</p><p>offer 提供v./offer n.</p><p>trans- 穿越across a-&gt;b</p><p>transform 变形转变v.</p><p>transplant 移植移民v.</p><p>transfer  转移；转学；转机n.v.</p><p>trans<strong>it</strong>ion 过度，过渡期n.</p><p>transit v.渡过；经过</p><p>afford 买得起</p><p>affordable 买得起的</p><p>refer 参考提到涉及</p><p>refer to ..提到。。涉及到。</p><p>paper 论文</p><p>moral 道德的 immoral 不道德的</p><p>reference 提到参考参考文献</p><p>reference book 参考书</p><p>suffer 遭受；承受</p><p>suffer from cancer</p><p>suffering 痛苦n.</p><p>pain 痛苦；努力</p><p>prepare 准备v.</p><p>preparation 准备n.</p><p>ready 准备好的；乐意的<strong>adj.</strong></p><p>be ready to help others 乐于助人</p><p>readily 准备好地；乐意地adv.</p><p>prevent 预防；防止；阻止</p><p>prevent sb from doing sth 阻止某人做某事</p><p>prevention 阻止</p><p>preventive 预防性的</p><p>hinder 组织(非预防)v.</p><p>avoid 避免v.</p><p>avoid these troubles</p><p>avoidable 可避免的</p><p>allow sb to do sth 允许</p><p>let sb (to) do 让。。 </p><p>convenient 方便的(主语是物)</p><p>convenience</p><p>It’s convenient for me ..</p><p>convention 大会会议(正式)；公约；<strong>惯例</strong>习俗常规</p><p>conventional <strong>惯例</strong>的习俗的常规的</p><p>tranditional culture</p><p>tranditional festival</p><p>session 会议；一届n.</p><p>meeting</p><p>conference 会议</p><p>invite  邀请</p><p>join us</p><p>participate in = take part in 参与参加</p><p>participant 参加者</p><p>delay 推延延迟 = put off</p><blockquote><p>Do not put off what you can do today till tommorrow</p></blockquote><p>event 大事，事件</p><p>affair 事情，风流韵事</p><p>previous 先前的 = preceding以前的先前的</p><p>precede 先于v.</p><p>later 后来</p><p>the former | the latter</p><p>re-again/back</p><p>repeat 重复</p><p>recall 回忆</p><p>re<strong>ceive</strong> 接受得到(被动)</p><p>ac<strong>cept</strong> 接受(主动) a+辅音开头表强调</p><p>-ceive = -cept 得到</p><p>re<strong>cept</strong>ion 接受；得到</p><p>perceive 理解v.  (每一个都得到)</p><p>perception 理解领悟感受</p><p>taste 味道味觉品味n./尝起来v.</p><p>sense 感觉n.v.</p><p>sensitive 灵敏度敏感的</p><p>sensi<strong>ble</strong> 能感觉到的；明智的=wise</p><p>wisdom 智慧</p><p>realize 实现；意识到</p><p>real 真的</p><p>aware</p><p>be aware of = be conscious of 知道。。意识到。。</p><p>awareness = consciousness 意识</p><p>alert 提醒，使警惕v./警惕警报n./警惕的adj.</p><p>note 注意到v./笔记n.</p><p>take notes</p><p>notebook</p><p>concept 概念(抽象)n.</p><p>new concept English</p><p>conceive 构思；怀孕v.</p><p>conception 概念；想法；怀孕n.</p><p>recognize 认可；认识到v.</p><p>cognitive 认知性的</p><p>recommend 推荐；建议</p><p>recommendation 推荐；建议</p><p>commend 推荐</p><p>recover 恢复；复苏v.</p><p>recycle 回收利用v.</p><p>recyclable 可回收利用的</p><p>cycle 周期；循环v.</p><p>reflect 反射；放映；<strong>反思</strong>；<strong>思考</strong>v.</p><blockquote><p>You should reflect on this problem</p></blockquote><p>relection 反射反映反思思考</p><p>image 形象</p><p>imagine 想象</p><p>fantasy 幻想想象 n.v.</p><p>fantastic 棒极的adj.</p><p>remain 依然是；仍然是</p><p>main idea中心思想</p><p>major 专业n./主修v./主要的adj.</p><p>major in English</p><p>majority 大部分</p><p>the majority of people</p><p>minor 辅修专业n./辅修n./次要的；小部分的adj</p><p>minority 小部分；少数民族</p><p>the minority of </p><p>largely 大部分地</p><p>re<strong>memer</strong> 想起</p><p>forget 遗忘</p><p>memorize 记住v.</p><p>I can memorize your name</p><p>memeory 记忆n.</p><p>place 位置n./摆放v.</p><p>replace  代替替代v.</p><p>instead of代替；而不是</p><p>require 要求v.</p><p>requirement 要求n.</p><p>serve 服务；发挥作用v.</p><p>service 服务v.n.</p><p>servant 服务员；仆人n.</p><p>-server 持有</p><p>reserve 保留；预留；预定v. </p><p>resident 居民n.</p><p>reside 居住v.</p><p>result in 导致 = lead to</p><p>result from 由于(原因)</p><p>respond to… 对…做出反<strong>应</strong></p><p>response 反应回应n.</p><p>respons<strong>ible</strong> 负责任的</p><p>irresponsible 不负责任的</p><p>responsibility 责任</p><p>respondent 做出回应的人</p><p>function 功能；作用n.</p><p>multi-functional hall多功能大厅</p><p>play a role in</p><p>play a part in</p><p>在。。扮演角色/在。。发挥作用</p><p>reveal 揭示v.</p><p>retire 退休v.</p><p>retirement</p><p>entire 完全的</p><p>entirely wrong</p><p>overall 总的总体的</p><p>reverse 颠倒；扭转；逆转v./相反的.adj</p><p>tissue 组织；餐巾纸</p><p>voice 声音n./说；表达v.</p><p>tone 腔调；调子</p><p>treat 治疗；处理对待</p><p>treatment 治疗；处理对待</p><p>therapy 疗法</p><p>sypmtom 症状</p><p>symbol 象征</p><p>symbolize 象征着…</p><p>stand for 代表</p><p>present 礼物=gift；目前现在n./目前的现在的；出席的在场的adj./提出呈现；赠送v.</p><p>re<strong>present</strong> 代表v.</p><p>representation 代表n.</p><p>representative 代表性的</p><p>sign 签名；署名v./标记；标志；迹象征兆n.</p><p>quit this job</p><p>resign from … </p><p>significant 显著的；重要的</p><p>serious 严重的；严肃的</p><p>necessary 必要的</p><p>I need your help = you help is necessary for me</p><p>primary 初级的；首要的</p><p>primary reason</p><p>essence 精华；本质n.</p><p>essential 精华的本质的；至关重要的；必不可少的</p><p>meaningful 有意义的</p><p>the meaning of this world</p><p>mean 意味着v./平均的；吝啬的小气的adj.</p><p>平均值 mean value = average value</p><p>Bachelor -&gt; Master -&gt;Doctor学位时首字母大写</p><p>bachelor 光棍 单身汉</p><p>master 大师师傅n./掌握精通v.</p><p>doctor 医生</p><p>grade 等级；年纪</p><p>graduate 毕业生n.</p><p>graduate from 毕业于。。</p><p>gradual 逐级的逐渐的慢慢的</p><p>gradually 逐级地逐渐地慢慢地</p><p>patient 有耐心的/病人</p><p>bacteria 细菌</p><p>care 关心照顾v.n.</p><p>physical 身体的 problem</p><p>physician  医生；内科医生</p><p>surgeon 外科医生</p><p>ill-&gt;illness</p><p>sick-&gt;sickness</p><p>healthy-&gt;health</p><p>fit-&gt;fitness 健康；合适</p><p>keep fit</p><p>medicine </p><p>medical 医药的</p><p>medication 治疗药物</p><p>mind 精神；思想</p><p>crazy mind </p><p>mental 精神的 health</p><p>know</p><p>knowledge 知道；了解；知识</p><p>my knowledge</p><p>intelligence 智力；理解力；<strong>情报</strong> = information</p><p>intelligent 聪明的；有理解力的；智能的</p><p>smart 聪明的；智能的</p><p>smartphone</p><p>wise 有智慧的</p><p>excellent 优秀的</p><p>outstanding 杰出的</p><p>genetic 基因的；遗传的</p><p>gene 基因</p><p>genius 天赋天才</p><p>pain 痛苦；努力</p><p>obesity 肥胖症</p><p>fat </p><p>round 圆的</p><p>industry 工业产业；勤奋勤勉</p><p>industrial 工业的</p><p><strong>industrious</strong> 勤奋的 = deligent =hardworking</p><p>machine 机器</p><p>equipment 设备</p><p>introduce</p><p>advanced</p><p>device 设备；装置；装备</p><p>engine 引擎；发动机</p><p>engineer 工程师</p><p>energy 能量；能源</p><p>power 电力；力量；权势</p><p>force 力量n./强迫v.</p><p>force to do sth</p><p>power plant 电厂</p><p>powerful 有权势的；有力量的</p><p>powerless 无权势的；无力量的</p><p>the powerful 有权势的人</p><p>useful</p><p>useless</p><p>careful 小心的</p><p>careless 粗心的</p><p>hopeful </p><p>hopeless 无希望的</p><p>strong</p><p>strength 力量；强壮；优势；优点</p><p>weakness 弱点；弱势</p><p>disadvantage </p><p>benefit 好处利益；福利n./使收益vt./从得到好处vi.</p><p>profit 利润</p><p>benefit sb 使sb收益</p><p>benifit from ..  从。。。得到好处</p><p>beneficial 有好处的，有利的</p><p>harm n./v. 伤害</p><p>be harmful to 对。。有害</p><p>effort 努力</p><p>effortless 没有努力的</p><p>fuel 燃料n./燃料；刺激v.</p><p>source 来源n.</p><p>resource  资源n.</p><p>HR human resources</p><p>material 材料；物质/物质的；材料的</p><p>materialism 物质主义；唯物主义</p><p>solar 太阳的</p><p>solar energy 太阳能</p><p>natural 自然的</p><p>nature 天然；天性本性</p><p>prey 捕获猎物v.</p><p>fic = fact = fect = <strong>do</strong></p><p><strong>art</strong>i<strong>fic</strong>ial 人工的；虚伪的；矫揉造作的</p><p>creative 创造性的</p><p>manual 人工的手工的 </p><p>manu<strong>fact</strong>ure 制造v.</p><p>manufacturer 制造商 </p><p><strong>e</strong>f<strong>fect</strong> 完成实现v./影响效果n.</p><p>have an effect on </p><p>effective 有效的</p><p>take effective measures to do sth </p><p>affect 影响；打动感动v.</p><p>affection 影响；爱情柔情</p><p>I still have affection for my old school</p><p>affectionate 柔情似水的</p><p>affectionate couple 鸳鸯</p><p>impact 冲击v.n.</p><p><strong>per</strong> <strong>fect</strong> </p><p>imperfect</p><p>ef<strong>fic</strong>ient 高效率的</p><p>effective 有效果</p><p>efficiency 效率n.</p><p>enhance 提高</p><p>prompt 提高推动v./迅速的adj.</p><p>pollution 污染n.</p><p>pollute  污染v.</p><p>mix 混合v.n.</p><p>classify 分类v.</p><p>be harmful to </p><p><strong>contaminate</strong> = pollute</p><p>damage 破坏</p><p>destroy 破坏(严重)</p><p>ruin n.废墟；毁灭/毁灭v.</p><p>in ruins 在废墟中</p><p>busy</p><p>business 生意 商业</p><p>market 市场n./销售；营销v.</p><p>marketing 市场营销n.</p><p>globe 球</p><p>global 全球的</p><p>universal 普遍的全体的共同的</p><p>sphere 球；球体</p><p>hemisphere 半球</p><p>semiconductor</p><p>trade 行业交易贸易n./交易贸易v.</p><p>the war of trade = the trade war</p><p>purchase 买v. buy</p><p>order 订货预定命令v./顺序秩序n.</p><p>list 清单n./列举v.</p><p>port 港口</p><p>airport 机场</p><p>import 进口n.v.</p><p>export 出口n.v.</p><p>passport 护照</p><p>cost 费用；代价；</p><p>at the cost of</p><p>at the expense of</p><p>以。。为代价</p><p>charge 充电；收费；掌管负责；指责控告v./电荷；费用；指责控告n.</p><p>free of charge 免费</p><p>in charge of 掌管负责</p><p>charge sb with sth</p><p>accuse sb of sth </p><p>职责某人某事</p><p>rent 租金/租</p><p>values价值观</p><p>value 估值估价珍视v./价值观</p><p>valuable 有价值的</p><p>worth 价值n.</p><p>worthty 值得的 </p><p>share 分享v./份额；股份股票n.</p><p><strong>market share</strong> 市场份额</p><p><strong>shareholder</strong> 股东 stcokholder</p><p>stock 库存存货；股票股份</p><p>economic 经济的</p><p>economy 经济</p><p>economices 经济学</p><p>economist 经济学家</p><p><strong>found</strong>ation 建立设立；基础；基金会n.</p><p>found 建立设立v.</p><p>founder 创始人</p><p>basic 基本的基础的</p><p>basics 基础知识n.</p><p>base … on … 将…基于</p><p>be based on 基于…</p><p>ultimate 最后的最终的</p><p><strong>ultimately = eventually</strong> 最终最后  = finally = lastly = at last</p><p>radical 根本的；根本的；激进的；彻底的</p><p>radical change</p><p><strong>commerce</strong> 商业 = business</p><p>commercial 商业的/商业广告</p><p>count 计算数数v.</p><p>account 记录记账v./账户；账目n.</p><p>accounting 会计；会计学</p><p>accountant 会计；会计师</p><p>amount 总数总量</p><p>amount to 总数达 </p><p>total 总的</p><p>total income</p><p>financial 金融的财政的</p><p>finance 金融财政</p><p>interest 兴趣；利息；利益</p><p>the rate of interest 利率</p><p>in the interest of sb 为了某人的利益</p><p>be interested in对。。有兴趣</p><p>interesting </p><p>nation 国家民族</p><p>national 国家的民族的</p><p>field 田地田野；领域</p><p>area 土地；范围领域</p><p>policy 政策</p><p>social policy</p><p>politic policy 名词修饰名词</p><p>political policy</p><p>politician 政客；政治家</p><p>statesman 政治家</p><p>state 国家；州；状态n./陈述说明v.</p><p>your state of mind</p><p>statement 说明，声明n.</p><p>tell a from b  区分a和b</p><p>explain 解释说明</p><p>stage 舞台；阶段</p><p>estate 地产</p><p><strong>real estate</strong> 房地产</p><p>keep stable = keep steady 保持稳定的</p><p>govern 管理统治，控制v.</p><p>government 政府</p><p>governor 州长；总督</p><p>organization 组织n.</p><p>organize 组织v.</p><p>system </p><p>systematic 系统化的</p><p>authority 权威；政府当局</p><p>the authorti<strong>es</strong> 政府当局</p><p>author 作者作家</p><p>cener on 集中于</p><p>focus on 聚焦于；集中于</p><p><strong>con</strong> <strong>centra</strong>te on 集中于</p><p>central 中心的</p><p>central government 中央政府</p><p>local government 地方政府</p><p>community 社区；社会；群落</p><p>music community 音乐节</p><p>academic community 学术界</p><p>communicate 沟通交流；通讯v.</p><p>communication 沟通交流；通讯n.</p><p>mass communication<strong>s</strong> 大众通信</p><p><strong>populati</strong>on 人口</p><p>populate 居住；位于v.</p><p>crowd 人群n./拥挤v.</p><p>crowded 拥挤的</p><p>public 公开的；公众的；公立的</p><p>the public 公众</p><p>public school 公立学校</p><p>private school 私立学校</p><p>publish 公布；发表；出版</p><p>-ish 动词形容词后缀</p><p>finish selfish </p><p>code 密码；代码；法则<strong>准则</strong>n./编码v.</p><p>moral code 道德准则</p><p>encode 编码</p><p>deal 协议交易</p><p>deal with 处理</p><p>accord 协议n.</p><p>accord to 根据。。 和。。。</p><p>steal 偷</p><p>illegal 非法的</p><p>bias 偏见 prejudice</p><p>ignorant 无知的</p><p>chanllenge  挑战v.n.</p><p>political challenge </p><p>opportunity 机会</p><p>moment 瞬间 时刻</p><p>turn 转v.</p><p>turn on the television</p><p>turn off 关掉</p><p>turn up 调大</p><p>turn down 调小</p><p>turning point 转折点</p><p>risk 冒险v./风险n.</p><p>at the risk of  failure冒着。。的风险</p><p>try 尝试；审判v.</p><p>trial 尝试，审判n.</p><p>chance 机会；可能性</p><p>accident 意外；事故</p><p>happen 发生v.</p><p>happen to 碰巧</p><p>occur 发生</p><p>shift  转换v.n.</p><p>drama 戏剧</p><p>dramatic 戏剧性的；急剧的剧烈的</p><p>dramatic chanages 急剧的变化</p><p>play a  role in = play a part in在。。发挥作用/扮演角色</p><p>crisis 危机</p><p>economic crisis 经济危机</p><p>political crisis</p><p>traditional culture</p><p>national culture</p><p><strong>cult</strong>ure 文化n./培养v.</p><p><strong>cult</strong>ivate 培养v.</p><p>cultivate the spirit of innovation</p><p>cultivate the awareness of cooperation</p><p>cultural hetitage 文化自信</p><p>traditional </p><p>tradition and custom 传统和习俗</p><p>curious 好奇的</p><p>curiosity  好奇好奇心；古玩古董</p><p>ancient 古老的</p><p>vulner<strong>able</strong> 脆弱的；易受伤害的</p><p>be vulnerable to 易受伤害的</p><p>vulnerability 脆弱性；弱点</p><p>domestic 国内的；家庭的</p><p>dome 圆屋顶；苍穹</p><p>domestic arrival</p><p>abroad arrival </p><p>district 区域；区</p><p>urban 城市的</p><p>subway 地铁</p><p>urban 城市的</p><p>suburban 郊区的乡村的</p><p>military 军事的 activities </p><p>military service 兵役</p><p>army</p><p>war</p><p>rule 规定v./规则n.</p><p>manner 方式；行为礼貌</p><p>in the … manner 以。。的方式</p><p>mind your manners</p><p>mind your behaviors</p><p>behave </p><p>behavior  表现行为；性能n.</p><p>abruptly 突然地；唐突地；鲁莽地</p><p>society 社会；社团协会=association</p><p>社团：society / association</p><p>NBA national basketball association</p><p>China basketball association</p><p>social 社会的</p><p>socialism 社会主义</p><p>socialist 社会主义者</p><p>equal 平等的</p><p>equality 平等；平等性</p><p>infrastructure 基础设施</p><p>infrared 红外线</p><p>compare with(相不同点)</p><p>compare to (共同的)</p><p>common 相同点n./相同的adj.</p><p>common interest 相同的兴趣</p><p>rare 稀有的稀少的</p><p>rarely 稀有地稀少地；几乎不=hardly 放句首倒装</p><p>almost 几乎</p><p>regular 规则的规律的；普通的常规的；经常的定期的 regular customer</p><p>irregular </p><p>routinely 常规地</p><p>route 路径</p><p>random 随机的随意的/随机随意n.</p><p>at random</p><p>average 平均的；普通的</p><p>average person 普通人</p><p>normal person 正常人</p><p>normal 标准的正常的</p><p>norm 标准准则正常</p><p><strong>ab</strong>normal 变态的不正常的</p><p>ab-off</p><p>general 一般的普遍的总的</p><p>generally speaking 一般来说；总的来说</p><p>broadly 广泛地</p><p>standard 标准n./标准的adj.</p><p>height 高度</p><p>peak 巅峰顶峰 匹克</p><p>highly 高度地</p><p>extremly 极端地；及其；非常 = very</p><p>ethically 伦理地；道德上的</p><p>slightly 轻微的</p><p>even 即时adv/平均的adj.</p><p>measure 衡量；测量v./措施n.</p><p>take effective measures to do sth</p><p>special 特殊的；专业的；专门的</p><p>specialist 专业人士；专家</p><p>specific 具体的；特定的</p><p>specially 特殊地</p><p>particularly  = especially = in particular 特别；尤其</p><p>counter 柜台；计算器/<strong>相反的</strong>/相反地/相反地相对地/反对v.</p><p>counter sb</p><p>counterpart 相对应的部分；相对应的人或物n.</p><p>given 鉴于考虑到</p><p>compete with 与…竞争</p><p>competitive 竞争性的</p><p>condition 条件</p><p>case 情况；事实</p><blockquote><p>This is not the case.</p></blockquote><p>situation 情况，局势</p><p>environment 环境</p><p>environmental pollution </p><p>position 位置/放置v. = put</p><p>space 空间</p><p>spacious 宽敞的</p><p>site 位置 website网站</p><p>positive – negative</p><p>conflict 冲突v./n.</p><p>consider … as … 将。。。看作</p><blockquote><p>I consider you as my best friend </p></blockquote><p>consideration 思考</p><p>considerate 体贴的考虑周到的  = thoughtful</p><p>considerable 值得考虑的；相当大的</p><p>considerable progress</p><p>believe 相信；认为v.</p><p>belief 信念；信仰n.</p><p>contribute 贡献v.</p><p>contribute to 促进有助于</p><p>contribution 贡献捐献n.</p><p>complain 抱怨投诉v.</p><p>complaint 抱怨投诉v.</p><p>complete 完成v./完全的adj.</p><p>completely 完全地</p><p>concern 关心</p><p>scar 伤疤</p><p>confidence 结果后果</p><p>consequence 结果后果</p><p>as a result  = therefor</p><p>as a consequence </p><p>consequently</p><p>结果是，因此adv</p><p>consume 消费v.</p><p>consumer 消费者</p><p>consumption 消费n.</p><p>contact 联系v.</p><p>continue 连续</p><p>go on 继续</p><p>keep  </p><p>stay 待着,保持</p><p>keep calm = stay calm</p><p>test v.n. 测试测验</p><p>college English test</p><p>examine 测试；检查v.</p><p>examination 测试；检查n.</p><p>question - answer 需要回答的问题</p><p>issue （大）问题n./发布v.</p><p>issue a report</p><p>problem 问题</p><p>trouble 麻烦n./打扰v.</p><p>sb is <strong>in trouble</strong></p><p>solve 解决 v.</p><p>resolve 解决；决定；下决心v.</p><p>resolve this problem</p><p>resolution 解决方案；决定决心</p><p>settle 定居；解决v.</p><p>approach 接近靠近；处理着手v./方法途径n.</p><p>approach this problem</p><p>cope vi.</p><p>cope this problem = deal with </p><p>handle 手柄把手n./处理v.</p><p>handle this problem</p><p>seem  看起来v.</p><p>appear 看起来；出现v.</p><p>appear<strong>ance</strong> 出现；外表外貌</p><p>apparent 看起来的；外表的；外貌的；明显的显然的 = obvious=der</p><blockquote><p> It is obvious that … </p><p> -&gt; It is apparent that Dr.Chen is not only handsome but also talented</p></blockquote><p>sur- 在。。上</p><p><em>sur</em>face 表面</p><p>face 脸；面</p><p>arrange 安排v.</p><blockquote><p>Can I arrange an appointment for Monday?</p></blockquote><p>arrangement 安排</p><p>assign 分配；分派v.</p><p>assignment 任务</p><p>as<strong>soci</strong>ate 联系v./伙伴n./副的adv. </p><p>associate professor（只用在教授）</p><p>association 联系；社团协会 = society</p><p>tach- 钉子</p><p>attach 粘贴；依附v.</p><p>attach .. to  将..粘贴/依附到。。。</p><p>de = down</p><p>detach from 与。。相脱离/分离</p><p>stick 棍n./戳v.</p><p>stick to 坚持</p><p>attack 攻击v./n.</p><p>attention 注意关注</p><p>attention 注意关注</p><p>pay attention to </p><p>attend 参加；照顾v.</p><p>tend to 趋向于往往会</p><p>tendenct 趋势 =trend </p><p>tide 潮流；潮汐</p><p>at<strong>tract</strong> 吸引 </p><p><strong>tract</strong>or 拖拉机</p><p>attraction 吸引；吸引力n.</p><p>attractive 有吸引力的</p><p>appeal/attract to your attention</p><p>appeal 呼吁；吸引；上诉v./吸引；吸引力n. </p><p>opt 选择v.</p><p>option 选择选项n.</p><p>optional 可选的</p><p>choice 选择n.</p><p>choose 选择v.</p><p>pick 选；捡v.</p><blockquote><p>I pick this one</p></blockquote><p>pick up 捡起来；学到；接人</p><p>alternat<strong>ive</strong> 可选择的；其他的adj./选择；其他选择n.</p><p>alter 改变v.</p><p>whether 是否</p><p>whether or not 是否</p><blockquote><p>We donnot know whether he was killed or not</p></blockquote><p>despite = in spite of 尽管；虽然 </p><p>yet 然而  = and yet</p><p>error 错误</p><p>fault 错误</p><blockquote><p>This is my fault</p></blockquote><p>faulty 错误</p><p>fail to 未能..</p><p>failure 失败n.</p><p>frustrate 挫折v.</p><blockquote><p>I’m frustrated.</p></blockquote><blockquote><p>What doen’t kill you will make you stronger</p></blockquote><p>frustration 挫折n.</p><p>lose 失去</p><p>miss 错失</p><p>missing 消失不见的</p><p>e<strong>limin</strong>ate 消除淘汰v.</p><p>score 得分v./分数n.</p><p>mark 标志；分数n./打分v.</p><p>cross 穿越v./十字架；十字路口n./生气的adj.</p><blockquote><p>Don’t be cross</p></blockquote><p>across 穿越地；跨越地 adv.</p><p>pratice 实践练习v.n.</p><p>exercise 练习 v.n.</p><p>drill 练习；钻孔；打洞v./练习n.</p><p>train 火车n./培训；训练v.</p><p>pass 通过v.</p><p>increase 增长增加n.v.</p><p>increasingly 越来越</p><p>increasingly  important </p><p>imcreasingly efficient</p><p>add 增加；补充说v.</p><p>addition 增加；补充</p><p>in addition, 此外</p><p>in addition to+对象 除。。之外</p><p>in addition to this reason</p><p>raise 提高增加；抚养v.</p><p>raise your English level</p><p>raise money 筹集资金</p><p>raise pet/dog</p><p>rise vi. 升起；上升/上升n.</p><blockquote><p>The sun rises</p></blockquote><p><strong>de</strong>crease 下降；减少v.n.</p><p>devalue 贬值v.n.</p><p>decline 衰退下降婉拒v.n.</p><p>reject (强语气)拒绝v.</p><p>drop 下降</p><p>sink 下沉</p><p>de- down/强调/负面的</p><p>-cide 切</p><p>decide 决定v.</p><p>decision 决定n.</p><p>make decision </p><p>decisive 决定性的；果断的</p><p>decisive moment</p><p>indecisive 犹犹豫豫的</p><p>draw 画；拉v.</p><p>drawing 画n.</p><p>paint 画v.</p><p>painting 绘画n.</p><p>Chinese painting 国画n. = national painting</p><p>decorate 装饰v.  </p><p>decoration 装饰n.</p><p>depend on/upon</p><p>rely on/upon </p><p><strong>rest on/upon</strong></p><p>依赖依靠</p><p>press 压；按</p><p>pressure 压力</p><p>depress 使压抑；使抑郁；使萧条</p><p>depression 压抑抑郁；萧条</p><p>the Great Depression 大萧条</p><p>depressed 压抑的抑郁的；萧条的</p><p>river </p><p>de<strong>rive</strong> from 源自于 come from = orginate from</p><p>origin 起源来源</p><p>original 原创的；最初的</p><p>design 设计</p><p>designer 设计师</p><p>pattern 模式结构；花纹图案</p><p>social pattern 社会结构</p><p>detail 细节n./<strong>详述</strong>v.</p><p>expand 扩展 扩张 膨胀v.</p><p>expansion 扩展 扩张 膨胀n.</p><p>example</p><p>instance</p><p>for example = for instance</p><p>exhaust 使筋疲力尽</p><p>exhausted 筋疲力尽的</p><p><strong>ex</strong>pect 期望v.</p><p>unexpected 没有料到的</p><p>wait 等待</p><p>expec<strong>ta</strong>tion 期望预料</p><p>expense 成本费用</p><p>at the cost of </p><p>at the expense of</p><p>以…为代价</p><p><strong>expen</strong>sive 昂贵的</p><p>cheap</p><p>luxurious 奢华的；奢侈的</p><p>experience 经历v.n.</p><p>working experience 工作经历</p><p>experiment  实验</p><p>explore 探索v.</p><p>press 压按</p><p>ex<strong>press</strong> 表达v./快车快递n.</p><p>SF express</p><p>express train 快车</p><p>expression 表达；表情；表现</p><p>expressive 有表达力的；有表现力的</p><p>imply 暗示v. = indicate = suggest</p><p>implication 含义</p><p>argue 认为v.</p><p>saying 谚语 = proverb</p><blockquote><p>Just as  an old sayings goes:</p></blockquote><p>carry 携带；运载</p><p>cart </p><p>shopping cart</p><p>bring 带 </p><p>bring in 带(进来)</p><p>bring with 带(随身)</p><p>pressure 压力 = stress </p><p>stress 强调重视n.v.</p><p>extra 额外的</p><p>ordinary 普通的寻常的</p><p>order 顺序秩序v.n.</p><p>extraordinay 非比寻常的</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day11】字符串转换整数（atoi）</title>
      <link href="/2021/10/24/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day11%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%EF%BC%88atoi%EF%BC%89/"/>
      <url>/2021/10/24/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day11%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%EF%BC%88atoi%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="Leetcode8-字符串转换整数-atoi"><a href="#Leetcode8-字符串转换整数-atoi" class="headerlink" title="Leetcode8.字符串转换整数 (atoi)"></a><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">Leetcode8.字符串转换整数 (atoi)</a></h4><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><p>函数 myAtoi(string s) 的算法如下：</p><p>读入字符串并丢弃无用的前导空格<br>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>返回整数作为最终结果。<br>注意：</p><p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;42&quot;输出：42解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）         ^第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;）         ^第 3 步：&quot;42&quot;（读入 &quot;42&quot;）           ^解析得到整数 42 。由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;   -42&quot;输出：-42解释：第 1 步：&quot;   -42&quot;（读入前导空格，但忽视掉）            ^第 2 步：&quot;   -42&quot;（读入 &#39;-&#39; 字符，所以结果应该是负数）             ^第 3 步：&quot;   -42&quot;（读入 &quot;42&quot;）               ^解析得到整数 -42 。由于 &quot;-42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;4193 with words&quot;输出：4193解释：第 1 步：&quot;4193 with words&quot;（当前没有读入字符，因为没有前导空格）         ^第 2 步：&quot;4193 with words&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;）         ^第 3 步：&quot;4193 with words&quot;（读入 &quot;4193&quot;；由于下一个字符不是一个数字，所以读入停止）             ^解析得到整数 4193 。由于 &quot;4193&quot; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;words and 987&quot;输出：0解释：第 1 步：&quot;words and 987&quot;（当前没有读入字符，因为没有前导空格）         ^第 2 步：&quot;words and 987&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;）         ^第 3 步：&quot;words and 987&quot;（由于当前字符 &#39;w&#39; 不是一个数字，所以读入停止）         ^解析得到整数 0 ，因为没有读入任何数字。由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;-91283472332&quot;输出：-2147483648解释：第 1 步：&quot;-91283472332&quot;（当前没有读入字符，因为没有前导空格）         ^第 2 步：&quot;-91283472332&quot;（读入 &#39;-&#39; 字符，所以结果应该是负数）          ^第 3 步：&quot;-91283472332&quot;（读入 &quot;91283472332&quot;）                     ^解析得到整数 -91283472332 。由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 &#x3D; -2147483648 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a><strong>提示</strong></h3><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>&#39; &#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li></ul><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">' '</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>INT_MAX<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">*=</span> flag<span class="token punctuation">;</span>                ans <span class="token operator">=</span> ans<span class="token operator">></span>INT_MAX<span class="token operator">?</span>INT_MAX<span class="token operator">:</span>ans<span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans<span class="token operator">&lt;</span>INT_MIN<span class="token operator">?</span>INT_MIN<span class="token operator">:</span>ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>INT_MAX LLONG_MAX 表示极值</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ten】英语五天强化Day1</title>
      <link href="/2021/10/23/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day1/"/>
      <url>/2021/10/23/%E3%80%90ten%E3%80%91%E8%8B%B1%E8%AF%AD%E4%BA%94%E5%A4%A9%E5%BC%BA%E5%8C%96Day1/</url>
      
        <content type="html"><![CDATA[<h2 id="短语整理"><a href="#短语整理" class="headerlink" title="短语整理"></a>短语整理</h2><table><thead><tr><th align="center">词组</th><th align="center">释义</th></tr></thead><tbody><tr><td align="center">in additon to</td><td align="center">除了</td></tr><tr><td align="center">attribute … to …</td><td align="center">将…归因于</td></tr><tr><td align="center">conventional wisdom suggests</td><td align="center">传统观念认为</td></tr></tbody></table><h2 id="长难句"><a href="#长难句" class="headerlink" title="长难句"></a>长难句</h2><blockquote><p>In addition to the inherent unpleasantness of expending mental effort, the uncertainty that comes with such informational drought often results in the dismissed individual systematically contemplating various possible reasons for why they are being ignored.</p></blockquote><h2 id="高频词"><a href="#高频词" class="headerlink" title="高频词"></a>高频词</h2><p>创新innovate-&gt;innovation</p><p>graduate from</p><p>graduate毕业生</p><p>private 私人的</p><p>inside indoor</p><p>in+形容词 表示否定 incorrect</p><p>aeiou元音字母可以替换|vw/mn离得近长得像：近亲字母</p><p>词根 nov=new</p><p>novel 新奇的，小说</p><p>novelty 新奇的事物</p><p>创新精神：the spirit of innovation</p><p>​                 the innovative spirit</p><p>create 创造，创新</p><p>creation 创造，创新</p><p>creative 创造性的，创新的</p><p>invent 发明</p><p>invention 发明</p><p>inventive  发明的，创新的</p><p>intenvie mind</p><p>expert on …专家|</p><p>形容词：专家的，优秀的</p><p>specialist 专家，专业人士</p><p>fame -&gt; famous</p><p>search 搜索-&gt; research研究</p><p>search for 寻找追寻</p><p>seek 寻求致力于(意志力强)</p><p>seek to…</p><p>hunt 狩猎，寻找追求</p><p>hunt for</p><p>study 学习，研究v.</p><p>term 学期，术语，一段时期</p><p>in the long term = in the long time</p><p>computer term 计算机术语</p><p>run 运营v./一段时期n.</p><p>run a company</p><p>in the long term = in the long run</p><p>in the short run</p><p>school  学校；学派流派；鱼群n./教育v.</p><p>a school of fish 一群鱼</p><p>my schooling 我的教育</p><p>curriculum 课程表，全部课程</p><p>curricular 课程表的</p><p><strong>extra-curricular activities</strong> 课外活动</p><p>course 课程；一道菜；过程</p><p>in the course of 在。。。过程中</p><p>lesson 课程；教训</p><p>applicant 申请人</p><p>apply to 应用于。。适用于。。。</p><p>apply … to 将适用于。。</p><p>apply for 申请</p><p>applicable 可应用的，可适用的</p><p>available 可行的，可用的，可得到的</p><p>avail 效用</p><p>science and technology(技术和技术学-总称)</p><p>biology</p><p>techique 具体的技术手段</p><p>technological 技术的</p><p>digital 数字的</p><p>digital technology 数字技术</p><p>rate 率；速度；等级；价格费用；n./评估v.</p><p>jobless rate失业率</p><p>速度 = speed</p><p>at the rate of = at the speeed of</p><p>the first rate = the first class 一等的</p><p>overrate高估 underrate低估</p><p>overestimate underestimate</p><p>estimate 估计n./v.</p><p>overvalue undervalue</p><p>value 价值观-values；n./估值估价；珍重珍惜v.</p><p>percent 百分比</p><p>percentage 百分比-总称</p><p>language</p><p>marriage</p><p>courage</p><p>cent百</p><p>century</p><p>decade</p><p>during this period/century/decade</p><p>information 信息，情报</p><p>inform 通知</p><p><strong>on the internet</strong></p><p>message 信息</p><p>send a short message</p><p>performance 表演表现；性能</p><p>ance = ence 名词后缀</p><p>form 形式格式</p><p>pre 在。。之前 </p><p>per 每一个</p><p>perform 表演表现;执行履行</p><p><strong>perform task/duty</strong> </p><p>show 表明；v./秀n.</p><p>form 形式形状n./形成v.</p><p>craft 工艺，手艺n./精心制作v.</p><p>teamwork</p><p>panel 面板,仪表盘；<strong>专家，小组</strong> group</p><p>work 有效，起作用</p><p>it works</p><p>the plan works</p><p>labor 劳动,努力v./辛苦</p><p>labor force 劳动力</p><p>career 职业，职业生涯</p><p>academic 学术的</p><p>academic language 学术语言</p><p>survey 调查研究n.v.</p><p>investigate 调查v.</p><p>investigation 调查n.</p><p>ate-&gt;ation</p><p>invest 投资v.</p><p>novel 新奇的新颖的 idea</p><p>freash 新鲜的，精力充沛的</p><p>lastest 最新的 findings</p><p>late 最晚的最迟的</p><p>current 目前的;正在流通中的adj./电流水流潮流</p><p>modern 现代的</p><p>in this modern society</p><p>latter  后者</p><p>former 前者</p><p>later 后来</p><p>boost 推动促进v.</p><p>promote 推动促进；推销促销；晋升v.</p><p>network 网络</p><p>out of fansion过时的</p><p>Internet 互联网</p><p>inter- 相互之间</p><p>interaction 互动n.</p><p>online 在线的 online games</p><p>online study;online shop</p><p>act 行动v./法案=bill n.</p><p>active 活动的</p><p>inactive 不活跃的</p><p>activity 活动，<strong>活跃性</strong></p><p>actual 事实的</p><p>actually 事实上地</p><p>agent 代理人，代理</p><p>agency 机构，代理机构</p><p>intelligence 治理；情报</p><p>company 公司；陪伴伙伴n.</p><p>A+辅音字母开头，可表强调</p><p>accomany 陪伴伴随伴奏v.</p><p>corporate 公司的；法人的adj.</p><p>corporation 公司；法人；团体n.</p><p>cooperate 合作v.</p><p>cooperation 合作n.</p><p>operate 操作，手术</p><p>com = con = cor = col = co = together</p><p>firm 公司；牢固的 &lt; company &lt; corporation</p><p>customer = consumer</p><p>manage 管理v.</p><p>manage this company</p><p>magage to do设法做，努力做</p><p>management 管理n.</p><p>-er = -or 人或物</p><p>cooker 厨具</p><p>cook 厨师</p><p>tractor 拖拉机</p><p>manager 经理 </p><p><strong>executive</strong> 高管经理n./执行的adj.</p><p>board 甲板/木板/董事会/委员会</p><p>CEO : chief executive officer</p><p>advise advice</p><p>suggest 建议；暗示表名v.</p><p>suggestion </p><p>quality 质量；品质；性质n./高质量的adj.</p><p>quality time = golden time</p><p>feature 特征特写n./给。。。特写v.</p><p>ingredient 因素；组成成分</p><p>factor 因素</p><p>element 元素；组成惩罚n./基本的初级的adj.</p><p>primary 初级的基本的；主要的重要的</p><p>element school = primary school</p><p>outstanding 杰出的 leader</p><p>stand out 突出，杰出</p><p>stand out or get out </p><p>outside inside </p><p>-ant = -ent 形容词后缀</p><p>-ance = -ence 名词后缀</p><p>persistent 坚持不懈的</p><p>persistence </p><p>sist = standing=st 站立</p><p>persist in doing sth(不停坚持)</p><blockquote><p>Nothing in this world can take the place of persistence </p></blockquote><p>insist on doing sth 坚持做某事(内心的)</p><p>ex = out </p><p>exit 出口,安全出口</p><p><strong>ex</strong>i<strong>st</strong>  存在</p><p>existance 存在</p><p>-tial 形容词名词后缀</p><p>potential 有潜力的，有潜能的/潜力潜能</p><p>this is your potential</p><p>possible 可能</p><p>im = in 往里在里面；否定+形容词</p><p>impossible </p><p>imprison 监禁禁锢v.</p><p>imprison your mind</p><p>be likely to 可能</p><p>friendly 有好<strong>的</strong></p><p>easily 简单地轻松地</p><p>be prone to 易于</p><p>probably 可能地</p><p>probable 可能的</p><p>leader 领导</p><p>leadership 领导关系</p><p>friendship 友谊</p><p>employment 雇佣</p><p>employ 雇佣</p><p>staff 全体员工</p><p>desire 渴望n.v.</p><p>I desire success</p><p>desirable 值得渴望的；可取的</p><p>wonder 好奇想知道v./好奇心；奇怪；奇迹n.</p><p>wonderful 精彩的</p><p>purpose 目的</p><p>aim 目的n./瞄准v.</p><p>aim at</p><p>goal 目标</p><p>end 结尾；目的</p><p>finish 完成</p><p>lack 缺乏</p><p><strong>achieve = accomplish</strong> 实现v.</p><p>accomplish my goal;achieve my goal</p><p>accomplishment = achievement 成就</p><p>the sense of achievements = the sense of accomplishment 成就感</p><p>confident 自信的</p><p>confidence 信心</p><p>gain 得到，获得v./收获，收益n.</p><p>no pains, no gains</p><p>security 安全性</p><p>secure 安全的；/保卫；获得得到v.</p><p>secure fame and money</p><p>save 节省拯救</p><p>ensure 确保 = make sure</p><p>encourage 鼓励</p><p>eable  使能够</p><p>support 支持</p><p>hold 持有；认为 the author hold that</p><p>household 家庭的，家有的，家用的</p><p>point 点，观点</p><p>view 风景，看法</p><p>viewpoint 观点看法</p><p>perspective </p><p>in my opion ;as far as I am concerned</p><p>from my viewpoint/from my perspective</p><p>independent 独立的</p><p>independence 独立</p><p>depend on/upon 依赖 = rely on</p><p>dependent 依赖的依靠的 </p><p>imblance 不平衡的</p><p>media 媒体；中介；媒介</p><p>immediate 直接的；立即的</p><p>immediate reason</p><p>inability 无能</p><p>individual 个人的，个体的；个人个体</p><p>divide 分开</p><p>peronsal 个人的；个性的</p><p>personality 个性；名人</p><p>age n./变老老化v.</p><p>the aging population</p><p>single 单身的 单一的</p><p>couple 夫妻，一对n.；结合v.</p><p>couple with</p><p>romantic 浪漫的</p><p>engege 雇佣；订婚vt.</p><p>engege in 忙于；从事与vi.</p><p>marry 嫁娶</p><p>marital 婚姻的，嫁娶的</p><p>gender 性别</p><p>knit 编织；结合到一起v.</p><p>spouse 配偶</p><p>please double your efforts</p><p>divorce 离婚v./n.</p><p>leave 离开；使</p><p>leave somebody sad/crazy</p><p>alone 单独的 独自的</p><p>lonely 孤独的</p><p>relative 亲戚n./相关的；相对的adj.</p><p>relatively handsome 相对地</p><p>absolutely handsome 完全地</p><p>relate 联系；讲述叙述v.</p><p>relation 联系，讲述叙述</p><p>relationship 联系关系</p><p>live a … life</p><p>span 跨度n./跨越v.</p><p>lifespan 寿命</p><p>lifestyle 生活方式</p><p>free style</p><p>styl<strong>ish</strong> 时髦的 = fashionable</p><p>popular 流行的受欢迎的</p><p>popularity 流行性</p><p>regular 规律的规则的；普通的常规的；定期的长期的</p><p>regular costumer 常客</p><p>ir-表否定时，加在r开头的形容词</p><p>irregular  不规律的</p><p>irresponsible</p><p>dis<strong>cover</strong> 发现v.</p><p>dis<strong>ease</strong> 疾病</p><p>ease 简单轻松安逸舒服n.</p><p>-volve 旋转</p><p>involve 涉及；卷入；包含包括 </p><p>involve him 涉及他</p><p>contain  包含包括；容纳</p><p>container 容器</p><p>sustain 维持；持续v.</p><p>sustainable 可持续的</p><p>sustainable development</p><p>invest 投资</p><p>investment 投资</p><p>it 走 exit</p><p>in<strong>it</strong>iate 开始启动</p><p>initial  开始的；最初的；起始的</p><p>initial dream 初心</p><p>flu 流感</p><p>fluent 流利的</p><p>fluid 流动的</p><p>influence  影响(内心潜移默化的)</p><p>influential 有影响力的adj./有影响力的人n.</p><p>include 包含包括</p><p>inclusion 包含包括</p><p>inclusive 包含的包括的<strong>包容性的</strong></p><p>exclude 排外；排除</p><p>exclusion </p><p>exclusive 排出的排外的；独家的；专用的专有的；奢华的高级的</p><p>exclusive interview </p><p>conclude 结束；下结论v.</p><p>conclusion 结论n.</p><p><strong>come to the conclusion that。。。</strong></p><p>conclusive 结论性的，结束的</p><p>inconclusive 没有结论性的</p><p>pro- 往前 pre-在。。之前</p><p>prolong 延长</p><p>fess- 说</p><p>confess 倾诉；坦白；忏悔v.</p><p>confession</p><p>profess 宣布；声称v.</p><p>professor 教授</p><p>profession 宣布声称；职业专业</p><p>professional 职业的专业的；职业人员</p><p>cess- = -it = ceed 走</p><p>process 工艺工序；过程n./加工处理v.</p><p>microprocessor 微处理器</p><p>suc- 往下</p><p>succeed 成功v.</p><p>success 成功n.</p><p>successfull 成功的</p><p>beautiful 美丽的</p><p>beauty 美丽；美；美人</p><p>duce- = lead- 引导 duce-&gt;duct</p><p>produce 生产，产生v.</p><p>production 生产，产生n.</p><p>product n.产品，产物</p><p>productive 有生产力的</p><p>productivity 生产力</p><p>building 建筑物</p><p>gene 基因</p><p>genius 天才</p><p>generation 生殖繁衍；产生；代</p><p>generate 生殖繁衍；产生v.</p><p>gap 沟壑，间隔</p><p>generation gap 代购</p><p>re-again </p><p>recall 回忆，想起v.</p><p>re-back</p><p>return 返回；回报</p><p>reduce 减少</p><p>reduction 减少,还原n.</p><p>cut 减少；砍掉v.</p><p>introduce 引入引进；介绍</p><p>introduction 引入引进；介绍；引言</p><p>self-introduction</p><p>conduct 指挥；带领；引领；进行v./行为；运行n.</p><p>conductor 指挥家；乘务员</p><p>ex = out = e 往外</p><p>educate </p><p>education</p><p>vary 变化v.</p><p>vary from … to …</p><p>various 变化的不同的</p><p>varible 可变的</p><p>variation 变化</p><p>variety 变化种类</p><p>a variety of = all kinds of = all sorts of 各种各样的</p><p>a range of 一系列的 </p><p>range 范围；幅度；山脉n./范围。v.</p><p>range from … to …</p><p>multiple 多样的，多样化的，多元的</p><p>multimedia 多媒体</p><p>profit 利润 </p><p>loss 迷茫亏损</p><p>at a profit 盈利的</p><p>at a loss 亏损的</p><p>profitable 盈利的</p><p>revenue 收入n.</p><p>income 收入</p><p>personal income</p><p>cost 成本</p><p>program 程序；程序；项目n./编程；计划v.</p><p>ject 扔</p><p>project 计划；项目n./投掷；预测v.</p><p>projector 投影仪</p><p>inject 注射注入v.</p><p>ob = op = against 反对</p><p>object 物体；对象；目标n./反对v.</p><p>object to doing sth</p><p>oppose to doing sth</p><p>objection 反对n.</p><p>objective 客观的；目标</p><p>subjective 主观的</p><p>subject 学科科目；主题=topic=theme；主语n./v.使。。遭受。。/adj.容易遭受…的</p><p>subject…to… 使。。遭受。。</p><p>be subject to 容易遭受…的</p><p>sub- 在。。之下</p><p>subway 地铁</p><p>subtitle 小标题</p><p>submit 提交上交</p><p>commit 犯；委托，致力于v./委托，承诺</p><p>commit crime</p><p>commitment 承诺，委托n.</p><p><strong>mot</strong>ion 移动n.</p><p>promote 推动促进；促销推销；晋升升职v. </p><p>promotion n.</p><p>emotion 情感感情n.</p><p>emotional 情感化的情感的</p><p>rational 理性的=reasonable</p><p><strong>mot</strong>ion 移动n.</p><p>motive 移动的运动的；动机n.</p><p>motivate 使有动机；激励激发</p><p>motivation 激励；激发</p><p>drive 驱动；驱使v.</p><p>You drive me crazy</p><p>pect 看 = spect</p><p>perspective </p><p>prospect 前途前景;/光明的；聪明的</p><p>dim 暗淡的</p><p>protect 保护</p><p>protect .. from .. 保护。。免受</p><p>protection 保护</p><p>de-down下</p><p>detect 觉察到v.</p><p>detection 察觉，探测n.</p><p>detector 探测器</p><p>detective 侦探</p><p>devalue 贬值</p><p>cover 覆盖;支付；报道</p><p>cover an event</p><p>discover </p><p>reason 原因；理性n./推理v.</p><p>reasonable</p><p>cause 原因理由；事业</p><p>educate cause 教育事业</p><p>due to = owing to 由于</p><p>owe …to.. 将..归因于/归功于 =attribute…to..</p><p>provide … with..</p><p>provider 供应商</p><p>supply 提供</p><p>evidnece 证据</p><p>definitely 肯定地，一定地</p><p>definitely guilt 肯定有罪的 </p><p>prove 证明</p><p>improve 改进进步提高</p><p>improvement</p><p>advance 推动v./进步n.</p><p>advanved 高级的 English</p><p>vision 视野；景象；远见</p><p>vis<strong>it</strong> v.参观访问</p><p>visitor 游客</p><p>visual 视觉的</p><p>visual effect 视觉效果</p><p>-ible = -able 能</p><p>visible 可见的</p><p>invisible 不可见的</p><p><strong>precisely = exactly = accurately</strong>精确的</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day10】构造矩阵</title>
      <link href="/2021/10/23/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day10%E3%80%91%E6%9E%84%E9%80%A0%E7%9F%A9%E9%98%B5/"/>
      <url>/2021/10/23/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day10%E3%80%91%E6%9E%84%E9%80%A0%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：</p><blockquote><ol><li><p>你设计的矩形页面必须等于给定的目标面积。</p></li><li><p>宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。</p></li><li><p>长度 L 和宽度 W 之间的差距应当尽可能小。<br>你需要按顺序输出你设计的页面的长度 L 和宽度 W。</p></li></ol></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-none"><code class="language-none">输入: 4输出: [2, 2]解释: 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>给定的面积不大于 10,000,000 且为正整数。<br>你设计的页面的长度和宽度必须都是正整数。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于L和W的差距应该尽可能小，且L大于W。所以因该从sqrt(area)开始遍历</p><p>0<del>sqrt(area) &lt;&lt; sqrt(area)</del>area，从sqrt(area)遍历到0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">constructRectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> area<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>area<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>area<span class="token operator">/</span>i<span class="token punctuation">,</span>i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>返回{}即返回一个vector</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch之tensor基本操作</title>
      <link href="/2021/10/22/PyTorch%E4%B9%8Btensor%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/10/22/PyTorch%E4%B9%8Btensor%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="tensor简介"><a href="#tensor简介" class="headerlink" title="tensor简介"></a>tensor简介</h2><h3 id="Tensor与numpy对比"><a href="#Tensor与numpy对比" class="headerlink" title="Tensor与numpy对比"></a>Tensor与numpy对比</h3><table><thead><tr><th align="left">对比项</th><th align="left">numpy</th><th align="left">Tensor</th></tr></thead><tbody><tr><td align="left">相同点</td><td align="left">可以定义多维数组，进行切片、改变维度、数学运算等</td><td align="left">可以定义多维数组，进行切片、改变维度、数学运算等</td></tr><tr><td align="left">不同点</td><td align="left">1、产生的数组类型为numpy.ndarray； 2、会将ndarray放入CPU中进行运算； 3、导入方式为import numpy as np，后续通过np.array([1,2])建立数组； 4、numpy中没有x.type()的用法，只能使用type(x)。</td><td align="left">1、产生的数组类型为torch.Tensor； 2、会将tensor放入GPU中进行加速运算（如果有GPU）； 3、导入方式为import torch，后续通过torch.tensor([1,2])或torch.Tensor([1,2])建立数组； 4、Tensor中查看数组类型既可以使用type(x)，也可以使用x.type()。但是更加推荐采用x.type()</td></tr></tbody></table><h3 id="常见数据表示方式"><a href="#常见数据表示方式" class="headerlink" title="常见数据表示方式"></a>常见数据表示方式</h3><ul><li><p>Scalar，标量：1.8，e，10</p></li><li><p>Vector，向量：(1,3,5,6)</p></li><li><p>Matrix，矩阵：[(1,2,3),(4,5,6)] </p></li><li><p>Tensor，张量：向量就是秩为1的 Tensor；矩阵就是秩为2的 Tensor。还有秩大于2的Tensor</p><ul><li>标量，向量，矩阵为不同维度的tensor</li></ul></li></ul><h3 id="Tensor数据类型"><a href="#Tensor数据类型" class="headerlink" title="Tensor数据类型"></a>Tensor数据类型</h3><table><thead><tr><th>Data tyoe</th><th>CPU tensor</th><th>GPU tensor</th></tr></thead><tbody><tr><td>32-bit floating point</td><td><code>torch.FloatTensor</code></td><td><code>torch.cuda.FloatTensor</code></td></tr><tr><td>64-bit floating point</td><td><code>torch.DoubleTensor</code></td><td><code>torch.cuda.DoubleTensor</code></td></tr><tr><td>16-bit floating point</td><td>N/A</td><td><code>torch.cuda.HalfTensor</code></td></tr><tr><td>8-bit integer (unsigned)</td><td><code>torch.ByteTensor</code></td><td><code>torch.cuda.ByteTensor</code></td></tr><tr><td>8-bit integer (signed)</td><td><code>torch.CharTensor</code></td><td><code>torch.cuda.CharTensor</code></td></tr><tr><td>16-bit integer (signed)</td><td><code>torch.ShortTensor</code></td><td><code>torch.cuda.ShortTensor</code></td></tr><tr><td>32-bit integer (signed)</td><td><code>torch.IntTensor</code></td><td><code>torch.cuda.IntTensor</code></td></tr><tr><td>64-bit integer (signed)</td><td><code>torch.LongTensor</code></td><td><code>torch.cuda.LongTensor</code></td></tr></tbody></table><p>torch.float32、torch.float64、torch.uint8 和 torch.int64更为常用</p><h2 id="创建Tensor的方式"><a href="#创建Tensor的方式" class="headerlink" title="创建Tensor的方式"></a>创建Tensor的方式</h2><h3 id="使用torch-tensor-或torch-from-numpy"><a href="#使用torch-tensor-或torch-from-numpy" class="headerlink" title="使用torch.tensor()或torch.from_numpy()"></a>使用<code>torch.tensor()</code>或<code>torch.from_numpy()</code></h3><ul><li><code>torch.tensor(data, dtype=None, device=None,requires_grad=False)</code></li><li>使用<code>torch.from_numpy()</code>创建会跟随原ndarray数组的数据类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> nd <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h3><ul><li>可以加dtype参数指定数据类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 传入指定tensor的形状</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成4*4单位矩阵</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>arnage<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>torch生成随机tensor</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token comment">#0~1随机数</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token comment">#均值0，方差1的正态分布tensor</span>torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> size）              <span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mean<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.9179</span><span class="token punctuation">,</span> <span class="token number">2.7630</span><span class="token punctuation">,</span> <span class="token number">4.2816</span><span class="token punctuation">,</span> <span class="token number">2.3938</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">2.5076</span><span class="token punctuation">,</span> <span class="token number">2.4890</span><span class="token punctuation">,</span> <span class="token number">3.8196</span><span class="token punctuation">,</span> <span class="token number">3.5135</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">2.4491</span><span class="token punctuation">,</span> <span class="token number">2.4488</span><span class="token punctuation">,</span> <span class="token number">2.7590</span><span class="token punctuation">,</span> <span class="token number">5.0268</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>high<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="torch-tensor-与torch-Tensor-的区别"><a href="#torch-tensor-与torch-Tensor-的区别" class="headerlink" title="torch.tensor()与torch.Tensor()的区别"></a>torch.tensor()与torch.Tensor()的区别</h3><ol><li><p>torch.tensor是从数据中推断数据类型，而torch.Tensor是torch.empty(会随机产生垃圾数组，详见实例)和torch.tensor之间的一种混合。但是，当传入数据时，torch.Tensor使用全局默认dtype(FloatTensor)</p></li><li><p>torch.tensor(1)返回一个固定值1，而torch.Tensor(1)返回一个大小为1的张量，它是初始化的随机值</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.0000e+00</span><span class="token punctuation">,</span> <span class="token number">0.0000e+00</span><span class="token punctuation">,</span> <span class="token number">2.1019e-44</span><span class="token punctuation">,</span> <span class="token number">0.0000e+00</span><span class="token punctuation">,</span> <span class="token number">1.1260e+24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#整形</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#浮点数</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tensor的类型转换"><a href="#Tensor的类型转换" class="headerlink" title="Tensor的类型转换"></a>Tensor的类型转换</h2><h3 id="tensor与int-float的转换"><a href="#tensor与int-float的转换" class="headerlink" title="tensor与int/float的转换"></a>tensor与int/float的转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten1<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> ten2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten2<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">358958065778688.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tensor与list的转换"><a href="#tensor与list的转换" class="headerlink" title="tensor与list的转换"></a>tensor与list的转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 先转换成ndarray，利用ndarray的tolist()方法间接转换</span><span class="token operator">>></span><span class="token operator">></span> ten3 <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten3<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1.0193902624158886e-38</span><span class="token punctuation">,</span> <span class="token number">9.091873867666063e-39</span><span class="token punctuation">,</span> <span class="token number">8.449011381575481e-39</span><span class="token punctuation">,</span> <span class="token number">9.642878436823224e-39</span><span class="token punctuation">,</span> <span class="token number">8.449002973784695e-39</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tensor与ndarray的转换"><a href="#tensor与ndarray的转换" class="headerlink" title="tensor与ndarray的转换"></a>tensor与ndarray的转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> nda <span class="token operator">=</span> ten<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ndaarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>nda<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tentensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将tensor放入cpu-gpu计算"><a href="#将tensor放入cpu-gpu计算" class="headerlink" title="将tensor放入cpu/gpu计算"></a>将tensor放入cpu/gpu计算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">'cuda:0'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tensor的形状，元素数目，维度转换"><a href="#Tensor的形状，元素数目，维度转换" class="headerlink" title="Tensor的形状，元素数目，维度转换"></a>Tensor的形状，元素数目，维度转换</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取形状：shape属性，不可传参</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>low <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>high <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>shapetorch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 获取元素数：numel()方法 (number of elements)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">24</span><span class="token comment"># 转换整体维度：permute(a1,a2,a3)方法。参数各个轴</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>shapetorch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 转换其中两个维度：transpose(a1,a2)方法。参数为需要调换的两个轴</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>shapetorch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>shapetorch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tensor的不连续与变形"><a href="#Tensor的不连续与变形" class="headerlink" title="Tensor的不连续与变形"></a>Tensor的不连续与变形</h2><p>Tensor多维数组底层实现是使用一块<strong>连续内存的1维数组</strong>（行优先顺序存储），Tensor在元信息里保存了多维数组的形状，在访问元素时，通过<strong>多维度索引</strong>转化成1维数组相对于数组起始位置的<strong>偏移量</strong>即可找到对应的数据。某些Tensor操作（如transpose、permute、narrow、expand）与原Tensor是共享内存中的数据，<strong>不会改变底层数组的存储</strong>，但原来在语义上相邻。内存里也相邻的元素在执行这样的操作后，在语义上相邻，但在内存不相邻，即不连续了。</p><h3 id="view-与reshape-方法"><a href="#view-与reshape-方法" class="headerlink" title="view()与reshape()方法"></a>view()与reshape()方法</h3><ul><li>view()和reshape()用于改变tensor的形状</li><li>view()只能改变内存连续的tensor</li><li>reshape()将内存调整后进行view操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.1325</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.8686</span><span class="token punctuation">,</span>  <span class="token number">1.4342</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6856</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5007</span><span class="token punctuation">,</span>  <span class="token number">1.2140</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0187</span><span class="token punctuation">,</span>  <span class="token number">0.4683</span><span class="token punctuation">,</span>  <span class="token number">0.2575</span><span class="token punctuation">,</span>  <span class="token number">0.1068</span><span class="token punctuation">,</span>  <span class="token number">0.3741</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1009</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>RuntimeError<span class="token punctuation">:</span> view size <span class="token keyword">is</span> <span class="token keyword">not</span> compatible <span class="token keyword">with</span> <span class="token builtin">input</span> tensor's size <span class="token keyword">and</span> stride <span class="token punctuation">(</span>at least one dimension spans across two contiguous subspaces<span class="token punctuation">)</span><span class="token punctuation">.</span> Use <span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> instead<span class="token punctuation">.</span>    <span class="token operator">>></span><span class="token operator">></span> ten<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.1325</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5007</span><span class="token punctuation">,</span>  <span class="token number">0.2575</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.8686</span><span class="token punctuation">,</span>  <span class="token number">1.2140</span><span class="token punctuation">,</span>  <span class="token number">0.1068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1.4342</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0187</span><span class="token punctuation">,</span>  <span class="token number">0.3741</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6856</span><span class="token punctuation">,</span>  <span class="token number">0.4683</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1009</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增减厚度为1的维度"><a href="#增减厚度为1的维度" class="headerlink" title="增减厚度为1的维度"></a>增减厚度为1的维度</h2><ul><li><code>squeeze(a1)</code>：如果指定维度的厚度为1，返回删除该维度后的tensor。否则返回原tensor</li><li><code>unsqueeze(a1)</code>：插入一个维度，返回插入后的tensor</li><li>squeeze()和unsqueeze操作不修改数据量</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tensortensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> ten<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch之tensor连接，切分及提取</title>
      <link href="/2021/10/22/PyTorch%E4%B9%8Btensor%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%88%87%E5%88%86%E5%8F%8A%E6%8F%90%E5%8F%96/"/>
      <url>/2021/10/22/PyTorch%E4%B9%8Btensor%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%88%87%E5%88%86%E5%8F%8A%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="连接Tensor"><a href="#连接Tensor" class="headerlink" title="连接Tensor"></a>连接Tensor</h2><h3 id="不升维连接"><a href="#不升维连接" class="headerlink" title="不升维连接"></a>不升维连接</h3><ul><li>不会增加新的维度</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ten2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>ten1<span class="token punctuation">,</span>ten2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>ten1<span class="token punctuation">,</span>ten2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升维连接"><a href="#升维连接" class="headerlink" title="升维连接"></a>升维连接</h3><ul><li>增加新的维度</li><li>torch.stack((ten1,ten2),dim=0)</li><li>拼接后tensor的形状，会根据不同的dim发生变化</li></ul><table><thead><tr><th>dim</th><th>shape</th></tr></thead><tbody><tr><td>0</td><td>[2, 3, 3]</td></tr><tr><td>1</td><td>[3, 2, 3]</td></tr><tr><td>2</td><td>[3, 3, 2]</td></tr><tr><td>3</td><td><strong>溢出报错</strong></td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> T1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> T2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切分Tensor"><a href="#切分Tensor" class="headerlink" title="切分Tensor"></a>切分Tensor</h2><ul><li>切分后返回一个元组，可以直接按序索引</li><li>切分后，shape击破</li></ul><h3 id="不升维切分"><a href="#不升维切分" class="headerlink" title="不升维切分"></a>不升维切分</h3><h4 id="torch-chunk-tensor-nuchunks-dim-0"><a href="#torch-chunk-tensor-nuchunks-dim-0" class="headerlink" title="torch.chunk(tensor,nuchunks,dim=0)"></a><code>torch.chunk(tensor,nuchunks,dim=0)</code></h4><ul><li>尽可能的将tensor平分</li><li>不够整除时，chunk的最后一块为模</li><li>nuchunks数大于tensor可被切分的长度时，nuchunks为该维度的厚度(不降维)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span>ten<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="torch-split-tensor-split-size-or-sections-dim-0"><a href="#torch-split-tensor-split-size-or-sections-dim-0" class="headerlink" title="torch.split(tensor, split_size_or_sections, dim=0)"></a><code>torch.split(tensor, split_size_or_sections, dim=0)</code></h4><ul><li><code>split_size_or_sections</code>等于整数时，进行chunk操作</li><li><code>split_size_or_sections</code>等于列表/元组时，切成列表中元素大小一样的块</li><li>不同于chunk，元组不合适时会报错</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>split<span class="token punctuation">(</span>ten<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>split<span class="token punctuation">(</span>ten<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#不降维</span><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="降维切分"><a href="#降维切分" class="headerlink" title="降维切分"></a>降维切分</h3><ul><li><code>torch.unbind(input, dim=0)</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>unbind<span class="token punctuation">(</span>ten<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="提取部分tensor"><a href="#提取部分tensor" class="headerlink" title="提取部分tensor"></a>提取部分tensor</h2><h4 id="按索引提取"><a href="#按索引提取" class="headerlink" title="按索引提取"></a>按索引提取</h4><ul><li><p>不降维</p></li><li><p><code>torch.index_select(ten,dim=0,torch.tensor([2,4]))</code></p></li><li><p>不能使用torch.Tensor()，因为它返回浮点tensor</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span>ten<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按条件提取"><a href="#按条件提取" class="headerlink" title="按条件提取"></a>按条件提取</h4><ul><li><code>torch.masked_select(ten, mask, out=None) </code></li><li>mask为掩码张量，为ten成立的条件</li><li>维度限制在mask中，所以`torch.masked_select()没有dim参数</li><li>ten与mask必须形状相同</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ten <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mask <span class="token operator">=</span> ten<span class="token operator">></span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> masktensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>masked_index<span class="token punctuation">(</span>ten<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token comment"># 等价于</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>masked_select<span class="token punctuation">(</span>ten<span class="token punctuation">,</span>ten<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>A=torch.tensor([[4,5,7], [3,9,8],[2,3,4]]，得到张量A(0,0)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询量大时</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>unbind<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>tensor<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># 查询量小时</span><span class="token operator">>></span><span class="token operator">></span> torch<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>tensor<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day9】求众数II</title>
      <link href="/2021/10/22/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day9%E3%80%91%E6%B1%82%E4%BC%97%E6%95%B0II/"/>
      <url>/2021/10/22/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day9%E3%80%91%E6%B1%82%E4%BC%97%E6%95%B0II/</url>
      
        <content type="html"><![CDATA[<h4 id="Leetcode229-求众数Ⅱ"><a href="#Leetcode229-求众数Ⅱ" class="headerlink" title="Leetcode229.求众数Ⅱ"></a><a href="https://leetcode-cn.com/problems/majority-element-ii/">Leetcode229.求众数Ⅱ</a></h4><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：[3,2,3]<br>输出：[3]</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：nums = [1]<br>输出：[1]</p><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><p>输入：[1,1,1,3,3,2,2,2]<br>输出：[1,2]</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;= nums.length &lt;= 5 * 104<br>-109 &lt;= nums[i] &lt;= 109</p><p>进阶：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。</p><h3 id="解法一：哈希"><a href="#解法一：哈希" class="headerlink" title="解法一：哈希"></a>解法一：哈希</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> cnt<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cnt<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> cnt<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">)</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解法二：摩尔投票法"><a href="#解法二：摩尔投票法" class="headerlink" title="解法二：摩尔投票法"></a>解法二：摩尔投票法</h3><p>时间复杂度O(n)，空间复杂度O(1)</p><p>数组中元素出现的次数超过n/3时，才符合条件，与n一个数量级。根据容斥原理，符合条件的数字最多有两个。</p><p>设置两个候选人和投票结果，每个候选人的票数最多被抵消n/3次</p><p>极端情况：</p><ul><li>候选人1有n/3+1票，候选人2有n/3票，剩下n/3-1张其他票。<ul><li>最终候选人1剩2票，候选人2剩1票</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> can1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> can2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> poll1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> poll2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>num<span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>can1 <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token comment">//候选人1多一票</span>                poll1<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>can2 <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token comment">//候选人2多一票</span>                poll2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>poll1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//候选人1票为0时换候选人</span>                can1 <span class="token operator">=</span> num<span class="token punctuation">;</span>                poll1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>poll2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//候选人2票为0时换候选人</span>                can2 <span class="token operator">=</span> num<span class="token punctuation">;</span>                poll2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//else-if,避免抵消超过n/3+1次</span>                poll1<span class="token operator">--</span><span class="token punctuation">;</span>                poll2<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> jud1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> jud2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>num<span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断投票之后的候选人是否符合条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>can1 <span class="token operator">==</span> num<span class="token punctuation">)</span>                jud1<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>can2 <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token comment">//else-if,避免can1与can2相同</span>                jud2<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>jud1 <span class="token operator">></span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>can1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jud2 <span class="token operator">></span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>can2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day8】最小操作次数使数组元素相等</title>
      <link href="/2021/10/20/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day8%E3%80%91%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/"/>
      <url>/2021/10/20/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day8%E3%80%91%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/">LeetCode453.最小操作次数使数组元素相等</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3]输出：3解释：只需要3次操作（注意每次操作会增加两个元素的值）：[1,2,3]  &#x3D;&gt;  [2,3,3]  &#x3D;&gt;  [3,4,3]  &#x3D;&gt;  [4,4,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,1,1]输出：0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：</p><blockquote><p>n == nums.length<br>1 &lt;= nums.length &lt;= 105<br>-109 &lt;= nums[i] &lt;= 109<br>答案保证符合 32-bit 整数</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>由于对n-1个数进行<code>+1</code>操作，相当于只对一个数进行<code>-1</code>操作。则<code>每个数-min</code>的总和为解</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minMoves</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>total<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> min<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?</span>min<span class="token operator">:</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//n个数的总和-n*min为最终结果</span>        <span class="token punctuation">&#125;</span>                total<span class="token operator">-=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>min<span class="token punctuation">;</span>                <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy在深度学习中的使用</title>
      <link href="/2021/10/20/NumPy%E5%9C%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/10/20/NumPy%E5%9C%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="数据加载阶段"><a href="#数据加载阶段" class="headerlink" title="数据加载阶段"></a>数据加载阶段</h2><h3 id="使用pillow读取图片"><a href="#使用pillow读取图片" class="headerlink" title="使用pillow读取图片"></a>使用pillow读取图片</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">form PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npim <span class="token operator">=</span> Image<span class="token punctuation">.</span>Open<span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span>im_pillow <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 去除图像的第四个通道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取三个通道的RGB图片"><a href="#提取三个通道的RGB图片" class="headerlink" title="提取三个通道的RGB图片"></a>提取三个通道的RGB图片</h3><h4 id="方式一：页面拼接"><a href="#方式一：页面拼接" class="headerlink" title="方式一：页面拼接"></a>方式一：页面拼接</h4><ul><li>使用<code>arr[:,:,np.newaxis]</code>可增加一个维度</li><li>使用<code>np.concatenate((mat1,mat2),axis=2)</code>沿通道方向拼接矩阵</li></ul><img src="https://i.loli.net/2021/10/20/2GFWkmbRzwHPqT9.png" style="zoom:50%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">zeros <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>im_pillow<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>im_pillow<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im_pillow_c1 <span class="token operator">=</span> im_pillow<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token comment"># 升二维为三维，用于连接</span>im_pillow_c1_3ch <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>im_pillow_c1<span class="token punctuation">,</span>zeros<span class="token punctuation">)</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># axis=2方向聚合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="方式二：直接赋值"><a href="#方式二：直接赋值" class="headerlink" title="方式二：直接赋值"></a>方式二：直接赋值</h4><img src="https://i.loli.net/2021/10/20/Vp8gOPdtCSokLDb.png" style="zoom:50%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">im_pillow_c2_3ch <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>im_pillow<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>im_pillow_c2_3ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> im_pillow<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="方式三：深拷贝"><a href="#方式三：深拷贝" class="headerlink" title="方式三：深拷贝"></a>方式三：深拷贝</h4><ul><li>将<code>im_pillow</code>拷贝后，把另外两个通道赋值为0</li><li><code>im_pillow</code>是只读数组，应该使用深拷贝</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">im_pillow_c3_3ch <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im_pillow<span class="token punctuation">)</span>im_pillow_c3_3ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h2><h3 id="argmax和argmin"><a href="#argmax和argmin" class="headerlink" title="argmax和argmin"></a><code>argmax</code>和<code>argmin</code></h3><ul><li>返回最大值的索引</li><li><code>np.argmax(mat,axis=0)</code>如果不指定axis，默认为一维</li></ul><h3 id="argsort"><a href="#argsort" class="headerlink" title="argsort"></a>argsort</h3><ul><li>排序后返回数组的索引</li><li>默认升序排序。如果数组前有<code>-</code>，按降序排序</li><li><code>np.argsort(mat,axis=-1,kind)</code>axis默认为-1；kind指定排序算法，默认快排</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mat <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token operator">-</span>mat<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> scores <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mat <span class="token operator">=</span> <span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span> <span class="token comment"># mat为二维表，值为索引</span><span class="token operator">>></span><span class="token operator">></span> mat <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># mat为二维表，值为索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy之ndarray创建，属性与轴</title>
      <link href="/2021/10/20/NumPy%E4%B9%8Bndarray%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%BD%B4/"/>
      <url>/2021/10/20/NumPy%E4%B9%8Bndarray%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%BD%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="ndarray特点"><a href="#ndarray特点" class="headerlink" title="ndarray特点"></a>ndarray特点</h2><ul><li>ndarray(N-dimensional-array)</li><li><code>numpy.ndarray</code></li><li>不同于python列表，ndarray长度不可变</li><li>相同的操作，使用更少的内存，速度更快</li></ul><h2 id="创建ndarray数组"><a href="#创建ndarray数组" class="headerlink" title="创建ndarray数组"></a>创建ndarray数组</h2><ul><li><p>np.array()深拷贝；np.asarray()浅拷贝</p></li><li><p>array和asarray都可以将结构数据转化为ndarray，但是主要区别就是当数据源是ndarray时，array仍然会copy出一个副本，占用新的内存，但asarray不会。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>mat <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># tuple(3,3)</span>m_arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>m_asarr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>m_arr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>m_asarr2 <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>m_arr1<span class="token punctuation">,</span><span class="token string">"\n\n"</span><span class="token punctuation">,</span>m_asarr1<span class="token punctuation">,</span><span class="token string">"\n________\n"</span><span class="token punctuation">,</span>m_arr2<span class="token punctuation">,</span><span class="token string">"\n\n"</span><span class="token punctuation">,</span>m_asarr2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/19/eJM2jTZLwsNOpzG.png" style="zoom:50%;" /><h2 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h2><h3 id="ndim"><a href="#ndim" class="headerlink" title="ndim"></a>ndim</h3><ul><li>N-dimension</li></ul><pre class="line-numbers language-none"><code class="language-none">mat.ndim #得到numpy数组的维数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><ul><li>(B,W,H,C)数据，使用<code>input_data.shape[1:]</code>即可获取到数据的形状</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>shape         <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token number">500</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><ul><li><code>shape</code>属性中元素乘积</li><li>二维面积，三维体积</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mat<span class="token punctuation">.</span>size<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h3><ul><li>查看数组元素类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ndarray可以在创建时通过<code>dtype</code>指定类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用 <code>astype()</code> 改变数组的数据类型，但是改变数据类型会创建一个新的数组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token string">'int32'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'int32'</span><span class="token punctuation">)</span> <span class="token operator">//</span>原数组的数据类型没有改变<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>dtypedtype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过numpy函数创建ndarray"><a href="#通过numpy函数创建ndarray" class="headerlink" title="通过numpy函数创建ndarray"></a>通过numpy函数创建ndarray</h2><h3 id="np-ones-和-np-zeros"><a href="#np-ones-和-np-zeros" class="headerlink" title="np.ones() 和 np.zeros()"></a>np.ones() 和 np.zeros()</h3><ul><li>默认<code>float64</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int32'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="np-arange-和np-linspace"><a href="#np-arange-和np-linspace" class="headerlink" title="np.arange()和np.linspace()"></a><code>np.arange()</code>和<code>np.linspace()</code></h3><p>arange()类似于内置函数range()，通过指定开始值、终值和步长创建表示等差数列的一维数组，注意得到的结果数组不包含终值。</p><p>linspace()通过指定开始值、终值和元素个数创建表示等差数列的一维数组，可以通过endpoint参数指定是否包含终值，默认值为True，即包含终值。</p><p><code>np.arange([start, ]stop, [step, ]dtype=None)</code></p><p><code>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</code></p><ul><li>num：序列中元素的个数，默认是 50<ul><li>步长为(stop - start)/num</li></ul></li><li>endpoint：默认为 True，如果为 True，则数组最后一个元素是 stop</li><li>retstep：默认为 False，如果为 True，则返回数组与公差</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int32'</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token number">2</span><span class="token punctuation">.</span>        <span class="token punctuation">,</span>   <span class="token number">22.36734694</span><span class="token punctuation">,</span>   <span class="token number">42.73469388</span><span class="token punctuation">,</span>   <span class="token number">63.10204082</span><span class="token punctuation">,</span>         <span class="token number">83.46938776</span><span class="token punctuation">,</span>  <span class="token number">103.83673469</span><span class="token punctuation">,</span>  <span class="token number">124.20408163</span><span class="token punctuation">,</span>  <span class="token number">144.57142857</span><span class="token punctuation">,</span>        <span class="token number">164.93877551</span><span class="token punctuation">,</span>  <span class="token number">185.30612245</span><span class="token punctuation">,</span>  <span class="token number">205.67346939</span><span class="token punctuation">,</span>  <span class="token number">226.04081633</span><span class="token punctuation">,</span>        <span class="token number">246.40816327</span><span class="token punctuation">,</span>  <span class="token number">266.7755102</span> <span class="token punctuation">,</span>  <span class="token number">287.14285714</span><span class="token punctuation">,</span>  <span class="token number">307.51020408</span><span class="token punctuation">,</span>        <span class="token number">327.87755102</span><span class="token punctuation">,</span>  <span class="token number">348.24489796</span><span class="token punctuation">,</span>  <span class="token number">368.6122449</span> <span class="token punctuation">,</span>  <span class="token number">388.97959184</span><span class="token punctuation">,</span>        <span class="token number">409.34693878</span><span class="token punctuation">,</span>  <span class="token number">429.71428571</span><span class="token punctuation">,</span>  <span class="token number">450.08163265</span><span class="token punctuation">,</span>  <span class="token number">470.44897959</span><span class="token punctuation">,</span>        <span class="token number">490.81632653</span><span class="token punctuation">,</span>  <span class="token number">511.18367347</span><span class="token punctuation">,</span>  <span class="token number">531.55102041</span><span class="token punctuation">,</span>  <span class="token number">551.91836735</span><span class="token punctuation">,</span>        <span class="token number">572.28571429</span><span class="token punctuation">,</span>  <span class="token number">592.65306122</span><span class="token punctuation">,</span>  <span class="token number">613.02040816</span><span class="token punctuation">,</span>  <span class="token number">633.3877551</span> <span class="token punctuation">,</span>        <span class="token number">653.75510204</span><span class="token punctuation">,</span>  <span class="token number">674.12244898</span><span class="token punctuation">,</span>  <span class="token number">694.48979592</span><span class="token punctuation">,</span>  <span class="token number">714.85714286</span><span class="token punctuation">,</span>        <span class="token number">735.2244898</span> <span class="token punctuation">,</span>  <span class="token number">755.59183673</span><span class="token punctuation">,</span>  <span class="token number">775.95918367</span><span class="token punctuation">,</span>  <span class="token number">796.32653061</span><span class="token punctuation">,</span>        <span class="token number">816.69387755</span><span class="token punctuation">,</span>  <span class="token number">837.06122449</span><span class="token punctuation">,</span>  <span class="token number">857.42857143</span><span class="token punctuation">,</span>  <span class="token number">877.79591837</span><span class="token punctuation">,</span>        <span class="token number">898.16326531</span><span class="token punctuation">,</span>  <span class="token number">918.53061224</span><span class="token punctuation">,</span>  <span class="token number">938.89795918</span><span class="token punctuation">,</span>  <span class="token number">959.26530612</span><span class="token punctuation">,</span>        <span class="token number">979.63265306</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">.</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组的轴"><a href="#数组的轴" class="headerlink" title="数组的轴"></a>数组的轴</h2><ul><li>当 axis=i 时，第 i 个轴的数据将会被聚合到一起</li><li>形状为 (a, b, c) 的数组，沿着 0 轴聚合后，形状变为 (b, c)；沿着 1 轴聚合后，形状变为 (a, c)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mat <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> matarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">//</span>将数组按<span class="token number">0</span>轴方向聚合↓array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>将数组按<span class="token number">1</span>轴方向聚合→array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高维axis轴计算法"><a href="#高维axis轴计算法" class="headerlink" title="高维axis轴计算法"></a>高维axis轴计算法</h3><img src="https://i.loli.net/2021/10/20/K543vinphaQbT2X.png" style="zoom:47%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>降三维为二维</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">axis <span class="token operator">=</span> <span class="token number">0</span>  ↓ <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> axis <span class="token operator">=</span> <span class="token number">1</span>  → <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>axis <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>和为一个元素<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/20/loWKN19wUxvdZyO.png" style="zoom:50%;" /><p>将该图顺时针旋转90度，建系可得空间图示</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day7】最长回文子串</title>
      <link href="/2021/10/19/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day7%E3%80%91%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2021/10/19/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day7%E3%80%91%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">LeetCode5.最长回文子串</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;babad&quot;输出：&quot;bab&quot;解释：&quot;aba&quot; 同样是符合题意的答案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;cbbd&quot;输出：&quot;bb&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;a&quot;输出：&quot;a&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h4><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;ac&quot;输出：&quot;a&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：</p><blockquote><p>1 &lt;= s.length &lt;= 1000<br>s 仅由数字和英文字母（大写和/或小写）组成</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><img src="https://i.loli.net/2021/10/19/Qs6FIikxe21dTYm.png"></p><h3 id="C-动态规划"><a href="#C-动态规划" class="headerlink" title="C++动态规划"></a>C++动态规划</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> matrix<span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//奇数回文串的核</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//偶数回文串的核</span>                start <span class="token operator">=</span> i<span class="token punctuation">;</span>                max <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>l <span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理长度为l的串</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> e <span class="token operator">=</span> i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    max<span class="token operator">=</span>l<span class="token punctuation">;</span>                    start<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>定义一个动态数组<code>vector&lt;vector&lt;len&gt;&gt; matrix(len,vector&lt;len&gt;)</code></li><li>动态规划找状态量和转移方程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day6】数字的补数</title>
      <link href="/2021/10/18/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day6%E3%80%91%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/"/>
      <url>/2021/10/18/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day6%E3%80%91%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/number-complement/">LeetCode476.数字的补数</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>对整数的二进制表示取反（0 变 1 ，1 变 0）后，再转换为十进制表示，可以得到这个整数的补数。</p><p>例如，整数 5 的二进制表示是 “101” ，取反后得到 “010” ，再转回十进制表示得到补数 2 。<br>给你一个整数 num ，输出它的补数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：num &#x3D; 5输出：2解释：5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：num &#x3D; 1输出：0解释：1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><blockquote><p>1 &lt;= num &lt; 231</p></blockquote><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h4 id="模拟法"><a href="#模拟法" class="headerlink" title="模拟法"></a>模拟法</h4><p>先找到最高位1的位置，然后从该位置往后，将0和1取反，即0变1，1变0。</p><h4 id="位运算优化"><a href="#位运算优化" class="headerlink" title="位运算优化"></a>位运算优化</h4><p>先找到最高位11的位置，设为pos，<code>((1LL &lt;&lt; (pos + 1)) - 1) ^ (num) </code>即为答案，因为<code>(1LL &lt;&lt; (pos + 1)) - 1</code>即是从pos位开始全部是1，然后和num进行异或运算，相当于将num从pos开始的所有位，0变1，1变0。</p><h3 id="C-模拟"><a href="#C-模拟" class="headerlink" title="C++模拟"></a>C++模拟</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pos <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            num <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-模拟-1"><a href="#C-模拟-1" class="headerlink" title="C++模拟"></a>C++模拟</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pos <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1LL</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>位运算套小括号</li><li>n^(1&lt;&lt;i)取反</li><li>C++数字默认int，使用<code>1LL</code>或<code>(long long)num</code>转换</li><li>C++提供typeof(5)断言机制判断数据类型</li></ul><p><img src="https://i.loli.net/2021/10/18/8Y5TQgWbmfZBRSk.png"></p><h4 id="改编自编程熊"><a href="#改编自编程熊" class="headerlink" title="改编自编程熊"></a><a href="https://leetcode-cn.com/problems/number-complement/solution/acmjin-pai-ti-jie-mo-ni-wei-yun-suan-bia-c6ij/">改编自编程熊</a></h4>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang实战之即时通信系统-客户端</title>
      <link href="/2021/10/18/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2021/10/18/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/Client">项目代码</a></h4><h2 id="ver1-建立连接"><a href="#ver1-建立连接" class="headerlink" title="ver1.建立连接"></a>ver1.建立连接</h2><ul><li><code>type Client struct</code></li><li><code>func NewClient</code><ul><li>新建客户端</li><li>建立连接</li><li>返回客户端引用</li></ul></li></ul><h2 id="ver2-命令行解析"><a href="#ver2-命令行解析" class="headerlink" title="ver2.命令行解析"></a>ver2.命令行解析</h2><ul><li>执行可执行文件<code>./client</code>时传入IP和端口</li></ul><img src="https://i.loli.net/2021/10/18/EGAzc962KPftsqC.png" style="zoom:67%;" /><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> serverIp <span class="token builtin">string</span><span class="token keyword">var</span> serverPort <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//定义命令行参数变量，在init函数中进行初始化</span>    flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serverIp<span class="token punctuation">,</span><span class="token string">"ip"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token string">"默认ip为127.0.0.1"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serverPort<span class="token punctuation">,</span><span class="token string">"port"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">,</span><span class="token string">"默认端口为8888"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//把用户传递的命令行参数解析为对应变量的值</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ver3-菜单显示"><a href="#ver3-菜单显示" class="headerlink" title="ver3.菜单显示"></a>ver3.菜单显示</h3><ul><li><p><code>fmt.Scanln(&amp;flag)</code>等待用户从客户端输入flag</p></li><li><p>flag中新增flag属性</p></li><li><p>新增menu()方法，获取用户输入模式</p></li><li><p>新增Run()主业务循环</p></li><li><p>main()中调用Run()函数</p></li></ul><h2 id="ver4-修改用户名"><a href="#ver4-修改用户名" class="headerlink" title="ver4.修改用户名"></a>ver4.修改用户名</h2><ul><li>需要异步才能从conn读取服务器的回应</li><li>新增updateName()修改用户名</li><li>加入到Run业务分支中</li><li>添加处理server回执信息方法DealResponse()</li><li>开启一个go，去承载DealResponse()流程</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//处理server回应的消息， 直接显示到标准输出即可</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">DealResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//一旦client.conn有数据，就直接copy到stdout标准输出上, 永久阻塞监听</span>io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> client<span class="token punctuation">.</span>conn<span class="token punctuation">)</span>    <span class="token comment">//for&#123; 等价于</span>    <span class="token comment">//buf := make()</span>    <span class="token comment">//client.conn.Read(buf)</span>    <span class="token comment">//fmt.Println(buf)</span><span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ver5-公聊模式"><a href="#ver5-公聊模式" class="headerlink" title="ver5.公聊模式"></a>ver5.公聊模式</h2><ul><li>DealResponse()会将公聊消息显示</li><li>新增publicChat()公聊模式业务</li><li>加入到Run业务分支中</li></ul><h2 id="ver6-私聊模式"><a href="#ver6-私聊模式" class="headerlink" title="ver6.私聊模式"></a>ver6.私聊模式</h2><ul><li>查询有哪些用户在线</li><li>新增业务私聊模式</li><li>提示用户选择一个用户进入私聊</li><li>添加到run业务分支</li></ul><h4 id="项目代码-1"><a href="#项目代码-1" class="headerlink" title="项目代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/Client">项目代码</a></h4>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang实战之即时通信系统:服务器</title>
      <link href="/2021/10/18/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/10/18/Golang%E5%AE%9E%E6%88%98%E4%B9%8B%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F-%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/10/15/RsxZOeCDMFLHdum.png"></p><img src="https://i.loli.net/2021/10/15/ua9LNWEZ7qhmKyc.png" style="zoom:50%;" /><h2 id="版本一：构建基础Server"><a href="#版本一：构建基础Server" class="headerlink" title="版本一：构建基础Server"></a>版本一：构建基础Server</h2><h4 id="版本一代码"><a href="#版本一代码" class="headerlink" title="版本一代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver1.server">版本一代码</a></h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Ip   <span class="token builtin">string</span>Port <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>ip <span class="token builtin">string</span><span class="token punctuation">,</span> port <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token function">Handler</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token function">Start</span><span class="token punctuation">(</span>server Server<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>将同包下的两个文件一起编译为可执行文件server<code>go build -o server main.go server.go</code></p></li><li><p><code>./server</code>启动服务器</p></li><li><p><code>nc 127.0.0.1 8888</code>模拟客户端</p></li></ol><h2 id="版本二：用户上线及广播功能"><a href="#版本二：用户上线及广播功能" class="headerlink" title="版本二：用户上线及广播功能"></a>版本二：用户上线及广播功能</h2><h4 id="版本二代码"><a href="#版本二代码" class="headerlink" title="版本二代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver2.broadcast">版本二代码</a></h4><ul><li>遍历数据进行广播时，不希望数据被修改。加互斥锁(Mutex)</li><li>channel给两个goroutine建立联系</li><li>如果监听不放在for循环中，只会监听一次</li><li>遍历map：<code>for _, user := range this.OnlineMap&#123;&#125;</code></li><li>字符串转字节：<code>bs := []byte(&quot;&quot;)</code></li><li>字节转字符串：<code>s = string(bs)</code></li></ul><p><img src="https://i.loli.net/2021/10/16/WnCwx9yuStHRU85.png"></p><img src="https://i.loli.net/2021/10/17/icuWVMr4Dzv2ENF.png" style="zoom:67%;" /><h2 id="版本三：用户信息广播功能"><a href="#版本三：用户信息广播功能" class="headerlink" title="版本三：用户信息广播功能"></a>版本三：用户信息广播功能</h2><h4 id="版本三代码"><a href="#版本三代码" class="headerlink" title="版本三代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver3.groupChat">版本三代码</a></h4><ul><li>在Handler中开一条协程用于接收用户消息</li><li><code>n, err := conn.Read(buf)</code>获取用户消息。n为字节长度，err为错误，消息以字符数组存在buf</li></ul><h2 id="版本四：用户业务封装"><a href="#版本四：用户业务封装" class="headerlink" title="版本四：用户业务封装"></a>版本四：用户业务封装</h2><h4 id="版本四代码"><a href="#版本四代码" class="headerlink" title="版本四代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver4.business%20encapsulation">版本四代码</a></h4><ul><li>将代码按模块封装</li><li>User类中新增Online,Offline,DoMessage方法</li><li>User类中添加一个引用Server属性，则可访问Server的属性</li><li>删除映射使<code>delete(this.server.OnlineMap,this.Name)</code></li></ul><h2 id="版本五：在线用户查询"><a href="#版本五：在线用户查询" class="headerlink" title="版本五：在线用户查询"></a>版本五：在线用户查询</h2><h4 id="版本五代码"><a href="#版本五代码" class="headerlink" title="版本五代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver5.QueryUsers">版本五代码</a></h4><ul><li>提供<code>SendMsg</code>向对象客户端发送信息API</li><li>在DoMessage()方法中，加上对”who“指令的处理，返回在线用户的信息</li></ul><h2 id="版本六：修改用户名"><a href="#版本六：修改用户名" class="headerlink" title="版本六：修改用户名"></a>版本六：修改用户名</h2><h4 id="版本六代码"><a href="#版本六代码" class="headerlink" title="版本六代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver6.ModifyUserName">版本六代码</a></h4><ul><li>消息指令<code>rename|tan</code></li><li>切割字符串使用<code>strings.Split(str,&quot;,&quot;)</code>得到字符数组</li></ul><h2 id="版本七：超时强踢功能"><a href="#版本七：超时强踢功能" class="headerlink" title="版本七：超时强踢功能"></a>版本七：超时强踢功能</h2><h4 id="版本七代码"><a href="#版本七代码" class="headerlink" title="版本七代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver7.OvertimeKick">版本七代码</a></h4><ul><li><p><code>time.After(time.second*10)</code>定时器(channel),十秒后发送信息。上文的case执行后，定时器自动重置</p></li><li><p><font color="red">select外不套for,会导致主线程结束</font></p></li></ul><h2 id="版本八：私聊功能"><a href="#版本八：私聊功能" class="headerlink" title="版本八：私聊功能"></a>版本八：私聊功能</h2><h4 id="版本八代码"><a href="#版本八代码" class="headerlink" title="版本八代码"></a><a href="https://github.com/bai62/CloudCode/tree/master/Golang/beginner/CommuncationSystem/ver8.PrivateChat">版本八代码</a></h4>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day5】二叉搜索树中第K小的元素</title>
      <link href="/2021/10/17/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day5%E3%80%91%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2021/10/17/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day5%E3%80%91%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/">LeetCode230.二叉搜索树中第K小的元素</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：root &#x3D; [3,1,4,null,2], k &#x3D; 1输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>树中的节点数为 n 。</p><blockquote><p>1 &lt;= k &lt;= n &lt;= 104<br>0 &lt;= Node.val &lt;= 104</p></blockquote><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><p>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化算法？</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><img src="https://i.loli.net/2021/10/17/19MsIPbaGWNRBwn.png" style="zoom:80%;" /><p>对二叉搜索树进行中序遍历，得到值递增的序列</p><h3 id="C-递归"><a href="#C-递归" class="headerlink" title="C++递归"></a>C++递归</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        TreeNode<span class="token operator">*</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>         <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化：C-堆栈"><a href="#优化：C-堆栈" class="headerlink" title="优化：C++堆栈"></a>优化：C++堆栈</h3><p>vector加入第k个数时，不易终止函数。继续进行了冗余的递归</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历到节点时，root为空指针；遍历结束时，栈空</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//遍历结束前栈顶一定有元素，且为中序遍历</span>            root <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span> <span class="token operator">></span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>定义一个向量/栈 <code>vector &lt;int&gt; v</code>和<code>stack &lt;TreeNode*&gt; s</code> </li><li>返回值非空函数一定要有返回值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day4】无重复字符的最长子串</title>
      <link href="/2021/10/16/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day4%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2021/10/16/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day4%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">LeetCode3.无重复字符的最长子串</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h4><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h4><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;&quot;输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><img src="https://i.loli.net/2021/10/16/A2KW1cuRLxgklor.png" style="zoom:70%;" /><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><img src="https://i.loli.net/2021/10/16/HJDstYvdpa8Bq6G.png" style="zoom:67%;" /><ul><li>string溢出后，会返回一个字符。双指针需要加范围限制</li></ul><h4 id="unordered-map时"><a href="#unordered-map时" class="headerlink" title="unordered_map时"></a>unordered_map时</h4><ul><li>map[“key”]对应value默认值为0</li></ul><h4 id="unordered-set时"><a href="#unordered-set时" class="headerlink" title="unordered_set时"></a>unordered_set时</h4><ul><li><code>unordered_set修改元素数目时empty()，只有01操作</code></li><li><code>f.find(s[i])==f.end()</code> <code>unordered_set</code>判断元素是否存在</li></ul><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> f<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>Max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>Max<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day3】爬楼梯</title>
      <link href="/2021/10/15/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day3%E3%80%91%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2021/10/15/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day3%E3%80%91%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/climbing-stairs/">LeetCode70.爬楼梯</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入： 2输出： 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解释： 有两种方法可以爬到楼顶。</p><ol><li><p> 1 阶 + 1 阶</p></li><li><p>2 阶</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4></li></ol><pre class="line-numbers language-none"><code class="language-none">输入： 3输出： 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解释： 有三种方法可以爬到楼顶。</p><ol><li> 1 阶 + 1 阶 + 1 阶</li><li> 1 阶 + 2 阶</li><li> 2 阶 + 1 阶</li></ol><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>n阶楼梯，第一步有两种可能：1阶，2阶</p><p>从第二步至走完，楼梯剩余阶数为<code>n-1</code>阶或<code>n-2</code>阶。即总步数为<code>f(n-1)+f(n-2)</code></p><img src="https://i.loli.net/2021/10/15/XDiva76dS3EG49r.png" style="zoom:57%;" /><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        y <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> x <span class="token operator">+</span> yy <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">&#125;</span><span class="token keyword">return</span> x<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-net包</title>
      <link href="/2021/10/15/Golang-net%E5%8C%85/"/>
      <url>/2021/10/15/Golang-net%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><img src="https://i.loli.net/2021/10/15/zPgiR2eCpZSMNKf.jpg" style="zoom:70%;" /><p>在 net 包中，主要涉及网络层和传输层的协议。支持如下：<br>网络层：</p><ul><li>ICMP</li><li>IGMP</li><li>IVP6-ICMP</li></ul><p>传输层：</p><ul><li>TCP</li><li>UDP</li></ul><h2 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h2><p>在讲代码结构前，还需要回忆（学习）几个 Socket 编程(套接字编程)的知识点。</p><ul><li>在 Linux 上一切皆文件。所以<strong>各端口的读写服务</strong>可以认为是<strong>读取/写入文件</strong>, 一般使用文件描述符 fd (<strong>file descriptor</strong>) 表示。在Windows上，各端口的读写服务是一个<strong>通信链的句柄操作</strong>，通过句柄实现网络发出请求和读取数据。在 go 中为了统一，采用 linux 的 fd 代表一个链接节点。</li><li><strong>TCP</strong> 是<strong>面向连接</strong>的、可靠的<strong>流协议</strong>，可以理解为不断从文件中读取数据（<strong>STREAM</strong>）。<strong>UDP</strong> 是<strong>无链接</strong>的、<strong>面向报文</strong>的协议，是无序，不可靠的（DGRAM）（目前很多可靠的协议都是基于UDP 开发的）。</li><li><strong>UNIXDomain Socket</strong> 是一种进程间通信的协议，虽然是一个 IPC 协议，但是在实现上是基于套接字 (socket) 实现的。因此，<strong>UNIXDomain Socket</strong> 也放在了net 包中。</li><li><strong>UNIXDomain Socket</strong> 也可以选择采用比特流的方式，或者无序的，不可靠的通讯方式，有序数据包的方式</li></ul><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="https://i.loli.net/2021/10/15/7vpEXYw1eI65Tfa.jpg"></p><p>从图中可以看出，基于 TCP、UDP、IP、Unix （Stream 方式）的链接抽象出来都是 <code>Conn</code> 接口。<strong>基于包传递</strong>的 UDP、IP、UnixConn （DGRAM 包方式） 都实现了 <code>PacketConn</code> 接口。对于<strong>面向流的监听器</strong>，比如： TCPListener、 UnixListener 都实现了 Listener 接口。</p><p>整体上可以看出，net 包对网络链接是基于我们复习的网络知识实现的。对于代码的底层实现，也是比较简单的。正对不同的平台，调用不同平台套接字的系统调用即可。直观上看，对于不同的链接，我们都是可以通过Conn 的接口来做网络io的交互。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在了解了包的构成后，我们基于不同的<strong>网络协议</strong>分两类来学习如何调用网络包提供的方法。</p><h3 id="基于流的协议"><a href="#基于流的协议" class="headerlink" title="基于流的协议"></a>基于流的协议</h3><p>基于流的协议，net 包中支持了常见的 TCP，Unix （Stream 方式） 两种。基于流的协议需要先于对端建立链接，然后再发送消息。下面是 Unix 套接字编程的一个流程：</p><p><img src="https://i.loli.net/2021/10/15/nSArbQ4BjoFVi7T.jpg"></p><p>首先，<strong>服务端</strong>需要<strong>绑定并监听端口</strong>，然后等待<strong>客户端</strong>与其<strong>建立链接</strong>，通过 Accept 接收到客户端的连接后，开始<strong>读写</strong>消息。最后，当服务端收到<strong>EOF</strong>标识后，关闭链接即可。 <strong>HTTP</strong>, <strong>SMTP</strong> 等应用层协议都是使用的 TCP 传输层协议。</p><h3 id="基于包的协议"><a href="#基于包的协议" class="headerlink" title="基于包的协议"></a>基于包的协议</h3><p>基于包的协议，<strong>net</strong> 包中支持了常见的 <strong>UDP</strong>，<strong>Unix</strong> （DGRAM 包方式，PacketConn 方式），<strong>ip</strong> (网络层协议，支持了icmp, igmp) 几种。基于包的协议在<strong>bind端口</strong>后，无需建立连接，是一种<strong>即发即收</strong>的模式。</p><p>基于包的协议，例如基于UDP 的 DNS解析， 文件传输（TFTP协议）等协议，在网络层应该都是基于包的协议。 下面是基于包请求的Server 端和Client端：</p><p><img src="https://i.loli.net/2021/10/15/qvFYwUIPXz4Zhcy.jpg"></p><p>可以看到，在<strong>Socket编程</strong>里， 基于包的协议是不需要 <strong>Listen</strong> 和 <strong>Accept</strong> 的。在 net 包中，使用<strong>ListenPacket</strong>，实际上仅是构造了一个<strong>UDP连接</strong>，做了<strong>端口绑定</strong>而已。端口绑定后，<font color="red">Server 端开始阻塞读取包数据，之后二者开始通信</font>。由于基于包协议，因此，我们也可以采用<strong>PacketConn</strong> 接口（看第一个实现接口的图）构造<strong>UDP</strong>包。</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>下面，我们构造一个简单的 Redis Server （支持多线程），实现了支持Redis协议的简易Key-Value操作（可以使用Redis-cli直接验证）:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"bufio"</span>  <span class="token string">"fmt"</span>  <span class="token string">"io"</span>  <span class="token string">"net"</span>  <span class="token string">"strconv"</span>  <span class="token string">"strings"</span>  <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">var</span> KVMap sync<span class="token punctuation">.</span>Map<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 构造一个listener</span>  listener<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:6379"</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token boolean">_</span> <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 接收请求</span>    conn<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 连接的处理</span>    <span class="token keyword">go</span> <span class="token function">FakeRedis</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这里做了io 读写操作，并解析了 Redis 的协议</span><span class="token keyword">func</span> <span class="token function">FakeRedis</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    paramCount<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paramCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>      <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 每个参数的长度，这里忽略了</span>      sParam<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>sParam<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">switch</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> KVMap<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>        conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"$-1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"$%d\r\n%v\r\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token string">"SET"</span><span class="token punctuation">:</span>      KVMap<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"+OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">"COMMAND"</span><span class="token punctuation">:</span>      conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"+OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>上述代码没有任何的异常处理，仅作为网络连接的一个简单例子。</em><br>从代码中可以看出，我们的数据流式的网络协议，在建立连接后，可以和文件IO服务一样，可以任意的读写操作。<br>正常情况下，流处理的请求，都会开启一个协程来做连接处理，主协程仅用来接收连接请求。(基于包的网络协议则可以不用开启协程处理)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>基于 Conn 的消息都是有三种过期时间，这其实是在底层epoll_wait中设置的超时时间。 Deadline 设置了Dail中建立连接的超时时间， ReadDeadline 是 Read 操作的超时时间， WriteDeadline 为 Write 操作的超时时间。</li><li>net 包作为基础包，基于net开发应用层协议比较多，例如 net/http, net/rpc/smtp 等。</li><li>网络的io操作底层是基于epoll来实现的, unixDomain 基于文件来实现的。</li><li>net 包实现的套接字编程仅是我们日常生活中用的比较多的一些方法，还有很多未实现的配置待我们去探索。</li><li>网络模型比较简单，实际用起来，还是需要分门别类的。</li></ol><p><a href="https://segmentfault.com/a/1190000022577103">转自Golang net 包学习和实战</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-GoModules</title>
      <link href="/2021/10/15/Golang-GoModules/"/>
      <url>/2021/10/15/Golang-GoModules/</url>
      
        <content type="html"><![CDATA[<p> GOPATH弊端</p><ul><li>无版本控制概念</li><li>无法同步一致第三方版本号</li><li>无法指定当前项目引用的第三方版本号</li></ul><h2 id="Go-get"><a href="#Go-get" class="headerlink" title="Go get"></a>Go get</h2><p>go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装到go/pkg目录下。整个过程就像安装一个 App 一样简单。</p><p>这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行 go install</p><h2 id="GoModules配置"><a href="#GoModules配置" class="headerlink" title="GoModules配置"></a>GoModules配置</h2><h3 id="go-mod环境变量"><a href="#go-mod环境变量" class="headerlink" title="go mod环境变量"></a>go mod环境变量</h3><h4 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h4><p>通过<code>go env -w GO111MODULE=on</code>启用。默认值为<code>auto</code>,项目中有.mod文件时才会其启用</p><h4 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h4><ul><li>GOPROXY控制Go Module下载的来源，有助于确保构建的确定性和安全性</li><li>项目的第三方依赖库的下载源地址</li><li>direct 用于指示Go回源到模块版本的源地址去抓取(比如GitHub)</li></ul><h4 id="GOSUMDB"><a href="#GOSUMDB" class="headerlink" title="GOSUMDB"></a>GOSUMDB</h4><ul><li>用于校验拉取的第三方库是否是完整的</li><li>默认也是国外的网站，如果设置了GOPROXY就不用设置了</li></ul><h4 id="GOPRIVATE"><a href="#GOPRIVATE" class="headerlink" title="GOPRIVATE"></a>GOPRIVATE</h4><ul><li><code>go env -w GOPRIVATE=&quot;git.example.com,github.com/aceid/zinx&quot;</code><ul><li>表示git.example.com和github.com/aceid/zinx是私有仓库，不会进行GOPROXY下载和校验</li></ul></li><li><code>go env -w GOPRIVATE=&quot;*example.com&quot;</code><ul><li>表示所有模块路径为<code>example.com</code>的子域名，比如git.example.com或者hello.example.com都不进行GOPROXY下载和校验</li></ul></li></ul><h3 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a>go mod命令</h3><table><thead><tr><th>go mod命令</th><th>作用</th></tr></thead><tbody><tr><td>go mod download</td><td>下载依赖包到本地（默认为 GOPATH/pkg/mod 目录）</td></tr><tr><td>go mod edit</td><td>编辑 go.mod 文件</td></tr><tr><td>go mod graph</td><td>打印模块依赖图</td></tr><tr><td>go mod init &lt;名称&gt;</td><td>初始化当前文件夹，创建 go.mod 文件</td></tr><tr><td>go mod tidy</td><td>增加缺少的包，删除无用的包</td></tr><tr><td>go mod vendor</td><td>将依赖复制到 vendor 目录下</td></tr><tr><td>go mod verify</td><td>校验依赖</td></tr><tr><td>go mod why</td><td>解释为什么需要依赖</td></tr></tbody></table><h2 id="GoModules初始化项目"><a href="#GoModules初始化项目" class="headerlink" title="GoModules初始化项目"></a>GoModules初始化项目</h2><ol><li>开启Go Modules模块<code>go env -w GO111MODULE=on</code></li><li>创建项目(不要求在GOPATH)，在项目目录下<code>go mod init &lt;包名&gt;</code>，生成go.mod文件</li><li>将依赖的库down下来<code>go get github.com/aceld/zinx</code></li><li><code>go.mod</code>内多了<code>require github.com/aceld/zinx v1.0.0 // indirect</code>。依赖的版本号是<code>1.0.0</code>。间接依赖zinx包，直接依赖子包</li><li>会生成一个<code>go.sum</code>文件</li></ol><h3 id="go-sum文件"><a href="#go-sum文件" class="headerlink" title="go.sum文件"></a>go.sum文件</h3><ul><li>罗列当前项目直接间接的依赖的所有模块版本，保证今后项目依赖的版本不会被篡改</li><li><code>h1:hash</code> 表示整体项目的zip文件打开之口的全部文件的校验和来生成的hash，如果不存在，可能表示依赖的库用不上</li><li><code>xxx/go.mod h1:hash</code> go.mod文件的hash</li></ul><h2 id="改变模块依赖关系"><a href="#改变模块依赖关系" class="headerlink" title="改变模块依赖关系"></a>改变模块依赖关系</h2><p><code>go mod edit -replade=xxxxx</code>恢复库的版本</p><p><img src="https://i.loli.net/2021/10/15/Db3fAus28GOKUWm.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-channel</title>
      <link href="/2021/10/15/Golang-channel/"/>
      <url>/2021/10/15/Golang-channel/</url>
      
        <content type="html"><![CDATA[<h2 id="无缓冲的channel"><a href="#无缓冲的channel" class="headerlink" title="无缓冲的channel"></a>无缓冲的channel</h2><p>在执行一个goroutine时，将需要共享的数据写入到预先定义好的一个channel类型的变量中,这个变量就是一个消息队列,channel类型的数据的存储结构是队列(先进先出)。那么，该goroutine就在该数组中对应着唯一的一个索引(索引值可能不是唯一的)，这个索引就是该goroutine的唯一标识。另一个goroutine就可以通过这个索引来访问此goroutine存储的信息，这样就实现了goroutine之间的通信。</p><ul><li>channel通过发动阻塞，实现两个协程同步</li><li>先执行到<code>写channel</code>或<code>读channel</code>时，都会发动阻塞</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"666 goroutine alive"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"666 goroutine destroyed"</span><span class="token punctuation">)</span>c1 <span class="token operator">&lt;-</span> <span class="token number">666</span> <span class="token comment">//c1读取值后，该协程才会结束</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>num1<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c1<span class="token comment">//c1被读取后，主协程才会继续</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"parent goroutine alive"</span><span class="token punctuation">)</span><span class="token comment">//循环只执行一次，说明此时非异步</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有缓冲的channel"><a href="#有缓冲的channel" class="headerlink" title="有缓冲的channel"></a>有缓冲的channel</h2><img src="https://i.loli.net/2021/10/15/7dMZHDLakG8ohw9.png" style="zoom:67%;" /><ul><li><code>写channel</code>时，除非容量已满，否则不会造成阻塞</li><li><code>读channel</code>时，除非缓存为空，否则不会造成阻塞</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"son goroutine destroyed"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> ifmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"son goroutine alive %d,cap = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>num<span class="token operator">:=</span> <span class="token operator">&lt;-</span> cfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="channel关闭特点"><a href="#channel关闭特点" class="headerlink" title="channel关闭特点"></a>channel关闭特点</h2><ul><li><p>channel不像文件一样需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range，for循环之类的,才去关闭channel</p></li><li><p>关闭channel后，无法向channel再发送数据（引发panic错误后导致接收立即返回零值）</p></li><li><p><font color="red">关闭channel后，可以继续从channel接收数据；</font></p></li><li><p>对于<code>nil channel</code>，无论收发都会被阻塞。</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"son goroutine destroyed"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>c <span class="token operator">&lt;-</span> ifmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"son goroutine alive %d,cap = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>num<span class="token punctuation">,</span>ok<span class="token operator">:=</span> <span class="token operator">&lt;-</span> c<span class="token keyword">if</span> ok<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="channel与range"><a href="#channel与range" class="headerlink" title="channel与range"></a>channel与range</h2><ul><li>可以使用range来迭代不断<code>读channel</code></li><li>channel为空时，发生阻塞，但for循环不终止</li><li><code>close(c)</code>后，for循环中止</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Pritnln</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="channel与select"><a href="#channel与select" class="headerlink" title="channel与select"></a>channel与select</h2><ul><li>单流程下一个go只能监控一个channel状态，select可以完成监控多个channel状态</li><li>for内套select，来不断判断</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span> chan1<span class="token punctuation">:</span>    <span class="token comment">//如果成功读chan1，则进行该case处理语句</span>    <span class="token keyword">case</span> chan2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment">//如果成功写case3，则进行该case处理语句</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token comment">//如果上面都没有成功，则进入default处理流程</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>quit <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">for</span><span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> c <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>x <span class="token operator">+=</span> y<span class="token comment">//1 1 2 3 5 8</span>y <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>quit <span class="token operator">&lt;-</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>quit<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-goroutine</title>
      <link href="/2021/10/14/Golang-goroutine/"/>
      <url>/2021/10/14/Golang-goroutine/</url>
      
        <content type="html"><![CDATA[<h2 id="协程线程关系基本概念"><a href="#协程线程关系基本概念" class="headerlink" title="协程线程关系基本概念"></a>协程线程关系基本概念</h2><ul><li><p>单一执行流程、计算机智能一个任务一个任务处理</p></li><li><p>进程阻塞所带来的的CPU浪费时间</p></li><li><p>多线程/多进程避免了进程阻塞</p></li></ul><img src="https://i.loli.net/2021/10/14/OYqrjDPm2XAIcd3.png" style="zoom:40%;" /><ul><li>进程/线程的数目越多，切换的成本就越大，就越浪费</li></ul><img src="https://i.loli.net/2021/10/14/7JhFL6xjCkefADK.png" style="zoom:40%;" /><ul><li>多线程随着<font color="red">同步竞争</font>(如锁、竞争资源冲突等)，开发设计变得越来越复杂</li></ul><img src="https://i.loli.net/2021/10/14/BQjiANI6vKVRcty.png" style="zoom:27%;" /><ul><li>不同的语言，需要做自己的协程调度器</li></ul><img src="https://i.loli.net/2021/10/14/kQZosXPtCaT4jDU.png" style="zoom:40%;" /><h2 id="goroutine调度设计策略"><a href="#goroutine调度设计策略" class="headerlink" title="goroutine调度设计策略"></a>goroutine调度设计策略</h2><h3 id="老调度器缺陷："><a href="#老调度器缺陷：" class="headerlink" title="老调度器缺陷："></a>老调度器缺陷：</h3><img src="https://i.loli.net/2021/10/14/Bc1oPhUOujGE2ys.png" style="zoom:50%;" /><ul><li><p>创建、销毁、调度，G都需要每个线程获取锁，这就形成了激烈的锁竞争(锁可能造成阻塞)</p></li><li><p>M上转G会造成<font color="red">延迟和额外的系统负载</font></p></li><li><p>系统调用（CPU在线程之间的切换）导致频繁的线程阻塞和取消阻塞操作<font color="red">增加了系统开销</font></p></li></ul><h3 id="调度器的设计策略"><a href="#调度器的设计策略" class="headerlink" title="调度器的设计策略"></a>调度器的设计策略</h3><img src="https://i.loli.net/2021/10/14/gp5Iq13lQDCLtRW.png" style="zoom:40%;" /><h4 id="复用线程"><a href="#复用线程" class="headerlink" title="复用线程"></a>复用线程</h4><ul><li><code>working stealing</code>机制，G到空闲的M运行</li></ul><img src="https://i.loli.net/2021/10/14/62YTDLUQkMbcy7m.png" style="zoom:50%;" /><ul><li><code>hand off</code>机制，G阻塞后，创建/唤醒一个thread。P和本地队列其他G分离，阻塞的G和M睡眠或摧毁</li></ul><img src="https://i.loli.net/2021/10/14/V5aKvlG67hopkQq.png" style="zoom:30%;" /><h4 id="利用并行"><a href="#利用并行" class="headerlink" title="利用并行"></a>利用并行</h4><p>GOMASPROCS限定P的个数 = <font color="red">CPU核数/2</font></p><h4 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h4><ul><li>没有优先度</li></ul><img src="https://i.loli.net/2021/10/14/6Ba9swkqzrMFdNY.png" style="zoom:37%;" /><h4 id="全局G队列"><a href="#全局G队列" class="headerlink" title="全局G队列"></a>全局G队列</h4><p>M空闲时，优先从本地队列偷取G。再将全局队列的G解锁并偷取</p><h2 id="创建goroutine"><a href="#创建goroutine" class="headerlink" title="创建goroutine"></a>创建goroutine</h2><ul><li>主goroutine死亡(main方法执行结束)，子goroutine伴随死亡</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">//子goroutine</span><span class="token keyword">func</span> <span class="token function">newTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"new Goroutine : i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//主goroutine</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建一个go程 去执行newTask() 流程</span><span class="token keyword">go</span> <span class="token function">newTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//fmt.Println("main goroutine exit") main方法执行结束时，子进程死亡</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>i<span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"main goroutine: i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退出当前Goroutine"><a href="#退出当前Goroutine" class="headerlink" title="退出当前Goroutine"></a>退出当前Goroutine</h2><ul><li><code>runtime.Goexit()</code></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"runtime"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//用go创建承载一个形参为空，返回值为空的一个函数</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A.defer"</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B.defer"</span><span class="token punctuation">)</span><span class="token comment">//退出当前goroutine</span>runtime<span class="token punctuation">.</span><span class="token function">Goexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//调用子匿名方法</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用匿名方法</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token comment">//go异步操作，不支持 res := go func</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">", b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">//死循环</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day2】山峰数组的顶部</title>
      <link href="/2021/10/14/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day2%E3%80%91%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/"/>
      <url>/2021/10/14/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day2%E3%80%91%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">Leetcode852.山峰数组的顶部</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>符合下列属性的数组 arr 称为 山脉数组 ：</p><ul><li>arr.length &gt;= 3</li></ul><p>存在 i（0 &lt; i &lt; arr.length - 1）使得：</p><ul><li>arr[0] &lt; arr[1] &lt; … arr[i-1] &lt; arr[i]</li><li>arr[i] &gt; arr[i+1] &gt; … &gt; arr[arr.length - 1]</li></ul><p>给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &lt; arr[1] &lt; … arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1] 的下标 i 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,2,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,10,5,2]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h4><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [3,4,5,1]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h4><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [24,69,100,99,79,78,67,36,26,19]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>3 &lt;= arr.length &lt;= 104<br>0 &lt;= arr[i] &lt;= 106<br>题目数据保证 arr 是一个山脉数组</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>山峰两侧单调性不变，使用二分</p><p>mid=(l+r+1)/2，先判断arr[mid]与arr[mid-1]，+1防溢出</p><p>arr[mid]小于arr[mid-1]时局部递减，移动右边界</p><p>arr[mid]小于arr[mid+1]时局部递增，移动左边界</p><p><img src="https://i.loli.net/2021/10/14/WA6oKihdPwRzVDm.png"></p><p><code>图中线长表示迭代次数，圈表示mid，更短的线表示此次迭代更新的边界</code></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//l=r=目标值时，由于mid有偏移，mid可能不等于r=l</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//先arr[mid -1]后arr[mid+1]时，需加1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>l <span class="token operator">:=</span> <span class="token number">0</span>r <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">var</span> mid <span class="token builtin">int</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> mid<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang反射</title>
      <link href="/2021/10/14/Golang%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/10/14/Golang%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><img src="https://i.loli.net/2021/10/14/ZJ9mAFICQdvOygW.png" style="zoom:40%;" /><p>反射包中的所有方法基本都是围绕着<strong>Type</strong>和<strong>Value</strong>这两个类型设计的。我们通过<code>reflect.TypeOf</code>()、<code>reflect.ValueOf()</code>可以将一个普通的变量转换成『反射』包中提供的<strong>Type</strong>和<strong>Value</strong>，随后就可以使用反射包中的方法对它们进行复杂的操作。</p><img src="https://i.loli.net/2021/10/14/aMf3Tn1XzP7E9cb.png" style="zoom:67%;" /><h3 id="Typeof和Valueof"><a href="#Typeof和Valueof" class="headerlink" title="Typeof和Valueof"></a>Typeof和Valueof</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Id   <span class="token builtin">int</span>Name <span class="token builtin">string</span>Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this User<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"user is called .."</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>user <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Aceld"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token function">DoFiledAndMethod</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">DoFiledAndMethod</span><span class="token punctuation">(</span>input <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取input的type</span>inputType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"inputType is :"</span><span class="token punctuation">,</span> inputType<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//获取input的value</span>inputValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"inputValue is:"</span><span class="token punctuation">,</span> inputValue<span class="token punctuation">)</span><span class="token comment">//通过type 获取里面的字段</span><span class="token comment">//1. 获取interface的reflect.Type，通过Type得到NumField ,进行遍历</span><span class="token comment">//2. 得到每个field，数据类型</span><span class="token comment">//3. 通过filed有一个Interface()方法等到 对应的value</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>field <span class="token operator">:=</span> inputType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>value <span class="token operator">:=</span> inputValue<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: %v = %v\n"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//通过type 获取里面的方法,调用</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputType<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>m <span class="token operator">:=</span> inputType<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: %v\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> m<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type接口"><a href="#Type接口" class="headerlink" title="Type接口"></a>Type接口</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Type <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 变量的内存对齐，返回 rtype.align</span>    <span class="token function">Align</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// struct 字段的内存对齐，返回 rtype.fieldAlign</span>    <span class="token function">FieldAlign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 根据传入的 i，返回方法实例，表示类型的第 i 个方法</span>    <span class="token function">Method</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> Method    <span class="token comment">// 根据名字返回方法实例，这个比较常用</span>    <span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Method<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment">// 返回类型方法集中可导出的方法的数量</span>    <span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 只返回类型名，不含包名</span>    <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>    <span class="token comment">// 返回导入路径，即 import 路径</span>    <span class="token function">PkgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>    <span class="token comment">// 返回 rtype.size 即类型大小，单位是字节数</span>    <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span>    <span class="token comment">// 返回类型名字，实际就是 PkgPath() + Name()</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>    <span class="token comment">// 返回 rtype.kind，描述一种基础类型</span>    <span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Kind    <span class="token comment">// 检查当前类型有没有实现接口 u</span>    <span class="token function">Implements</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 检查当前类型能不能赋值给接口 u</span>    <span class="token function">AssignableTo</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 检查当前类型能不能转换成接口 u 类型</span>    <span class="token function">ConvertibleTo</span><span class="token punctuation">(</span>u Type<span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 检查当前类型能不能做比较运算，其实就是看这个类型底层有没有绑定 typeAlg 的 equal 方法。</span>    <span class="token comment">// 打住！不要去搜 typeAlg 是什么，不然你会陷进去的！先把本文看完。</span>    <span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 返回类型的位大小，但不是所有类型都能调这个方法，不能调的会 panic</span>    <span class="token function">Bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 返回 channel 类型的方向，如果不是 channel，会 panic</span>    <span class="token function">ChanDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ChanDir    <span class="token comment">// 返回函数类型的最后一个参数是不是可变数量的，"..." 就这样的，同样，如果不是函数类型，会 panic</span>    <span class="token function">IsVariadic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 返回所包含元素的类型，只有 Array, Chan, Map, Ptr, Slice 这些才能调，其他类型会 panic。</span>    <span class="token comment">// 这不是废话吗。。其他类型也没有包含元素一说。</span>    <span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Type    <span class="token comment">// 返回 struct 类型的第 i 个字段，不是 struct 会 panic，i 越界也会 panic</span>    <span class="token function">Field</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> StructField    <span class="token comment">// 跟上边一样，不过是嵌套调用的，比如 [1, 2] 就是说返回当前 struct 的第1个struct 的第2个字段，适用于 struct 本身嵌套的类型</span>    <span class="token function">FieldByIndex</span><span class="token punctuation">(</span>index <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> StructField    <span class="token comment">// 按名字找 struct 字段，第二个返回值 ok 表示有没有</span>    <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>StructField<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment">// 按函数名找 struct 字段，因为 struct 里也可能有类型是 func 的嘛</span>    <span class="token function">FieldByNameFunc</span><span class="token punctuation">(</span>match <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>StructField<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>        <span class="token comment">// 返回函数第 i 个参数的类型，不是 func 会 panic</span>    <span class="token function">In</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Type    <span class="token comment">// 返回 map 的 key 的类型，不是 map 会 panic</span>    <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Type    <span class="token comment">// 返回 array 的长度，不是 array 会 panic</span>    <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 返回 struct 字段数量，不是 struct 会 panic</span>    <span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 返回函数的参数数量，不是 func 会 panic</span>    <span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 返回函数的返回值数量，不是 func 会 panic</span>    <span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token comment">// 返回函数第 i 个返回值的类型，不是 func 会 panic</span>    <span class="token function">Out</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Type<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Value结构体"><a href="#Value结构体" class="headerlink" title="Value结构体"></a>Value结构体</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 反射出来此值的类型，rtype 是啥往上看，但可别弄错了，这 typ 是未导出的，从外部调不到 Type 接口的方法</span>    typ <span class="token operator">*</span>rtype    <span class="token comment">// 数据形式的指针值</span>    ptr unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment">// 保存元数据</span>    flag<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 前提 v 是一个 func，然后调用 v，并传入 in 参数，第一个参数是 in[0]，第二个是 in[1]，以此类推</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>in <span class="token punctuation">[</span><span class="token punctuation">]</span>Value<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Value<span class="token comment">// 返回 v 的接口值或者指针</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Value<span class="token comment">// 前提 v 是一个 struct，返回第 i 个字段，这个主要用于遍历</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Field</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Value<span class="token comment">// 前提 v 是一个 struct，根据字段名直接定位返回</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">FieldByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> Value<span class="token comment">// 前提 v 是 Array, Slice, String 之一，返回第 i 个元素，主要也是用于遍历，注意不能越界</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Index</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> Value<span class="token comment">// 判断 v 是不是 nil，只有 chan, func, interface, map, pointer, slice 可以用，其他类型会 panic</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">// 判断 v 是否合法，如果返回 false，那么除了 String() 以外的其他方法调用都会 panic，事前检查是必要的</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">// 前提 v 是个 map，返回对应 value</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">MapIndex</span><span class="token punctuation">(</span>key Value<span class="token punctuation">)</span><span class="token comment">// 前提 v 是个 map，返回所有 key 组成的一个 slice</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">MapKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Value<span class="token comment">// 前提 v 是个 struct，返回字段个数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">// 赋值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>x Value<span class="token punctuation">)</span><span class="token comment">// 类型</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析结构体标签"><a href="#解析结构体标签" class="headerlink" title="解析结构体标签"></a>解析结构体标签</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> resume <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span> <span class="token string">`info:"name" doc:"我的名字"`</span> <span class="token comment">//no comma</span>Sex  <span class="token builtin">string</span> <span class="token string">`info:"sex"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">findTag</span><span class="token punctuation">(</span>str <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>taginfo <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>tagdoc <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"doc"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"info: "</span><span class="token punctuation">,</span> taginfo<span class="token punctuation">,</span> <span class="token string">" doc: "</span><span class="token punctuation">,</span> tagdoc<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> re resume<span class="token function">findTag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>re<span class="token punctuation">)</span><span class="token comment">//参数为接口，即指针</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体标签再json中的应用"><a href="#结构体标签再json中的应用" class="headerlink" title="结构体标签再json中的应用"></a>结构体标签再json中的应用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Movie <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title  <span class="token builtin">string</span>   <span class="token string">`json:"title"`</span> <span class="token comment">//等价于表字段名</span>Year   <span class="token builtin">int</span>      <span class="token string">`json:"year"`</span>Price  <span class="token builtin">int</span>      <span class="token string">`json:"rmb"`</span>Actors <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"actors"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>movie <span class="token operator">:=</span> Movie<span class="token punctuation">&#123;</span><span class="token string">"喜剧之王"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"xingye"</span><span class="token punctuation">,</span> <span class="token string">"zhangbozhi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//编码的过程  结构体---> json</span>jsonStr<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json marshal error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"jsonStr = %s\n"</span><span class="token punctuation">,</span> jsonStr<span class="token punctuation">)</span><span class="token comment">//解码的过程 jsonstr ---> 结构体</span><span class="token comment">//jsonStr = &#123;"title":"喜剧之王","year":2000,"rmb":10,"actors":["xingye","zhangbozhi"]&#125;</span>myMovie <span class="token operator">:=</span> Movie<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myMovie<span class="token punctuation">)</span><span class="token comment">//结构体引用传递</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json unmarshal error "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> myMovie<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang结构体，类与接口</title>
      <link href="/2021/10/14/Golang%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%8C%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/10/14/Golang%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%8C%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><ul><li>值传递，func change(book1 *Book)</li><li>this使用对象的副本，(this *Book)引用传递减少内存使用</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> num <span class="token builtin">int</span><span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">//可被访问</span>Title <span class="token builtin">string</span><span class="token comment">//共有</span>author <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">changeBook1</span><span class="token punctuation">(</span>book Book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>book<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">changeBook2</span><span class="token punctuation">(</span>book <span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>book<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>this<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token function">GetTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>String<span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>Title<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Book<span class="token punctuation">)</span><span class="token function">SetTitle</span><span class="token punctuation">(</span>title <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    this<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">//main.num</span><span class="token keyword">var</span> book1 Bookbook1<span class="token punctuation">.</span>Title<span class="token operator">=</span><span class="token string">"Golang"</span>book1<span class="token punctuation">.</span>author<span class="token operator">=</span><span class="token string">"L"</span>        book2 <span class="token operator">:=</span> Book<span class="token punctuation">&#123;</span> Title <span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> author <span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">&#125;</span><span class="token comment">//comma</span>    <span class="token comment">//book3 := Book&#123; "cpp", "tan"&#125; 定义一个复合类时，只能使用该方法</span><span class="token function">changeBook1</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span>book1<span class="token punctuation">)</span><span class="token function">changeBook2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span>book1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/14/3mO1VDSbpJLUviQ.png" style="zoom:67%;" /><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>gender <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Human<span class="token punctuation">)</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"%s eats"</span><span class="token punctuation">,</span>this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Human<span class="token punctuation">)</span><span class="token function">Walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"%s walks"</span><span class="token punctuation">,</span>this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> SuperHuman <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Human <span class="token comment">//继承</span>level <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>SuperHuman<span class="token punctuation">)</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d%s SuperHuman eats"</span><span class="token punctuation">,</span>this<span class="token punctuation">.</span>level<span class="token punctuation">,</span>this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s1 <span class="token operator">:=</span> SuperHuman<span class="token punctuation">&#123;</span>Human<span class="token punctuation">&#123;</span><span class="token string">"tan"</span><span class="token punctuation">,</span><span class="token string">"male"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token comment">//直接实例化复合类只能直接传参</span>s1<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h2 <span class="token operator">:=</span> Human<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"san"</span><span class="token punctuation">,</span>gender<span class="token punctuation">:</span> <span class="token string">"pan"</span><span class="token punctuation">&#125;</span>s2 <span class="token operator">:=</span> SuperHuman<span class="token punctuation">&#123;</span>Human<span class="token punctuation">:</span>h2<span class="token punctuation">,</span>level<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>s2<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>继承接口时，直接重写接口内的所有方法。否则接口的指针无法指向具体的类</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token comment">//本质上是一个指针</span><span class="token function">ShowColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>color <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>color <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Cat<span class="token punctuation">)</span><span class="token function">ShowColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cat's color is %s\n"</span><span class="token punctuation">,</span>this<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Cat<span class="token punctuation">)</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> this<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Dog<span class="token punctuation">)</span><span class="token function">ShowColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"dog's color is %s\n"</span><span class="token punctuation">,</span>this<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Dog<span class="token punctuation">)</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> this<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> ani Animal<span class="token comment">//接口的数据类型，父类指针</span> ani <span class="token operator">=</span> <span class="token operator">&amp;</span>Cat<span class="token punctuation">&#123;</span><span class="token string">"red"</span><span class="token punctuation">&#125;</span> ani<span class="token punctuation">.</span><span class="token function">ShowColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ani <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span><span class="token string">"purple"</span><span class="token punctuation">&#125;</span><span class="token comment">//多态</span> ani<span class="token punctuation">.</span><span class="token function">ShowColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="万能接口"><a href="#万能接口" class="headerlink" title="万能接口"></a>万能接口</h2><p><code>interface&#123;&#125;</code>通用万能类型</p><ul><li><p>空接口</p></li><li><p><code>int</code>,<code>string</code>,<code>float32</code>,<code>float64</code>,<code>struct</code>..实现了<code>interface&#123;&#125;</code></p></li><li><p>可以用<code>interface&#123;&#125;</code>类型引用任意数据的类型</p></li><li><p>value,ok:=arg.(string) <code>interface</code>独有的断言机制判断类型</p></li><li><p>可通过断言机制找到未知interface{}的值</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">test_int</span><span class="token punctuation">(</span>arg <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//万能数据类型</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"test_int is called"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token comment">//判断interface数据类型</span><span class="token comment">//给interface&#123;&#125;提供类型断言机制</span>value <span class="token punctuation">,</span> ok <span class="token operator">:=</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//value的值为字符串或空字符串 </span><span class="token keyword">if</span> ok<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arg is %T type\n"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"arg is not %T type\n"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>title <span class="token builtin">string</span>author <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test_int</span><span class="token punctuation">(</span>Book<span class="token punctuation">&#123;</span><span class="token string">"Golang"</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test_int</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token function">test_int</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token function">test_int</span><span class="token punctuation">(</span><span class="token number">52.23</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang数组和map</title>
      <link href="/2021/10/13/Golang%E6%95%B0%E7%BB%84%E5%92%8Cmap/"/>
      <url>/2021/10/13/Golang%E6%95%B0%E7%BB%84%E5%92%8Cmap/</url>
      
        <content type="html"><![CDATA[<h2 id="Golang数组与动态数组"><a href="#Golang数组与动态数组" class="headerlink" title="Golang数组与动态数组"></a>Golang数组与动态数组</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>数组默认值为0</li><li>range &lt;array&gt; 返回索引和值</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义初始化数组</span><span class="token comment">//var array1 [5]int</span>array2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//range遍历数组</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> array2<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h4><ul><li>将动态数组传入函数时<ul><li>数组大小实参不受限</li><li>数组值修改后原数组同步修改</li><li>动态数组无默认值</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">package main<span class="token keyword">import</span> <span class="token string">"fmt"</span>func NOprintArray<span class="token punctuation">(</span>array <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>func printArray<span class="token punctuation">(</span>array <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">//</span>引用传递    <span class="token operator">//</span>_表示匿名变量<span class="token keyword">for</span> _<span class="token punctuation">,</span>value <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token builtin">range</span> array<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span>Println<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>func main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>array <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token operator">//</span>动态数组，切片<span class="token builtin">slice</span>printArray<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><pre class="line-numbers language-none"><code class="language-none">In Go language slice is more powerful, flexible, convenient than an array, and is a lightweight data structure. Slice is a variable-length sequence which stores elements of a similar type, you are not allowed to store different type of elements in the same slice. It is just like an array having an index value and length, but the size of the slice is resized they are not in fixed-size just like an array. Internally, slice and an array are connected with each other, a slice is a reference to an underlying array. It is allowed to store duplicate elements in the slice. <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="slice定义方式"><a href="#slice定义方式" class="headerlink" title="slice定义方式"></a>slice定义方式</h3><ul><li>slice应该先分布动态空间，后赋值</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明slice(没有内存空间)</span>    <span class="token comment">//var array []int</span>    <span class="token comment">//array := []int&#123;&#125;</span>        <span class="token comment">//声明时分配空间</span><span class="token keyword">var</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>    array2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> array3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>array4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">//已声明的slice分配空间</span>array5 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>array5 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//for _,value := range array1，2，3，4&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> array1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array1 is a empty slice"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array1 isn't a empty slice"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d array2=%v"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">,</span>array2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="slice切片追加"><a href="#slice切片追加" class="headerlink" title="slice切片追加"></a>slice切片追加</h3><h4 id="slice容量-capacity"><a href="#slice容量-capacity" class="headerlink" title="slice容量(capacity)"></a>slice容量(capacity)</h4><ul><li>底层已经开辟好空间，但不可以合法访问(len)</li><li>容量满后，再追加元素。会开辟cap大小的容量。切片太大时，将尝试开辟1/4大cap</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>array <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    array <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d array=%v"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/13/1mgYvyHCb6fzPJp.png" style="zoom:50%;" /><h3 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h3><ul><li>左闭右开</li><li>动态截取(浅拷贝)。切片元素值改变后，片段中的值也改变</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="map的定义"><a href="#map的定义" class="headerlink" title="map的定义"></a>map的定义</h2><p><code>map1 := make(map[string]string)</code> 即可</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明slice(没有内存空间)</span>    <span class="token comment">//var map1 map[string]string</span>    <span class="token comment">//map := map[string]string&#123;&#125;</span>        <span class="token comment">//声明时分配空间</span>    <span class="token keyword">var</span> map1 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>        <span class="token string">"1"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span>        <span class="token string">"2"</span><span class="token punctuation">:</span><span class="token string">"Golang"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    map2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>        <span class="token string">"3"</span><span class="token punctuation">:</span><span class="token string">"python"</span>        <span class="token string">"4"</span><span class="token punctuation">:</span><span class="token string">"C++"</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">var</span> map3 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    map4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment">//已声明的map分配空间</span>    map5 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    map5 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span>map2<span class="token punctuation">,</span>map3<span class="token punctuation">,</span>map4<span class="token punctuation">,</span>map5<span class="token punctuation">)</span>        <span class="token comment">//检查map是否为空</span>    <span class="token keyword">var</span> map6 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">if</span> map6 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map6 is empty"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">//map引用传递</span><span class="token keyword">func</span> <span class="token function">changeValue</span><span class="token punctuation">(</span>map1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map1<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>        <span class="token comment">//添加</span>    map1<span class="token punctuation">[</span><span class="token string">"lan"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"sen"</span>    map1<span class="token punctuation">[</span><span class="token string">"tan"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"ren"</span>        <span class="token comment">//删除键值对</span>    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">,</span><span class="token string">"lan"</span><span class="token punctuation">)</span>        <span class="token comment">//修改键值对</span>    map1<span class="token punctuation">[</span><span class="token string">"tam"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"qen"</span>            <span class="token comment">//遍历</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> map1<span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">"value = "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法Day1】Fizz-Buzz</title>
      <link href="/2021/10/13/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day1%E3%80%91Fizz-Buzz/"/>
      <url>/2021/10/13/%E3%80%90%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95Day1%E3%80%91Fizz-Buzz/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/fizz-buzz/">LeetCode198.Fizz Buzz</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：</p><blockquote><p>answer[i] == “FizzBuzz” 如果 i 同时是 3 和 5 的倍数。<br>answer[i] == “Fizz” 如果 i 是 3 的倍数。<br>answer[i] == “Buzz” 如果 i 是 5 的倍数。<br>answer[i] == i 如果上述条件全不满足。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 3输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 5输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 15输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;,&quot;Fizz&quot;,&quot;7&quot;,&quot;8&quot;,&quot;Fizz&quot;,&quot;Buzz&quot;,&quot;11&quot;,&quot;Fizz&quot;,&quot;13&quot;,&quot;14&quot;,&quot;FizzBuzz&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><pre class="line-numbers language-none"><code class="language-none">1 &lt;&#x3D; n &lt;&#x3D; 104<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>如果 i 是 3 的倍数，Fizz</p><p>如果 i 是 5 的倍数，Buzz</p><p>如果 i 同时是 3 和 5 的倍数，先加Fizz后加Buzz</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            str<span class="token operator">+=</span><span class="token string">"Fizz"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            str<span class="token operator">+=</span><span class="token string">"Buzz"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//优于if(i%3&amp;&amp;i%5)</span>            str<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>strs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>str <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>str <span class="token operator">=</span> <span class="token string">"Fizz"</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>str <span class="token operator">+=</span> <span class="token string">"Buzz"</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> str <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">&#123;</span>            str<span class="token operator">=</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//优于Springf("%d",i)</span><span class="token punctuation">&#125;</span>strs<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> strs<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang行情，变量，常量，导包与指针</title>
      <link href="/2021/10/13/Golang%E8%A1%8C%E6%83%85%EF%BC%8C%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%EF%BC%8C%E5%AF%BC%E5%8C%85%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>/2021/10/13/Golang%E8%A1%8C%E6%83%85%EF%BC%8C%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%EF%BC%8C%E5%AF%BC%E5%8C%85%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Golang行情"><a href="#Golang行情" class="headerlink" title="Golang行情"></a>Golang行情</h2><p><img src="https://i.loli.net/2021/10/18/I5EaU7PZyDOBSrF.png"></p><h3 id="Golang的优势"><a href="#Golang的优势" class="headerlink" title="Golang的优势"></a>Golang的优势</h3><ul><li><p>极简部署方式</p><ul><li>可直接编译成机器码</li><li>不依赖其他库</li><li>直接运行即可部署</li></ul></li><li><p>静态类型语言</p><ul><li>编译的时候检查出来隐藏的大多数问题</li></ul></li><li><p>语言层面的并发</p><ul><li>不通过外层包装，原生支持并发</li></ul><ul><li>充分利用多核</li></ul></li><li><p>强大的标准库</p><ul><li>runtime系统调度机制(垃圾回收，资源平均分配)</li><li>高效GC垃圾回收</li><li>丰富的标准库</li></ul></li><li><p>简单易学</p><ul><li>25个关键字</li><li>内嵌C语法支持</li><li>面向对象(继承、多态、封装)</li></ul></li></ul><h3 id="Golang的不足"><a href="#Golang的不足" class="headerlink" title="Golang的不足"></a>Golang的不足</h3><ul><li>大部分包管理在github上</li><li>无泛化</li><li>所有的Exception都用Error来处理</li><li>对C的降级，并非无缝。没有降级到asm那么完美</li></ul><h2 id="Golang第一个程序-letsgo"><a href="#Golang第一个程序-letsgo" class="headerlink" title="Golang第一个程序:letsgo"></a>Golang第一个程序:letsgo</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment">//含有main函数的包，包名不需要与项目名和文件名相同</span><span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">//import "fmt"</span><span class="token comment">// import "time"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//左花括号不换行 </span>    <span class="token comment">//golang表达式，';'可加可不加，建议不加</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"letsgo"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>go run letsgo.go</code> 编译运行</p><p><code>go build letsgo.go</code> 编译，同级目录下生成可执行文件<code>letsgo</code></p><h2 id="Golang四种变量声明方式与多变声明方式"><a href="#Golang四种变量声明方式与多变声明方式" class="headerlink" title="Golang四种变量声明方式与多变声明方式"></a>Golang四种变量声明方式与多变声明方式</h2><img src="https://i.loli.net/2021/10/14/ZJ9mAFICQdvOygW.png" style="zoom:40%;" /><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法一：声明一个变量，默认值是0</span>    <span class="token keyword">var</span> v1 <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v1 = "</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of v1 is %T\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span>    <span class="token comment">//方法二：声明一个变量，初始化一个值</span><span class="token keyword">var</span> v2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v2 = "</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of v2 is %T\n"</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token comment">//方法三：在初始化的时候，省去数据类型，通过值自动匹配当前变量的数据类型</span><span class="token keyword">var</span> v3 <span class="token operator">=</span> <span class="token string">"str"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v3 = "</span><span class="token punctuation">,</span>v3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of v3 = %T\n"</span><span class="token punctuation">,</span>v3<span class="token punctuation">)</span>    <span class="token comment">//方式四：省去var关键字，直接自动匹配</span>    <span class="token comment">//:=只能放在函数体内声明，不支持全局变量</span>v4<span class="token operator">:=</span><span class="token string">"str"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v4 = "</span><span class="token punctuation">,</span>v4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of v4 = %T\n"</span><span class="token punctuation">,</span>v4<span class="token punctuation">)</span>        <span class="token comment">//声明多个变量</span>        <span class="token comment">//多行的多变量声明</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="const与iota"><a href="#const与iota" class="headerlink" title="const与iota"></a>const与iota</h2><ul><li><code>iota</code>只能配<code>const()</code>使用</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> con <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span><span class="token punctuation">(</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span><span class="token operator">+</span><span class="token number">2</span>    c<span class="token punctuation">,</span> d    e<span class="token punctuation">,</span> f        g<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">iota</span><span class="token operator">*</span><span class="token number">20</span>    l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Golang函数多返回值三种写法"><a href="#Golang函数多返回值三种写法" class="headerlink" title="Golang函数多返回值三种写法"></a>Golang函数多返回值三种写法</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c <span class="token builtin">string</span><span class="token punctuation">,</span> d <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token operator">=</span>ad<span class="token operator">=</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> <span class="token comment">//或return c, d</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">test3</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token operator">=</span>af<span class="token operator">=</span>b<span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token string">"san6"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token string">"san6"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="import导包"><a href="#import导包" class="headerlink" title="import导包"></a>import导包</h2><ul><li><p>函数和变量首字母大写时，表示是对外开放的</p></li><li><p>init()早于main()</p></li><li><p>Golang导入的包必须使用，否则会报错</p></li></ul><h3 id="init导包路径与init方法调用流程"><a href="#init导包路径与init方法调用流程" class="headerlink" title="init导包路径与init方法调用流程"></a>init导包路径与init方法调用流程</h3><img src="https://i.loli.net/2021/10/13/Vptri84PITjSYUX.png" style="zoom:83%;" /><img src="https://i.loli.net/2021/10/13/YiB3UTOZ8VDQRdo.png" style="zoom:50%;" /><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// demo1/lib1/lib1.go go从ROOT和PATH下找包</span><span class="token keyword">package</span> lib1<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"lib1 init()..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Lib1func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"lib1func()..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// demo1/letsgo.go </span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"demo1/lib1"</span><span class="token string">"demo1/lib2"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main()..."</span><span class="token punctuation">)</span>lib1<span class="token punctuation">.</span><span class="token function">Lib1func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>lib2<span class="token punctuation">.</span><span class="token function">Lib2func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="import匿名及别名导包方式"><a href="#import匿名及别名导包方式" class="headerlink" title="import匿名及别名导包方式"></a>import匿名及别名导包方式</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token boolean">_</span><span class="token string">"lib1"</span> <span class="token comment">//匿名导包。无法使用包内方法，但是会调用包的init()方法</span>    l1 <span class="token string">"lib2"</span> <span class="token comment">//给包起一个别名，l1.show()来直接调用</span>    <span class="token punctuation">.</span><span class="token string">"lib3"</span> <span class="token comment">//把包内方法全部导入本包中，包括非公开方法</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Golang指针"><a href="#Golang指针" class="headerlink" title="Golang指针"></a>Golang指针</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token operator">*</span>b<span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">-</span> <span class="token operator">*</span>b<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">" b = "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="defer语句调用顺序"><a href="#defer语句调用顺序" class="headerlink" title="defer语句调用顺序"></a>defer语句调用顺序</h2><ul><li>方法执行周期结束时，执行defer语句</li><li>多个defer语句存在，以压栈形式执行</li><li>return属于方法执行周期，先于defer执行</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> mainimport <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">deferfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"deferfunc1() called"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">deferfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"deferfunc2() called"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">returnfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returnfunc() called"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">defertest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token function">deferfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">deferfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">returnfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">defertest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django项目部署</title>
      <link href="/2021/10/12/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/10/12/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><p>项目部署是指在软件开发完毕后，将开发机器上运行的软件实际安装到服务器上进行长期运行</p><ul><li>在安装机器上安装和配置同版本的环境［py，数据库等］</li><li>django 项目迁移</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo scp&#x2F;home&#x2F;tarena&#x2F;django&#x2F;mysite1 root@88.77.66.55:&#x2F;home&#x2F;root&#x2F;xxx 请输入root密码：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>用uWSGI替代 python3 manage.py runserver 方法启动服务器</p></li><li><p>配置nginx反向代理服务器</p></li><li><p>用nginx配置静态文件路径，解决静态路径问题</p></li></ul><h1 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h1><p>uWSGI认识http,websocket等</p><img src="https://i.loli.net/2021/10/12/hmY4eVbrncEd5Ag.png" style="zoom:80%;" /><h2 id="WSGI定义"><a href="#WSGI定义" class="headerlink" title="WSGI定义"></a>WSGI定义</h2><p>WSGI （Web Server Gateway Interface）Web服务器网关接口，是</p><p>Python应用程序或框架和Web服务器之间的一种接口，被广泛使用</p><p>使用<code>python manage.py runserver</code>通常只在开发和测试环境中使用</p><p>当开发结束后，完善的项目代码需要在一个高效稳定的环境中运行</p><p>这时可以使用WSGI</p><h2 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h2><p>uWSGI是WSGI的一种，它实现了<code>http协议</code>，<code>WSGI协议</code>以及<font color='red'><code>uwsgi协议</code></font></p><p>uWSGI功能完善，支持协议众多，在python web圈热度极高</p><p><strong>uWSGI主要以学习配置为主</strong></p><h3 id="配置uWSGI"><a href="#配置uWSGI" class="headerlink" title="配置uWSGI"></a>配置uWSGI</h3><h4 id="下载uWSGI"><a href="#下载uWSGI" class="headerlink" title="下载uWSGI"></a>下载uWSGI</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pip3 install uwsgi&#x3D;&#x3D;2.0.18 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pip3 freeze|grep -i &#39;uwsgi&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://i.loli.net/2021/10/12/oLtanq7yWlsehH3.png" style="zoom:60%;" /><h4 id="Django中配置"><a href="#Django中配置" class="headerlink" title="Django中配置"></a>Django中配置</h4><p>添加配置文件uwsgi.ini 如: <code>mysite/mysite/uwsgi.ini</code></p><p><code>uwsig.ini</code>文件以<code>[uwsgi]</code>开头，有如下配置项：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>uwsgi<span class="token punctuation">]</span>http<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span> <span class="token comment">#Http通信方式的IP地址</span><span class="token comment">#socket=127.0.0.1:8000 #套接字方式的IP地址(二进制)</span>chdir<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>bai<span class="token operator">/</span>project<span class="token operator">/</span>Django<span class="token operator">/</span>mysite <span class="token comment">#项目工作当前目录</span>wsgi<span class="token operator">-</span><span class="token builtin">file</span><span class="token operator">=</span>mysite<span class="token operator">/</span>wsgi<span class="token punctuation">.</span>py <span class="token comment">#项目中wsgi</span>process<span class="token operator">=</span><span class="token number">4</span> <span class="token comment">#进程个数，实际进程数与cpu核数有关</span>threads<span class="token operator">=</span><span class="token number">2</span> <span class="token comment">#每个进程中线程个数</span>pidfile<span class="token operator">=</span>uwsgi<span class="token punctuation">.</span>pid <span class="token comment">#服务的pid记录文件 自动生成</span>daemonize<span class="token operator">=</span>uwsgi<span class="token punctuation">.</span>log <span class="token comment">#服务的日志文件位置 自动生成</span>master<span class="token operator">=</span><span class="token boolean">True</span> <span class="token comment">#开启主进程管理模式 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h4><p>Django的settings.py需要做如下配置</p><ul><li><code>DEBUG=False</code> 正式上线，用户无法看到报错信息</li><li><code>ALLOWED_HOSTS=[网站域名]或者[服务监听的ip地址] </code> host头，公网ip</li></ul><h3 id="启动与停止uWSGI"><a href="#启动与停止uWSGI" class="headerlink" title="启动与停止uWSGI"></a>启动与停止uWSGI</h3><ul><li>启动uWSGI</li></ul><ol><li><code>cd ~project/Django/mysite</code>  进入uWSGI配置文件所在目录</li><li><code>uwsgi --ini uwsgi.ini</code> 启动uwsgi</li></ol><ul><li>停止uWSGI</li></ul><ol><li><code>cd ~project/Django/mysite</code> 进入uWSGI配置文件所在目录</li><li><code>uwsgi --stop uwsgi.pip</code></li></ol><ul><li>检查是否成功启动</li></ul><p><code>ps aux|grep &#39;uwsgi&#39;</code></p><img src="https://i.loli.net/2021/10/12/WOInlkLVP4H3Daw.png" style="zoom:30%;" /><ul><li>uWSGI启动成功后，<code>wsgi.py</code>同级目录下生成<code>uwsgi.ini</code>和<code>uwsgi.pid</code>文件</li></ul><h3 id="uWSGI的运行说明"><a href="#uWSGI的运行说明" class="headerlink" title="uWSGI的运行说明"></a>uWSGI的运行说明</h3><p>1，无论是启动还是关闭，都需要执行<code>ps aux|grep &#39;uwsgi&#39;</code>确认是否符合预期</p><p>2，启动成功后，进程在后台执行，所有日志均输出在配置文件所在目录的<code>uwsgi.log</code>中</p><p>3， <font color='red'>Django中代码有任何修改，需要重新启动uwsgi</font></p><h3 id="uWSGI测试"><a href="#uWSGI测试" class="headerlink" title="uWSGI测试"></a>uWSGI测试</h3><p><code>http://127.0.0.1:8000/路由</code> 进行测试。此时端口8000被uWSGI进程监听，并非runserver</p><p>如果当前有预期结果返回，则uWSGI启动成功</p><h3 id="uWSGI问题汇总"><a href="#uWSGI问题汇总" class="headerlink" title="uWSGI问题汇总"></a>uWSGI问题汇总</h3><ul><li>端口被占用<ul><li><code>sudo lsof -i:端口号</code> 查询PID号</li><li><code>sudo kill -9 PID号</code></li></ul></li><li>找不到项目<ul><li>settings.py中路径配置错误</li></ul></li><li><code>uwsgi --stop uwsgi.ini</code>无法关闭uWSGI(no such process)<ul><li>重复启动uWSGI，导致pid文件中的进程号失准</li><li><code>cat uwsgi.pid</code> 查看uWSGI使用进程号</li><li><code>sudo kill -9 进程号 </code></li></ul></li></ul><img src="https://i.loli.net/2021/10/12/PYRhS9ywMdslA1k.png" style="zoom:67%;" /><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p><img src="https://i.loli.net/2021/10/12/WalF5AEiY1Nck7B.png"></p><ul><li>uWSGI默认的启动模式是http模式。nginx可以将uwsgi分发给uWSGI，使其处理速度更快</li><li>nginx监听80端口，uWSGI监听8000端口</li><li>由于nginx监听80端口，测试时直接用<code>http://127.0.0.1/test_nginx</code></li></ul><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><ul><li><p>Nginx是轻量级的高性能Web服务器，提供了诸如<strong>HTTP代理</strong>和<strong>反向代理</strong>、<strong>负载均衡</strong>等一系列重要特性</p></li><li><p>C语言编写，执行效率高</p></li><li><p>nginx 作用</p><ul><li>负载均衡，多台服务器轮流处理请求</li><li>反向代理</li></ul></li><li><p>原理：</p><ul><li>客户端请求nginx，再由nginx将请求转发uWSGI运行的django</li></ul></li></ul><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><ol><li><code>sudo apt install nginx</code></li><li><code>nginx -v</code>检查nginx是否安装成功</li></ol><img src="https://i.loli.net/2021/10/12/47zyJaeXvBPrUA1.png" style="zoom:50%;" /><h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><ol><li>修改配置文件 <code>sudo vim /etc/nginx/sites-enabled/default</code> </li><li>在location/{}内添加配置</li><li>禁掉默认开启的<code>try_file</code></li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">uwsgi_pass</span> 127.0.0.1:8000</span><span class="token punctuation">;</span> <span class="token comment">#所有/开头的请求，皆以uwsgi发送到8000端口</span>       <span class="token directive"><span class="token keyword">include</span> /etc/nginx/uwsgi_params</span><span class="token punctuation">;</span> <span class="token comment">#我们使用了uwsgi协议，则需要引入nginx下uwsgi的一些参数</span>       <span class="token comment">#try_files $uri $uri/ =404; #404时到root查找html文件</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx启动-停止"><a href="#nginx启动-停止" class="headerlink" title="nginx启动/停止"></a>nginx启动/停止</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start|stop|restart|status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo service nginx start|stop|restart|status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动 <code>sudo /etc/init.d/nginx start</code></li><li>停止 <code>sudo /etc/init.d/nginx stop</code></li><li>重启 <code>sudo /etc/init.d/nginx restart</code></li></ul><p>注意：nginx配置只要修改，就需要进行重启，否则配置不生效 </p><h3 id="修改uWSGI启动方式"><a href="#修改uWSGI启动方式" class="headerlink" title="修改uWSGI启动方式"></a>修改uWSGI启动方式</h3><p>nginx负责接收请求，并把请求通过http或uwsgi转发给uWSGI。uwsgi为二进制，uWSGI速度更快</p><ol><li>修改uWSGI启动方式为uwsgi</li></ol><pre class="line-numbers language-none"><code class="language-none">#uwsgi.ini[uwsgi]#http&#x3D;127.0.0.1:8000 #Http方式的IP地址socket&#x3D;127.0.0.1:8000 #套接字方式的IP地址(二进制)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>重启uwsgi</li></ol><p><code>cd ~project/Django/mysite</code> </p><p><code>uwsgi --stop uwsgi.pid</code> </p><p><code>uwsgi --ini uwsgi.ini</code> </p><p><code>ps aux|grep &#39;uwsgi&#39;</code></p><h2 id="nginx-uWSGI排错"><a href="#nginx-uWSGI排错" class="headerlink" title="nginx+uWSGI排错"></a>nginx+uWSGI排错</h2><p>排查问题宗旨 ：<font color='red'><strong>出错后看日志</strong></font></p><h3 id="nginx-uWSGI常见错误"><a href="#nginx-uWSGI常见错误" class="headerlink" title="nginx+uWSGI常见错误"></a>nginx+uWSGI常见错误</h3><h4 id="错误日志位置"><a href="#错误日志位置" class="headerlink" title="错误日志位置"></a>错误日志位置</h4><h5 id="nginx日志位置"><a href="#nginx日志位置" class="headerlink" title="nginx日志位置"></a>nginx日志位置</h5><p>异常信息<code>/var/log/nginx/error.log</code></p><p>正常访问信息<code>var/log/nginx/access.log</code></p><img src="https://i.loli.net/2021/10/12/khCw2KjS4mPQEv9.png" style="zoom:33%;" /><h5 id="uwsgi日志位置"><a href="#uwsgi日志位置" class="headerlink" title="uwsgi日志位置"></a>uwsgi日志位置</h5><p>django项目同名目录下 <code>uwsgi.log</code></p><h4 id="错误及原因"><a href="#错误及原因" class="headerlink" title="错误及原因"></a>错误及原因</h4><ul><li><p>访问127.0.0.1:80地址  <code>502响应</code></p><ul><li>502响应代表nginx反向代理配置成功，但是对应的uWSGI未启动</li></ul></li><li><p>访问127.0.0.1:80/url  <code>404响应</code></p><ul><li><p>路由的确不在django配置中</p></li><li><p>nginx配置错误,未禁止掉tryfiles</p></li></ul></li></ul><h2 id="nginx静态文件配置"><a href="#nginx静态文件配置" class="headerlink" title="nginx静态文件配置"></a>nginx静态文件配置</h2><ul><li><font color='red'>nginxs用C语言写成，加载静态文件的效率会高于Django</font></li><li><font color='red'><strong>配置完后admin中的css,js,img文件正常加载</strong></font>,开发者模式<code>response header</code>中看到默认开启<code>ETag</code>，<code>Last-Modified</code></li><li>只要djnago中有静态文件添加，就要执行<code>python3 manage.py collectstatic </code></li></ul><h3 id="静态文件配置步骤"><a href="#静态文件配置步骤" class="headerlink" title="静态文件配置步骤"></a>静态文件配置步骤</h3><ol><li>创建新路径:主要存放Django所有静态文件如：<code>~project/django/项目名＿static</code></li><li>在Django settings.py 中添加新配置</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">STATIC＿ROOT ＝<span class="token string">'~project/项目名＿static/static'</span><span class="token comment">#接一个static＃注意 此配置路径为 存放所有正式环境中需要的静态文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>进入项目，执行<code>python3 manage.py collectstatic </code>执行该命令后，Django将项目重所有静态文件 复制到<code>STATIC＿ROOT</code>中，包括Django内建的静态文件（比如admin的静态文件）</p></li><li><p>nginx中添加新location</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">sudo</span> vim /etc/nginx/sites-enabled/defaultserver</span><span class="token punctuation">&#123;</span>...<span class="token directive"><span class="token keyword">location</span> /static</span><span class="token punctuation">&#123;</span> <span class="token comment">#所有/static开头的请求,从该root下加载root ~proect/django/项目名_static;&#125;&#125;sudo /etc/init.d/nginx restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="404和500报错界面"><a href="#404和500报错界面" class="headerlink" title="404和500报错界面"></a>404和500报错界面</h1><h2 id="定义和配置"><a href="#定义和配置" class="headerlink" title="定义和配置"></a>定义和配置</h2><p>在模板文件夹内添加<code>404.html</code>模版，当视图触发<code>Http404</code>异常时将会</p><p>被显示</p><p>404.html 仅在发布版中（即<code>settings.py</code>中的DEBUG＝False时）才起作用</p><p>当向应。处理函数触发Http404异常时就会跳转到404界面</p><h1 id="Django邮箱报警"><a href="#Django邮箱报警" class="headerlink" title="Django邮箱报警"></a>Django邮箱报警</h1><h2 id="定义和配置-1"><a href="#定义和配置-1" class="headerlink" title="定义和配置"></a>定义和配置</h2><p>当正式服务器上代码运行有报错时，可将错误追溯信息发至指定的箱</p><p>settings.py中在基础邮箱授权后添加如下配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#关闭调试模式</span>DEBUG<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment">#错误报告接收方</span>ADMINS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">' pan'</span><span class="token punctuation">,</span> <span class="token string">'xxxx@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'lan'</span><span class="token punctuation">,</span> <span class="token string">'xxxx@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#发送错误报告方，默认为root@local host账户，多数邮件服务器会拒绝</span>SERVER_EMAIL <span class="token operator">=</span> <span class="token string">'email配置中的邮箱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过滤敏感信息"><a href="#过滤敏感信息" class="headerlink" title="过滤敏感信息"></a>过滤敏感信息</h2><p>报错邮件中会显示一些错误的追踪，这些错误追踪中会出现如password等敏感信息。Django已经将配置文件中的敏感信息过滤修改为多个星号，但是用户自定义的视图函数需要用户手动过滤敏感信息。Django可过滤<code>局部变量</code> 和<code>POST提交数据</code> </p><h3 id="过滤局部变量"><a href="#过滤局部变量" class="headerlink" title="过滤局部变量"></a>过滤局部变量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>debug <span class="token keyword">import</span> sensitive_variables<span class="token decorator annotation punctuation">@sensitive_variables</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'pw'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_email</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">:</span>    pw<span class="token operator">=</span>user<span class="token punctuation">.</span>pw    test<span class="token operator">=</span>user<span class="token punctuation">.</span>test    name<span class="token operator">=</span>user<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li><p>若报错邮件中牵扯到<code>user，pw，test</code>等局部变量的值，则会将其替换成* * * * *而 name变量还显示其真实值</p></li><li><p>多个装饰器时，需要将其放在最顶部</p></li><li><p>若不传参数，则过滤所有局部变量的值</p></li></ol><h3 id="过滤POST提交数据"><a href="#过滤POST提交数据" class="headerlink" title="过滤POST提交数据"></a>过滤POST提交数据</h3><img src="https://i.loli.net/2021/10/12/Io6dpjxaL9H7Puz.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django文件上传与发送邮件</title>
      <link href="/2021/10/12/Django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2021/10/12/Django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="上传规范"><a href="#上传规范" class="headerlink" title="上传规范"></a>上传规范</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li><p>POST提交</p></li><li><p><code>&lt;form action=&#39;&#39; method=&#39;post&#39; enctype=&quot;multipart/form-data&quot;</code></p></li><li><p><code>&lt;input type=&#39;file&#39; name=&#39;&#39;&gt;</code></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test_upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h4 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h4><p>视图函数中，用<code>request.FILES</code>取文件框的内容</p><p><code>fil=requets.FILES[&#39;表单定义的文件属性名&#39;]</code></p><ul><li>file绑定文件流对象</li><li>file.name文件名</li><li>file.file文件字节流数据</li></ul><h4 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h4><ul><li><p>用户上传的文件，统称为media资源</p></li><li><p><font color='red'>创建media文件夹</font></p></li><li><p>settings.py中配置<strong>访问路径</strong>的<strong>储存路径</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">MEDIA_URL <span class="token operator">=</span> <span class="token string">'/media/'</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'media'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="主路由中绑定MEDIA-URL和MEDIA-ROOT"><a href="#主路由中绑定MEDIA-URL和MEDIA-ROOT" class="headerlink" title="主路由中绑定MEDIA_URL和MEDIA_ROOT"></a>主路由中绑定<code>MEDIA_URL</code>和<code>MEDIA_ROOT</code></h4><ul><li>等价于做了<code>MEDIA_URL</code>开头的路由，接到请求后到<code>MEDIA_ROOT</code>查找资源</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>static <span class="token keyword">import</span> static<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns<span class="token operator">+=</span>static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_ULR <span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><h3 id="传统open写入"><a href="#传统open写入" class="headerlink" title="传统open写入"></a>传统open写入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@csrf_exempt</span><span class="token keyword">def</span> <span class="token function">test_upload</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_upload.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token operator">=</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>        file_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'upload file successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="借助ORM"><a href="#借助ORM" class="headerlink" title="借助ORM"></a>借助ORM</h3><ul><li>利用模型类中FileField字段，子目录为FileField的upload_to参数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># models.py</span><span class="token keyword">class</span> <span class="token class-name">File_data</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    file_data<span class="token operator">=</span>models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'picture'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#views.py</span><span class="token decorator annotation punctuation">@csrf_exempt</span><span class="token keyword">def</span> <span class="token function">test_upload</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_upload.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token operator">=</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>        file_name<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>name        File_data<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span>file_name<span class="token punctuation">,</span>file_data<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'upload file successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Django发送邮件"><a href="#Django发送邮件" class="headerlink" title="Django发送邮件"></a>Django发送邮件</h1><h2 id="邮件传输协议"><a href="#邮件传输协议" class="headerlink" title="邮件传输协议"></a>邮件传输协议</h2><p><img src="https://i.loli.net/2021/10/11/QfXjWB9qOhR4rTG.png"></p><h3 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h3><ul><li><p><code>Simple Mail Transfer Protocol</code>,即简单邮件传输协议（25号端口） </p></li><li><p>它是一组用于从<strong>源地址</strong>到<strong>目的地址</strong>传输邮件的规范，通过它来控制邮件的中转</p></li><li><p>属于“<strong>推送</strong>”协议</p></li></ul><h3 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h3><ul><li><p><code>Internet Mail Access Protocol</code>，即交互式邮件访问协议，是一个<font color='red'>应用层协议</font>（端口是143）</p></li><li><p>用来从本地邮件客户端（Outlook Express、Foxmail、Mozilla Thunderbird等）访问远程服务器上的邮件</p></li><li><p>属于“<strong>拉取</strong>”协议 </p></li></ul><h3 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h3><ul><li><p><code>Post Office Protocol 3</code>，即邮局协议的第3个版本，是TCP/IP协议族中的一员（默认端口是110）。</p></li><li><p>本协议主要用于支持使用客户端远程管理在服务器上的电子邮件</p></li><li><p>属于“<strong>拉取</strong>”协议</p></li></ul><p>IMAP协议 vs POP3协议</p><ul><li><p>两者均为“拉取”型协议，负责从邮件服务器中下载邮件</p></li><li><p>IMAP具备摘要浏览功能，可<strong>预览部分摘要</strong>，再下载整个邮件IMAP为双向协议，客户端操作可反馈给服务器(星标邮件)</p></li><li><p>POP3必须下载全部邮件，无摘要功能</p></li><li><p>POP3为单向协议，客户端操作无法同步服务器</p></li></ul><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>Django中配置邮件功能，主要为SMTP协议，负责发邮件</p><p>原理：</p><ul><li><p>给Django授权一个邮箱</p></li><li><p>Django用该邮箱给对应收件人发送邮件</p></li><li><p><code>django.core.mail</code>封装了电子邮件的自动发送SMTP协议</p></li></ul><h3 id="Django授权"><a href="#Django授权" class="headerlink" title="Django授权"></a>Django授权</h3><p>QQ邮箱授权码：设置-&gt;账户</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py</span>EMAIL_BACKEND <span class="token operator">=</span> <span class="token string">'django.core.mail.backends.smtp.EmailBackend'</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span> <span class="token comment"># 腾讯QQ邮箱 SMTP 服务器地址</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span>  <span class="token comment"># SMTP服务的端口号 或587</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">'bai62@qq.com'</span>  <span class="token comment"># 发送邮件的QQ邮箱</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxxxxxxx'</span>  <span class="token comment"># 在QQ邮箱->设置->帐户->“POP3/IMAP......服务” 里得到的在第三方登录QQ邮箱授权码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Django-中发送邮件"><a href="#Django-中发送邮件" class="headerlink" title="Django 中发送邮件"></a>Django 中发送邮件</h3><h4 id="视图函数-1"><a href="#视图函数-1" class="headerlink" title="视图函数"></a>视图函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_email</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>core <span class="token keyword">import</span> mail    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mail<span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span>            subject<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>  <span class="token comment"># 题目</span>            message<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>  <span class="token comment"># 消息内容</span>            from_email<span class="token operator">=</span><span class="token string">'xxxx@qq.com'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送者</span>            recipient_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'xxxx@qq.com'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="捕获异常，将其发送给开发者"><a href="#捕获异常，将其发送给开发者" class="headerlink" title="捕获异常，将其发送给开发者"></a>捕获异常，将其发送给开发者</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ExceptionMW</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mail<span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span>subject<span class="token operator">=</span><span class="token string">'mysite7报错啦~'</span><span class="token punctuation">,</span> message<span class="token operator">=</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>from_email<span class="token operator">=</span><span class="token string">'572708691@qq.com'</span><span class="token punctuation">,</span> recipient_list<span class="token operator">=</span>settings<span class="token punctuation">.</span>EX_EMAIL<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'---对不起 当前网页有点忙'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django内建用户系统</title>
      <link href="/2021/10/11/Django%E5%86%85%E5%BB%BA%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/11/Django%E5%86%85%E5%BB%BA%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Django内建用户系统"><a href="#Django内建用户系统" class="headerlink" title="Django内建用户系统"></a>Django内建用户系统</h1><ul><li>Django带有一个用户认证系统。它处理用户账号、组、权限、以及基于cookie的用户对话</li><li>用户可以直接使用Django自带的用户表</li><li><font color='red'><code>/login?next=add_note</code>可以使用GET，跳回登录前停留的界面</font></li></ul><h2 id="User表"><a href="#User表" class="headerlink" title="User表"></a>User表</h2><ul><li>Django项目<code>make migrations</code>和<code>migrate</code>后创建的<code>auto_user表</code></li></ul><h3 id="User表基本字段"><a href="#User表基本字段" class="headerlink" title="User表基本字段"></a>User表基本字段</h3><p><code>username</code>： 用户名。150个字符以内。可以包含数字和英文字符，以及_、@、+、.和-字符。不能为空，且必须唯一！<br><code>first_name</code>：歪果仁的first_name，在30个字符以内。可以为空。<br><code>last_name</code>：歪果仁的last_name，在150个字符以内。可以为空。<br><code>email</code>：邮箱。可以为空。<br><code>password</code>：密码。经过哈希过后的密码。<br><code>groups</code>：分组。一个用户可以属于多个分组，一个分组可以拥有多个用户。groups这个字段是跟Group的一个多对多的关系。<br><code>user_permissions</code>：权限。一个用户可以拥有多个权限，一个权限可以被多个用户所有用。和Permission属于一种多对多的关系。<br><code>is_staff</code>：是否可以进入到admin的站点。代表是否是员工。<br><code>is_active</code>：是否是可用的。对于一些想要删除账号的数据，我们设置这个值为False就可以了，而不是真正的从数据库中删除。<br><code>is_superuser</code>：是否是超级管理员。如果是超级管理员，那么拥有整个网站的所有权限。<br><code>last_login</code>：上次登录的时间。<br><code>date_joined</code>：账号创建的时间。</p><h2 id="基本模型操作"><a href="#基本模型操作" class="headerlink" title="基本模型操作"></a>基本模型操作</h2><h3 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h3><ul><li>密码经过哈希后存表  </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> Useruesr<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'san'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'san'</span><span class="token punctuation">)</span> <span class="token comment">#用户名和密码必须写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> Usersuperuesr<span class="token operator">=</span>User<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>create_superuser<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'tan'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'tan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><ul><li>使用伪删除</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">try</span><span class="token punctuation">:</span>    user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'san'</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>is_active<span class="token operator">=</span><span class="token boolean">False</span>    user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Deleting %s successfully'</span><span class="token operator">%</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed to delete %s'</span><span class="token operator">%</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验密码"><a href="#校验密码" class="headerlink" title="校验密码"></a>校验密码</h3><ul><li>若用户信息正确，返回用户对象。如果信息不正确，<code>authenticate(用户名,密码)</code>返回None</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token keyword">if</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'lan'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'lan'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lan exists'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>user<span class="token operator">=</span>user<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'lan'</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span><span class="token string">'Lan'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'modify password successfully'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fail to modify password '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录状态保持"><a href="#登录状态保持" class="headerlink" title="登录状态保持"></a>登录状态保持</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span>login<span class="token keyword">def</span> <span class="token function">stay_logged_in</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    user<span class="token operator">=</span>authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span>password<span class="token operator">=</span> password<span class="token punctuation">)</span>    login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验登录状态"><a href="#校验登录状态" class="headerlink" title="校验登录状态"></a>校验登录状态</h3><ul><li>使用<code>login_request</code>校验登录状态，若没有登录跳转到指定视图</li><li>settings.py中添加<code>LOGIN_URL=/login</code>,即未登录下的跳转地址</li><li>当前视图必须登录后才可访问</li><li>user对象可以直接通过<code>requets.uesr</code>获取</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">def</span> <span class="token function">verifying_login_status</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    user<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="取消登录状态"><a href="#取消登录状态" class="headerlink" title="取消登录状态"></a>取消登录状态</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> logout<span class="token keyword">def</span> <span class="token function">log_out</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/bai62/CloudCode/blob/master/Python/Django/beginner/%E5%86%85%E9%83%A8%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F.py">内部用户系统代码</a></p><h2 id="用户表扩展字段"><a href="#用户表扩展字段" class="headerlink" title="用户表扩展字段"></a>用户表扩展字段</h2><p>Q：当内建用户表字段不够用时，如何解决？</p><p>A：建立新表，关系映射到用户表或继承User类</p><h3 id="继承内建抽象类"><a href="#继承内建抽象类" class="headerlink" title="继承内建抽象类"></a>继承内建抽象类</h3><ol><li>添加内建抽象类</li><li>定义模型类，继承AbstractUser</li><li>setting.py中，添加<code>AUTH_USER_MODEL=应用名.类名</code></li></ol><p>注意：<font color='red'>此操作要在第一次Migrate之前进行</font></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django分页和生成csv文件</title>
      <link href="/2021/10/10/Django%E5%88%86%E9%A1%B5%E5%92%8C%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6/"/>
      <url>/2021/10/10/Django%E5%88%86%E9%A1%B5%E5%92%8C%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="分页定义"><a href="#分页定义" class="headerlink" title="分页定义"></a>分页定义</h2><ul><li><p>分页是指在web页面有大量数据显示，为了快速加载，在每个页面中只显示部分数据</p></li><li><p>优点</p><ul><li>方便用户阅读</li><li>减少数据提取量，减轻服务器压力</li></ul></li><li><p>Django提供了Paginnator类可以方便地实现分页功能</p></li></ul><h2 id="Paginator"><a href="#Paginator" class="headerlink" title="Paginator"></a>Paginator</h2><h3 id="Paginator对象"><a href="#Paginator对象" class="headerlink" title="Paginator对象"></a>Paginator对象</h3><p>负责整体管理分页数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginatorpaginator<span class="token operator">=</span>Paginator<span class="token punctuation">(</span>object_list<span class="token punctuation">,</span>per_page<span class="token punctuation">)</span> <span class="token comment">#可以接queryset</span><span class="token comment">#参数为数据对象列表和每页数据的个数</span>    <span class="token comment">#返回值为Paginator对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Paginator对象属性"><a href="#Paginator对象属性" class="headerlink" title="Paginator对象属性"></a>Paginator对象属性</h3><ul><li>count：数据对象总数</li><li>num_pages：总页数</li><li><font color='red'>page_range：</font>范围为<code>第一页到最后页</code>的页码值的range对象</li></ul><img src="https://i.loli.net/2021/10/10/amiXfpIJKDhMTZv.png" style="zoom:70%;" /><ul><li>per_page：每页数据的个数</li></ul><h3 id="Paginator对象方法"><a href="#Paginator对象方法" class="headerlink" title="Paginator对象方法"></a>Paginator对象方法</h3><h4 id="page-number"><a href="#page-number" class="headerlink" title="page(number)"></a><code>page(number)</code></h4><p>参数number为页码信息(从1开始)</p><p>返回值：当前页对应的信息</p><p>如果页面不存在，抛出<code>InvalidPage</code>异常</p><ul><li><code>InvalidPage</code>：总的异常基类，包含以下两个异常子类<ul><li><code>PageNotAnlnteger</code>： 当向page()传入一个不是整数的值时抛出</li><li><code>EmptyPage</code>：当向page()提供一个<strong>有效值</strong>，但是那个页面上没有任何对象时抛出</li></ul></li></ul><h2 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h2><p>创建对象：<code>paginator.page(页码)</code></p><h3 id="page对象属性"><a href="#page对象属性" class="headerlink" title="page对象属性"></a>page对象属性</h3><ul><li><p>objectlist：当前页上所有数据对象的<strong>列表</strong></p></li><li><p>number：当前页的序号，从1开始</p></li><li><p>paginator：当前page对象相关的Paginator对象</p></li></ul><h3 id="page对象方法"><a href="#page对象方法" class="headerlink" title="page对象方法"></a>page对象方法</h3><ul><li><p>has_next()：如果有下一页返回True</p></li><li><p>has_previous()：如果有上一页返回True</p></li><li><p>has_other_pages()：如果有上一页或下一页返回True</p></li><li><p>next_page_number()：返回下一页的页码，如果下一页不存在，抛出<code>InvalidPage</code>异常</p></li><li><p>previous_page_number()：返回上一页的页码，如果上一页不存在 抛出<code>InvalidPage</code>异常</p></li></ul><h2 id="练习：创建分页功能的网页"><a href="#练习：创建分页功能的网页" class="headerlink" title="练习：创建分页功能的网页"></a>练习：创建分页功能的网页</h2><h1 id="生成csv文件"><a href="#生成csv文件" class="headerlink" title="生成csv文件"></a>生成csv文件</h1><h3 id="csv文件定义"><a href="#csv文件定义" class="headerlink" title="csv文件定义"></a>csv文件定义</h3><p>逗号分隔值（Comma-Separated Values， CSV，有时也称为字符分 隔值，因为分隔字符也可以不是逗号）。其文件以纯文本形式存储表格数据（数字和文本）</p><p>说明：可被常见制表工具，如excel等直接进行读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_page</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>all_data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    n_page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    c_page<span class="token operator">=</span>paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n_page<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_page.html'</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% for data in c_page %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        &#123;&#123; data &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>&#123;% endfor %&#125;&#123;% if c_page.has_previous %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test_page?page=&#123;&#123; c_page.previous_page_number &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% else %&#125;    上一页&#123;% endif %&#125;&#123;% for it_page in paginator.page_range %&#125;    &#123;% if c_page.number == it_page %&#125;        &#123;&#123;it_page &#125;&#125;    &#123;% else %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test_page?page=&#123;&#123; it_page &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; it_page &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;&#123;% endfor %&#125;&#123;% if c_page.has_next %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test_page?page=&#123;&#123; c_page.next_page_number &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% else %&#125;    下一页&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python中生成csv文件"><a href="#python中生成csv文件" class="headerlink" title="python中生成csv文件"></a>python中生成csv文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token comment">#参数为文件，写模式，不按系统转义换行符</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eggs.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>newline<span class="token operator">=</span>"<span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span> <span class="token comment">#writer对象</span>writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="csv文件下载"><a href="#csv文件下载" class="headerlink" title="csv文件下载"></a>csv文件下载</h3><ol><li><p><code>HttpResponse</code>响应<code>Content-Type</code>类型需修改为<code>text/csv</code>。这告诉浏览器该文档是CSV文件，而不是HTML文件</p></li><li><p><strong>响应</strong>会获得一个额外的<code>Content-Disposition</code>标头，其中包含CSV文件的名称。它将被浏览器用于开启“另存为.对话框</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_csv</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>HttpResponse<span class="token punctuation">(</span>content_type<span class="token operator">=</span><span class="token string">'text/csv'</span><span class="token punctuation">)</span>    response<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'attachment;filename="test.csv"'</span>    all_book<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    writer<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> book <span class="token keyword">in</span> all_book<span class="token punctuation">:</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>all_book<span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="补充：page结合csv"><a href="#补充：page结合csv" class="headerlink" title="补充：page结合csv"></a>补充：page结合csv</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_page_csv</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    page_num <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span>    <span class="token comment">#初始化paginator</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>all_data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">#初始化 具体页码的page对象</span>    c_page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>page_num<span class="token punctuation">)</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span>content_type<span class="token operator">=</span><span class="token string">'text/csv'</span><span class="token punctuation">)</span>    response<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment;filename="page-%s.csv"'</span><span class="token operator">%</span><span class="token punctuation">(</span>page_num<span class="token punctuation">)</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> c_page<span class="token punctuation">:</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django中间件</title>
      <link href="/2021/10/10/Django%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2021/10/10/Django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="中间件定义"><a href="#中间件定义" class="headerlink" title="中间件定义"></a>中间件定义</h1><p>Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for <strong>globally altering</strong> Django’s input or output.</p><p>Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, <a href="https://docs.djangoproject.com/en/3.2/ref/middleware/#django.contrib.auth.middleware.AuthenticationMiddleware"><code>AuthenticationMiddleware</code></a>, that associates users with requests using sessions.</p><p><img src="https://i.loli.net/2021/10/10/4KuhYnViG1M8ojR.jpg" alt="img"></p><h1 id="编写中间件"><a href="#编写中间件" class="headerlink" title="编写中间件"></a>编写中间件</h1><p>Django provides <code>django.utils.deprecation.MiddlewareMixin</code> to ease creating middleware classes that are compatible with both <a href="https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-MIDDLEWARE"><code>MIDDLEWARE</code></a> and the old <code>MIDDLEWARE_CLASSES</code></p><ul><li>中间件类须继承自<code>django.utils.deprecation.MiddlewareMixin</code>类</li><li>中间件类须实现下列五个方法中的一个或多个：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">process_request<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>执行路由</strong>之前被调用，在每个请求上调用，返回None或HttpResponse对象</p><p>​    如果返回HttpResponse，中断交互</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">process_view<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callback_args<span class="token punctuation">,</span> callback_kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>调用视图</strong>之前被调用，在每个请求上调用，返回None或HttpResponse对象</p><p>​    如果返回HttpResponse，中断交互</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">process_response<span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    所有响应返回浏览器 被调用，在每个请求上调用，返回HttpResponse对象</p><p>​    不返回response会报<code>AttributeError: &#39;NoneType&#39; object has no attribute &#39;something&#39;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">process_exception<span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    当处理过程中抛出异常时调用，返回一个HttpResponse对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">process_template_response<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在视图函数执行完毕且试图返回的对象中包含render方法时被调用；该方法需要返回实现了render方法的响应对象</p><p>注：中间件中的大多数方法在返回None时表示忽略当前操作进入下一项事件，当返回HttpResponese对象时表示此请求结束，直接返回给客户端</p><h1 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h1><ul><li><code>settings.py</code>中需要注册一下自定义的中间件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># file:settings.py</span>MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'middleware.mymiddleware.MW1'</span>    <span class="token string">'middleware.mymiddleware.MW2'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：配置为数组，中间件被调用时以<code>构造--析构</code>顺序调用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">MW1</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW1\'s process_request is called'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>callback<span class="token punctuation">,</span>callback_args<span class="token punctuation">,</span>callback_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW1\'s process_view is called'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW1\'s process_response is called'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token keyword">class</span> <span class="token class-name">MW2</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW2\'s process_request is called'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>callback<span class="token punctuation">,</span>callback_args<span class="token punctuation">,</span>callback_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW2\'s process_view is called'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MW2\'s process_response is called'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/10/7v6JD8Ytz5kfE9C.png" alt="img"></p><h2 id="练习：设置ip地址访问限制"><a href="#练习：设置ip地址访问限制" class="headerlink" title="练习：设置ip地址访问限制"></a>练习：设置ip地址访问限制</h2><p>用中间件实现强制某个IP地址只能向<code>/test</code>开头的地址发送5次请求</p><p>提示</p><p><code>request.META[&#39;REMOTE_ADDR&#39;]</code>可以得到用户IP地址</p><p><code>requet.path_info</code>可以得到用户请求的路由信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RestrictAccessMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    access_times <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        path_url <span class="token operator">=</span> request<span class="token punctuation">.</span>path_info        <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^/test'</span><span class="token punctuation">,</span> path_url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># start with /test</span>            <span class="token keyword">return</span>        user_ip<span class="token operator">=</span>request<span class="token punctuation">.</span>path_info        times<span class="token operator">=</span>self<span class="token punctuation">.</span>access_times<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_ip<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> times<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'access limit reached'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>access_times<span class="token punctuation">[</span>user_ip<span class="token punctuation">]</span><span class="token operator">=</span>times<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h1><ul><li><p>跨站伪造请求攻击(CSRF，即Cross-Site Request Forgey) </p></li><li><p>某些恶意网站上包含链接、表单按钮或者<code>JavaScript</code>，它们会利用登录过的用户在浏览器中的认证信息试图在你的网站上完成某些操作</p></li><li><p>利用浏览器尚未清除的<code>COOKIES</code>伪造用户身份</p></li></ul><h2 id="Django-CSRF防范"><a href="#Django-CSRF防范" class="headerlink" title="Django CSRF防范"></a>Django CSRF防范</h2><ul><li>django采用<code>比对暗号</code>机制 防范攻击</li><li>Cookies中存储暗号1，模板中表单里藏着暗号2，用户只有在本网站下提交数据，暗号2才会随表单提交给服务器，django对比两个暗号，对比成功，则认为是合法请求，否则是违法请求—403响应码</li></ul><h2 id="Django代码实现"><a href="#Django代码实现" class="headerlink" title="Django代码实现"></a>Django代码实现</h2><p><img src="https://i.loli.net/2021/10/10/OX6h2jkyGEoZ7ic.png" alt="img"></p><p><img src="https://i.loli.net/2021/10/10/Y4nT3P8JSG7vrO9.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/test_csrf"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            用户名<span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token keyword">def</span> <span class="token function">test_csrf</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_csrf.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'test csrf successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部分视图不需要csrf保护时"><a href="#部分视图不需要csrf保护时" class="headerlink" title="部分视图不需要csrf保护时"></a>部分视图不需要csrf保护时</h2><ul><li><p>其他公司的服务器发起post请求时，本身需要跨站</p></li><li><p>某个视图不需要csrf保护时，可以使用装饰器关闭对此视图的检查</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> csrf_exempt<span class="token decorator annotation punctuation">@csrf_exempt</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'test successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django缓存</title>
      <link href="/2021/10/10/Django%E7%BC%93%E5%AD%98/"/>
      <url>/2021/10/10/Django%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>定义：缓存是一类可以更快的读取数据的介质统称，也指其它可以<strong>加快数据读取</strong>的存储方式。一般用来存储<strong>临时数据</strong>，常用介质的是读取速度很快的<strong>内存</strong></li><li>意义：考虑到<strong>视图渲染</strong>时数据库频繁查询。<strong>低频变动的页面</strong>使用<strong>缓存</strong>技术可以减少实际<strong>渲染次数</strong>，用户拿到响应的时间成本会更低</li><li>使用场景：<font color='red'>数据变动频率较少</font></li><li>缓存原理：将缓存的数据储存在单独的表中。尽管储存介质没有换，但是把一次查询的结果直接储存到表中，可避免重复进行复杂查询，提升效率</li></ul><h2 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h2><ol><li>setting.py中添加<code>CACHES</code></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">CACHES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.db.DatabaseCache'</span><span class="token punctuation">,</span>        <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'cache'</span><span class="token punctuation">,</span><span class="token comment">#缓存表</span>        <span class="token string">'TIMEOUT'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>  <span class="token comment">#缓存保存时间 单位秒，默认值为300,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>            <span class="token string">'MAX_ENTRIES'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token comment">#缓存最大数据条数</span>            <span class="token string">'CULL_FREQUENCY'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">#缓存条数达到最大值时 删除1/x的缓存数据</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 . <code>python3 manage.py createcachetable</code></p><img src="https://i.loli.net/2021/10/09/U2eGt9kFTnJSRDw.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/10/09/YOxH94nUyiMzspk.png" style="zoom:50%;" /><h1 id="Django中使用缓存"><a href="#Django中使用缓存" class="headerlink" title="Django中使用缓存"></a>Django中使用缓存</h1><h2 id="整体缓存策略"><a href="#整体缓存策略" class="headerlink" title="整体缓存策略"></a>整体缓存策略</h2><h3 id="视图函数中"><a href="#视图函数中" class="headerlink" title="视图函数中"></a>视图函数中</h3><p>使用<code>cache_page</code>装饰器，有缓存走缓存，没有缓存走视图函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">from</span> time<span class="token decorator annotation punctuation">@cache_page</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">#40秒，cache_page自带强缓存</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'time is %s'</span><span class="token operator">%</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由中"><a href="#路由中" class="headerlink" title="路由中"></a>路由中</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_pageurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'tset'</span><span class="token punctuation">,</span>cache_page<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部缓存策略"><a href="#局部缓存策略" class="headerlink" title="局部缓存策略"></a>局部缓存策略</h2><h3 id="引入cache对象"><a href="#引入cache对象" class="headerlink" title="引入cache对象"></a>引入cache对象</h3><p><code>setting.py</code>中的<code>CACHES</code>配置项是一个字典，储存了缓存的配置集</p><img src="https://i.loli.net/2021/10/09/cd4Z3yAHPe5MjRi.png" style="zoom:50%;" /><p>方式1：使用<code>caches[&#39;CACHE配置key&#39;]</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cachescache1<span class="token operator">=</span>caches<span class="token punctuation">[</span><span class="token string">'myalias'</span><span class="token punctuation">]</span>cache2<span class="token operator">=</span>caches<span class="token punctuation">[</span><span class="token string">'myalias_2'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式2：<code>from django.core.cache import cache</code>相当于直接引入<code>CACHES</code>配置项中的<code>default</code>项</p><h3 id="缓存api的使用"><a href="#缓存api的使用" class="headerlink" title="缓存api的使用"></a>缓存api的使用</h3><p>需要自己写判断缓存的逻辑</p><ol><li><p><code>cache.set(key,value,timeout)</code> 缓存储存</p><p>key：缓存的key，字符串类型。对应表中<code>cache_key</code></p><p>value：Python对象。对应表中<code>value</code></p><p>timeout：缓存储存时间(s)，默认为CACHES中的TIMEOUT值。对应表中<code>expires</code>值</p><p>返回值：None</p></li><li><p><code>cache.get(key)</code> 获取缓存</p><p>key：缓存的key</p><p>返回值：为key的具体值，如果没有数据，则返回None</p></li><li><p><code>cache.add(key,value)</code> 储存缓存，只有在key不存在时生效</p><p>返回值：True[储存成功] False[储存失败]</p></li><li><p><code>cache.get.or_set(key,value,timeout)</code> 如果未获取到数据，则执行set操作</p><p>返回值：value</p></li><li><p><code>cache.set_many(dict,timeout)</code> 批量储存缓存</p><p>dict：储存key和value的字典</p><p>timeout：储存时间(s)</p><p>返回值：插入不成功的key的数组</p></li><li><p><code>cache_get_many(key_list)</code> 批量获取缓存数据</p><p>key_list：包含key的数组</p><p>返回值：储存key和value的字典</p></li><li><p><code>cache.delete(key)</code> 删除key的缓存数据</p><p>返回值：None</p></li><li><p><code>cache.delete_many(key_list)</code> 批量删除</p><p>返回值：None</p></li></ol><h2 id="浏览器缓存策略"><a href="#浏览器缓存策略" class="headerlink" title="浏览器缓存策略"></a>浏览器缓存策略</h2><img src="https://i.loli.net/2021/10/09/6zGOk1ULQE8cVqC.png" style="zoom:37%;" /><p>不会向服务器发送请求，直接从缓存中读取资源</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><ol><li>request header:<code>Expires</code></li></ol><p>定：缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点样例：<code>Expires:Thu，02 Apr 2030 05:14:08 GMT</code></p><ol start="2"><li>request header:<code>Cache-Control</code></li></ol><p>在<code>HTTP/1.1</code>中，Cache-Control主要用于控制网页缓存。比如当<code>Cache-Control:max-age＝120</code>代表请求创建时间后的120秒，缓存失效</p><p>说明：目前服务器都会带着这两个头同时响应给浏览器，浏览器优先使用Cache-Control</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>考虑到大图片这类比较费带宽且不易变化的数据，强缓存时间到期后浏览器会去跟服务器协商，当前缓存是否可用，如果可用，服务器不必返回数据，浏览器继续使用原来缓存的数据，如果文件不可用，则返回最新数据</p><h4 id="Last-Modified响应头和If-Modified-Since请求头-说明："><a href="#Last-Modified响应头和If-Modified-Since请求头-说明：" class="headerlink" title="Last-Modified响应头和If-Modified-Since请求头 说明："></a><code>Last-Modified</code>响应头和<code>If-Modified-Since</code>请求头 说明：</h4><ul><li><p><code>Last-Modified</code>为文件的最近修改<strong>时间</strong>，浏览器第一次请求静态文件时，服务器如果返回<code>Last-Modified</code>响应头，则代表该资源为需协商的缓存</p></li><li><p>当缓存到期后，浏览器将获取到的<code>Last-Modified</code>值做为请求头<code>If-Modified-Since</code>的值，与服务器发请求协商，服务端返回304响应码［<font color='red'>响应体为空</font>］，代表缓存继续使用，200响应码代表缓存不可用［<font color='red'>响应体为最新资源</font>］</p></li></ul><p>缺点：<code>Last-Modified</code>秒级，html和js易被修改</p><h4 id="Etag响应头和If-None-Match请求头"><a href="#Etag响应头和If-None-Match请求头" class="headerlink" title="Etag响应头和If-None-Match请求头"></a><code>Etag</code>响应头和<code>If-None-Match</code>请求头</h4><ul><li><p><code>Etag</code>是服务器响应请求时，返回当前资源文件的一个唯一标识（由服务器生成），只要资源有变化，<code>Etag</code>就会重新生成；</p></li><li><p>缓存到期后，浏览器将 <code>Etag</code>响应头的值做为<code>If-None-Match</code>请求头的值，给服务器发请求协商；服务器接到请求头后，比对文件标识，不一致则认为资源不可用，返回200响应码［<font color='red'>响应体为最新资源</font>］；可用则返回304响应码[<font color='red'>响应体为空</font>]</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django实战:云笔记项目</title>
      <link href="/2021/10/09/Django%E5%AE%9E%E6%88%98-%E4%BA%91%E7%AC%94%E8%AE%B0%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/10/09/Django%E5%AE%9E%E6%88%98-%E4%BA%91%E7%AC%94%E8%AE%B0%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/bai62/CloudCode/tree/master/Python/Django/notebook">云笔记项目代码</a></p><h2 id="项目组成成员角色"><a href="#项目组成成员角色" class="headerlink" title="项目组成成员角色"></a>项目组成成员角色</h2><p>产品/运营经理：负责产品功能细节的把控</p><p>前端：负责显示部分内容的开发【多】</p><p>后端：负责服务器部分的功能开发【少】</p><p>运维：管理linux服务器，组件化配置</p><p>安全问题测试：负责找出产品功能的问题【BUG】</p><p>美术：负责产品素材方面得绘制</p><h1 id="云笔记项目"><a href="#云笔记项目" class="headerlink" title="云笔记项目"></a>云笔记项目</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="项目要求"><a href="#项目要求" class="headerlink" title="项目要求"></a>项目要求</h3><p>用户可在该系统中记录自己的日常学习/旅游笔记，用户的数据将被安全的存储在云笔记平台；用户与用户之间数据为隔离存储（用户只有在登陆后才能使用相关笔记功能，且只能查阅自己的笔记内容</p><h3 id="功能拆解"><a href="#功能拆解" class="headerlink" title="功能拆解"></a>功能拆解</h3><ul><li><p>用户模块</p><ul><li><p>注册：成为平台用户</p></li><li><p>登陆：校验用户身份</p></li><li><p>退出登陆：退出登陆状态</p></li></ul></li><li><p>笔记模块</p><ul><li><p>查看笔记列表-查</p></li><li><p>创建新笔记-增</p></li><li><p>修改笔记-改</p></li><li><p>删除笔记-删</p></li></ul></li></ul><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li>禁掉csrf(POST提交403问题)</li><li>语言更改为<code>zh-Hans</code></li><li>时区更改为<code>Asia/Shanghai</code></li><li><a href="https://bai62.com/2021/10/03/Django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BA%94%E7%94%A8%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1/">新建，添加数据库</a></li><li>新建，注册应用</li></ul><h2 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h2><img src="https://i.loli.net/2021/10/08/Om417KAifvZLH5Y.png" style="zoom:40%;" /><h3 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'用户名'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    password<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'密码'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    created<span class="token operator">=</span>models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'创建时间'</span><span class="token punctuation">,</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    modified<span class="token operator">=</span>models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'修改时间'</span><span class="token punctuation">,</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'用户名 %s'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h4><img src="https://i.loli.net/2021/10/08/cAM9IGF6n1yY3SH.png" style="zoom:33%;" /><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><img src="https://i.loli.net/2021/10/08/zwTnUMx6NJtqPaE.png" style="zoom:60%;" /><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><h4 id="用户注册-1"><a href="#用户注册-1" class="headerlink" title="用户注册"></a>用户注册</h4><h5 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h5><ol><li>GET返回页面，POST请求数据</li><li>两个密码保持一致</li><li>用户名是否可用</li></ol><h5 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h5><ol><li>密码加密后存入数据库</li><li>避免并行创建相同用户名时报错</li><li>将<code>username</code>和<code>id</code>存入<code>session</code></li></ol><h4 id="用户登录-1"><a href="#用户登录-1" class="headerlink" title="用户登录"></a>用户登录</h4><h5 id="level1-1"><a href="#level1-1" class="headerlink" title="level1"></a>level1</h5><ol><li>GET返回页面，POST请求数据</li><li>检查是否由账号</li><li>检查密码是否正确</li><li>勾选<code>记住我</code>后将<code>username</code>和<code>id</code>存入<code>COOKIE</code></li></ol><h5 id="level2-1"><a href="#level2-1" class="headerlink" title="level2"></a>level2</h5><ol><li>GET时查询<code>COOKIE</code>和<code>session</code></li><li>网页自动登录跳转</li><li>跳转前回写<code>session</code></li></ol><h2 id="index模块"><a href="#index模块" class="headerlink" title="index模块"></a>index模块</h2><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><h4 id="未登录"><a href="#未登录" class="headerlink" title="未登录"></a>未登录</h4><img src="https://i.loli.net/2021/10/09/xcNFTS2kAL3rYHm.png" style="zoom:50%;" /><h4 id="已登录"><a href="#已登录" class="headerlink" title="已登录"></a>已登录</h4><img src="https://i.loli.net/2021/10/09/UksEmlBPbDwdfKn.png" style="zoom:50%;" /><h2 id="note模块"><a href="#note模块" class="headerlink" title="note模块"></a>note模块</h2><h3 id="模型类-1"><a href="#模型类-1" class="headerlink" title="模型类"></a>模型类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'文章标题'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    content<span class="token operator">=</span>models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    created<span class="token operator">=</span>models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'创建时间'</span><span class="token punctuation">,</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    modified<span class="token operator">=</span>models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'修改时间'</span><span class="token punctuation">,</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    user<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span class="token comment">#外键字段名：user_id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><h4 id="添加笔记"><a href="#添加笔记" class="headerlink" title="添加笔记"></a>添加笔记</h4><img src="https://i.loli.net/2021/10/09/UjtfsvMmI4eOlJk.png" style="zoom:50%;" /><h5 id="试图函数"><a href="#试图函数" class="headerlink" title="试图函数"></a>试图函数</h5><h5 id="level1-2"><a href="#level1-2" class="headerlink" title="level1"></a>level1</h5><ol><li>GET返回页面，POST请求数据</li><li>上传笔记</li></ol><h5 id="level2-2"><a href="#level2-2" class="headerlink" title="level2"></a>level2</h5><ol><li>添加装饰器</li></ol><p><a href="https://github.com/bai62/CloudCode/tree/master/Python/Django/notebook">云笔记项目代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoCookies和session</title>
      <link href="/2021/10/08/DjangoCookies%E5%92%8Csession/"/>
      <url>/2021/10/08/DjangoCookies%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h2 id="会话定义"><a href="#会话定义" class="headerlink" title="会话定义"></a>会话定义</h2><ul><li>从打开浏览器访问一个网站，到关闭浏览器结束此次访问，称之为一次会话</li><li>HTTP协议是无状态的，导致会话状态难以保持</li><li><code>Cookies</code>和<code>session</code>就是为了保持会话状态而的诞生的两个储存技术</li></ul><table><thead><tr><th>Cookies</th><th>session</th></tr></thead><tbody><tr><td>信息由浏览器存储</td><td>信息由服务器存储</td></tr><tr><td>相对不安全</td><td>更安全</td></tr><tr><td>储存长期数据</td><td>储存短期数据</td></tr></tbody></table><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><img src="https://i.loli.net/2021/10/08/sjSN8ZyB6pq4DIn.png" style="zoom:50%;" /><h3 id="Cookies定义"><a href="#Cookies定义" class="headerlink" title="Cookies定义"></a>Cookies定义</h3><ul><li>cookies是保存在客户端浏览器上的储存空间<ul><li>Chrome可在<code>Developer tools</code>&gt;&gt;<code>Application</code>&gt;&gt;<code>Storage</code>&gt;&gt;<code>Cookies</code>查看和操作浏览器端所有的Cookies值</li></ul></li></ul><h3 id="Cookies特点"><a href="#Cookies特点" class="headerlink" title="Cookies特点"></a>Cookies特点</h3><ul><li><p>cookies 在浏览器上是以<strong>键-值对</strong>的形式进行存储的，键和值都是以ASCII字符串的形存储(不能是中文字符串）</p></li><li><p>存储的数据带有生命周期</p></li><li><p>cookies中的数据是<strong>按域存储隔离</strong>的，不同的域之间无法访问</p></li><li><p>cookies的内部的数据会在每次访问此网址时都会携带到服务器端，如果cookies过大会降低响应速度</p></li></ul><h3 id="Cookies的使用"><a href="#Cookies的使用" class="headerlink" title="Cookies的使用"></a>Cookies的使用</h3><h4 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h4><p><code>HttpResponse.set_cookie(key,value=&#39;&#39;,max_age=None,expires=None)</code></p><ul><li><code>key</code>:cookie的名字</li><li><code>value</code>:cookie的值</li><li><code>max_age</code>:cookie存活时间，秒为单位</li><li><code>expires</code>:具体过期时间</li></ul><p>当不指定<code>max_age</code>和<code>expries</code>时，关闭浏览器此数据失效</p><h4 id="添加Cookies"><a href="#添加Cookies" class="headerlink" title="添加Cookies"></a>添加Cookies</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp<span class="token operator">=</span>HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>set cookie test&lt;/h1>'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'ckey'</span><span class="token punctuation">,</span><span class="token string">'cval'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/08/tHSNFs8569z2Udq.png" style="zoom:67%;" /><h4 id="修改Cookies"><a href="#修改Cookies" class="headerlink" title="修改Cookies"></a>修改Cookies</h4><p>直接修改<code>set_cookie</code>的参数即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">modify_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp<span class="token operator">=</span>HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>set cookie test&lt;/h1>'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>set_cookies<span class="token punctuation">(</span><span class="token string">'ckey'</span><span class="token punctuation">,</span><span class="token string">'modified_cval'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取Cookies"><a href="#获取Cookies" class="headerlink" title="获取Cookies"></a>获取Cookies</h4><p>通过<code>request.COOKIES</code>绑定的字典(dict)获取客户端的COOKIES数据</p><p>获取的是有效期内的cookies</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    cval<span class="token operator">=</span>request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cval'</span><span class="token punctuation">,</span><span class="token string">'no_cval'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'cookis is %s'</span><span class="token operator">%</span><span class="token punctuation">(</span>cval<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="删除Cookies"><a href="#删除Cookies" class="headerlink" title="删除Cookies"></a>删除Cookies</h4><p>删除指定key的Cookie。如果key不存在则什么也不发生</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">delete_cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    resp<span class="token operator">=</span>HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>delets cookie test&lt;/h1>'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>delete_cookies<span class="token punctuation">(</span><span class="token string">'ckey'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p><code>session</code>是在<strong>服务器</strong>上开辟一段空间用于保留浏览器和服务器交互时的重要数据</p><p>实现方式</p><ul><li><p>使用session需要在浏览器客户端启动cookie，且在cookie中存储sessionID</p></li><li><p>每个客户端都可以在服务器端有一个独立的Session</p></li><li><p>注意：不同的请求者之间不会共享这个数据，与请求者一一对应</p></li></ul><img src="https://i.loli.net/2021/10/08/dzIhxMNVkOGi1Dw.png" style="zoom:50%;" /><ul><li>session的生命周期取决去Cookies的sessionID的生命周期</li><li>django默认Cookies中sessionID生命周期为<font color='red'>14天</font>,客户端每次登录后，消亡日期更新</li><li>django将session数据存在表<code>django_session</code>中</li></ul><img src="https://i.loli.net/2021/10/08/wOnYHTSIJqAldva.png" style="zoom:40%;" /><h3 id="session初始配置"><a href="#session初始配置" class="headerlink" title="session初始配置"></a>session初始配置</h3><ol><li>INSTALLED_APP</li></ol><img src="https://i.loli.net/2021/10/08/vCe59BJVF7iOpNP.png" style="zoom:50%;" /><ol start="2"><li>MIDDLEWARE</li></ol><img src="https://i.loli.net/2021/10/08/iH9uAFD7tyUOLaG.png" style="zoom:50%;" /><h3 id="session的使用"><a href="#session的使用" class="headerlink" title="session的使用"></a>session的使用</h3><img src="https://i.loli.net/2021/10/08/icZSdTLOusprMEU.png" style="zoom:50%;" /><h4 id="创建和获取session"><a href="#创建和获取session" class="headerlink" title="创建和获取session"></a>创建和获取session</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_session</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'skey'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'sval'</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>set session successfully&lt;/h1>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_session</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    sval<span class="token operator">=</span>request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'skey'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>sval is %s&lt;/h1>'</span><span class="token operator">%</span><span class="token punctuation">(</span>sval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_session</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">del</span> request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'skey'</span><span class="token punctuation">]</span> <span class="token comment"># 删除指定数据的键和值</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空的是值</span>request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 键和值一起清空</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>delete session[\'key\'] successfully&lt;/h1>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="setting-py中相关配置项"><a href="#setting-py中相关配置项" class="headerlink" title="setting.py中相关配置项"></a>setting.py中相关配置项</h4><ul><li>SESSION_COOKIE_AGE<ul><li>作用：指定sessionid在cookies中的保存时长（默认是2周），如下：例如： SESSION_COOKIE AGE= 60 * 60 * 24 * 7 * 2</li></ul></li><li>SESSION EXPIRE AT BROWSER CLOSE = True<ul><li>设置只要浏览器关闭时，session就失效（默认为False）</li></ul></li></ul><p><font color='red'>注意： Django中的session数据存储在数据库中，所以使用session前需要确保已经执行过migrate</font></p><h3 id="django-session的问题"><a href="#django-session的问题" class="headerlink" title="django session的问题"></a>django session的问题</h3><ol><li><p>django＿session表是单表设计,且该表数据量持续增加【浏览器删掉sessionid后，过期数据不会被删除】</p></li><li><p>可以每晚执行 <code>python3 manage.py clearsessions</code>【该命令可删除 已过期的session数据】</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django关系映射</title>
      <link href="/2021/10/07/Django%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/"/>
      <url>/2021/10/07/Django%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="关系映射"><a href="#关系映射" class="headerlink" title="关系映射"></a>关系映射</h2><p>在关系型数据库中，通常不会把所有数据放在同一张表中，不易扩展</p><h2 id="特殊字段选项on-delete"><a href="#特殊字段选项on-delete" class="headerlink" title="特殊字段选项on_delete"></a>特殊字段选项<code>on_delete</code></h2><ul><li><code>models.CASCADE</code> 级联删除 <ul><li>Django<strong>模拟</strong>SQL约束<code>on delete cascade</code>的行为，并删除包含<code>ForeignKey</code>的对象</li></ul></li><li><code>models.PROTECT</code> <ul><li>抛出ProtectedError以阻止被引用对象的删除，等同于<code>mysql</code>默认下的<code>RESTRICT</code></li></ul></li><li><code>SET_NULL</code> <ul><li>设置<code>ForeignKey null;</code>，需要指定null=True</li></ul></li><li><code>SET_DEFAULT</code><ul><li>将<code>ForeignKey</code>设置为其默认值；必须设置<code>ForeignKey</code>的默认值</li></ul></li></ul><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><p>语法：models中的OneToOneField类<code>外键属性=OneToOneField(父表类名,on_delete=models.xxx)</code></p><ul><li><font color='red'>OneToOneField必须指定on_delete的值</font></li><li>子表fk_id字段的Key属性为<code>uni</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#父表</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#子表</span>    外键属性<span class="token operator">=</span>models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>A<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>xxx<span class="token punctuation">)</span><span class="token comment"># 外键属性_id为外键字段名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建表示例"><a href="#建表示例" class="headerlink" title="建表示例"></a>建表示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'姓名'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table<span class="token operator">=</span><span class="token string">'father'</span><span class="token keyword">class</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'姓名'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    Father<span class="token operator">=</span>models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>Father<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token comment">#外键属性名为Father,外键名为Father_id</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table<span class="token operator">=</span><span class="token string">'fun'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对一映射创建数据"><a href="#一对一映射创建数据" class="headerlink" title="一对一映射创建数据"></a>一对一映射创建数据</h3><ul><li>无外键的模型类[Father]</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">f1<span class="token operator">=</span>Father<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'san'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Father<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'tan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>有外键的模型类[Sun]</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1<span class="token operator">=</span>Sun<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'rom'</span><span class="token punctuation">,</span>father<span class="token operator">=</span>f1<span class="token punctuation">)</span><span class="token comment">#father为外键属性名，关联f1-obj</span>s2<span class="token operator">=</span>Sub<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'qom'</span><span class="token punctuation">,</span>father_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#_id=s1.id</span><span class="token comment">#father_id为外键字段名，关联f1对应主键值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对一查询数据"><a href="#一对一查询数据" class="headerlink" title="一对一查询数据"></a>一对一查询数据</h3><ol><li><p>正向查询：直接通过子表外键属性(fk)查询</p><p>语法：<code>子表对象.外键属性.父表字段</code></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> oto<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>s<span class="token operator">=</span>Sun<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>father<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>反向查询：主表可以调用反向属性查询到关联的一方</p><p>语法：<code>父表对象.子表类名小写.子表字段</code></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> oto<span class="token punctuation">.</span>models<span class="token punctuation">.</span><span class="token keyword">import</span> <span class="token operator">*</span> f<span class="token operator">=</span>Father<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">,</span>f<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h2><p>语法：models中的ForeignKey类<code>外键属性=ForeignKey(父表类名,on_delete=models.xxx)</code></p><ul><li><font color='red'>ForeignKey必须指定on_delete的值</font></li><li>子表fk_id字段的Key属性为<code>mul</code></li></ul><h3 id="一对多映射创建数据"><a href="#一对多映射创建数据" class="headerlink" title="一对多映射创建数据"></a>一对多映射创建数据</h3><h4 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Press</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    pub<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'出版社'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    book<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'书名'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    press<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Press<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> otm<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>p1<span class="token operator">=</span>Press<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>pub<span class="token operator">=</span><span class="token string">'thu'</span><span class="token punctuation">)</span>b1<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>book<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span>press<span class="token operator">=</span>p1<span class="token punctuation">)</span> <span class="token comment">#press为子表外键属性名</span>b2<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>book<span class="token operator">=</span><span class="token string">'java'</span><span class="token punctuation">,</span>press_id<span class="token operator">=</span>p1<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span> <span class="token comment">#press_id为子表外键字段名</span>b3<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>book<span class="token operator">=</span><span class="token string">'golang'</span><span class="token punctuation">,</span>press_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对多查询数据"><a href="#一对多查询数据" class="headerlink" title="一对多查询数据"></a>一对多查询数据</h3><ol><li><p>正向查询</p><p>语法：<code>子表对象.外键属性.父表字段</code></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> otm<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>b<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>press<span class="token punctuation">.</span>pub<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>反向查询</p><p>语法：<code>父表对象.子表类名_set.all()</code></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">books<span class="token operator">=</span>p1<span class="token punctuation">.</span>book_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#QuerySet#也可以 Books.objets.filter(fk=p1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h2><p>多对多表达对象之间多对多复杂关系，如：每个人都有不同的学校（小学，初中，高中）每个学校都有不同的学生</p><ul><li><p>mysql中创建多对多需要依赖第三张表来实现</p></li><li><p>Django中无需手动创建第三张表， Django自动完成</p></li></ul><p>语法：在关联的两个类中的任意一个类中，<code>属性=models.ManyToManyField(类名)</code></p><p>生成<code>应用名_类名_属性</code>表</p><img src="https://i.loli.net/2021/10/07/JWaUVxb7CmIRLA9.png" style="zoom: 33%;" /><h3 id="多对多映射创建数据"><a href="#多对多映射创建数据" class="headerlink" title="多对多映射创建数据"></a>多对多映射创建数据</h3><h4 id="两个作者写一本书"><a href="#两个作者写一本书" class="headerlink" title="两个作者写一本书"></a>两个作者写一本书</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> oto<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#方案1：先创建author，后在关联book</span><span class="token comment">#san和ran写的python</span>a1<span class="token operator">=</span>Author<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'san'</span><span class="token punctuation">)</span>a2<span class="token operator">=</span>Author<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>ctreate<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ran'</span><span class="token punctuation">)</span>w1<span class="token operator">=</span>a1<span class="token punctuation">.</span>works_set<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">)</span> <span class="token comment">#b1是像a1一样的对象</span><span class="token comment">#方案2：先创建book，后关联author</span><span class="token comment">#man和san写的golang</span>w2<span class="token operator">=</span>Works<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'golang'</span><span class="token punctuation">)</span>w2<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'man'</span><span class="token punctuation">)</span> <span class="token comment">#返回值为a3对象</span>w2<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/10/07/D9FLzTcyIOn86aN.png" style="zoom:50%;" /><h3 id="多对多查询数据"><a href="#多对多查询数据" class="headerlink" title="多对多查询数据"></a>多对多查询数据</h3><h4 id="正向查询"><a href="#正向查询" class="headerlink" title="正向查询"></a>正向查询</h4><p>有多对多属性的对象查另一方</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通过Works查询对应的所有的Author</span>b1<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取b1对象对应的所有的author的信息</span>b1<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>age__gt<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">#获取book对应的作者中年龄大于50的数据集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>反向查询</p><p>没有多读多属性的对象查另一方</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通过Author查询对应所有的Book</span>author<span class="token punctuation">.</span>book_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>author<span class="token punctuation">.</span>book_set<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoAdmin后台管理</title>
      <link href="/2021/10/06/DjangoAdmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/06/DjangoAdmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="admin管理后台"><a href="#admin管理后台" class="headerlink" title="admin管理后台"></a>admin管理后台</h2><ul><li>django提供了比较完整的后台管理数据库的接口，可供开发过程中调试和测试使用</li><li>django会搜集所有已注册的模型类，为这些模型提供数据管理界面，供开发者使用</li></ul><h3 id="admin配置步骤"><a href="#admin配置步骤" class="headerlink" title="admin配置步骤"></a>admin配置步骤</h3><ol><li>创建后台管理账号，该账号为管理后台最高权限账号</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 manage.py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>取消urls.py中<code>admin</code>的path,导包</li><li><code>setting.py</code>中安装<code>&#39;django.contrib.admin&#39;,</code></li><li><code>python3 manage.py migrage</code></li></ol><p>Add <code>django.contrib.admin</code> in your <code>INSTALLED_APPS</code>, then run <code>python manage.py migrate admin</code> to create initial db tables for <code>admin</code> application. It will create <code>django_admin_log</code> table for you.</p><h3 id="注册自定义模型类"><a href="#注册自定义模型类" class="headerlink" title="注册自定义模型类"></a>注册自定义模型类</h3><p>若要自己定义的模型类在<code>/admin</code>界面中显示和管理，需要将自己的类注册到后台管理界面</p><h4 id="注册步骤："><a href="#注册步骤：" class="headerlink" title="注册步骤："></a>注册步骤：</h4><ol><li>在应用app中<code>admin.py</code>中导入注册要管理的模型models类</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Books<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>调用<code>admin.site.register</code>方法进行注册</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Books<span class="token punctuation">,</span><span class="token string">'模型管理器'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://i.loli.net/2021/10/06/IaYHuW7dkNbUGh4.png" style="zoom:50%;" /><h3 id="模型管理器类"><a href="#模型管理器类" class="headerlink" title="模型管理器类"></a>模型管理器类</h3><p>作用：为后台管理界面添加便于操作的功能</p><p>说明：后台管理类必须继承自<code>django.contrib.admin</code>里的<font color='red'>ModelAdmin</font>类</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li>在<code>&lt;应用app&gt;/admin.py</code>里定义模型管理器类</li><li>绑定注册模型管理器和模型类</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookManager</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 列表页显示哪些字段的列</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'pub'</span><span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">,</span><span class="token string">'market_price'</span><span class="token punctuation">]</span>    <span class="token comment"># 控制list_display中的字段，哪些可以链接到修改页</span>    list_display_links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token comment">#添加过滤器</span>    list_filter<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'pub'</span><span class="token punctuation">]</span>    <span class="token comment">#添加搜索框，按模糊查询</span>    search_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'pub'</span><span class="token punctuation">]</span>    <span class="token comment">#添加可在列表页编辑的字段,与list_display_links冲突</span>    list_editable<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">,</span><span class="token string">'market_price'</span><span class="token punctuation">]</span>    admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Books<span class="token punctuation">,</span>BookManager<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/06/EPkDMcjHq9iNYuF.png"></p><h3 id="再谈Meta类"><a href="#再谈Meta类" class="headerlink" title="再谈Meta类"></a>再谈Meta类</h3><p>models.py中模型类的内部类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>    db_table<span class="token operator">=</span><span class="token string">'表名'</span><span class="token punctuation">(</span>设置完后需立马同步更新数据库<span class="token punctuation">)</span>    verbose_name<span class="token operator">=</span><span class="token string">'单数名'</span><span class="token punctuation">(</span>给模型对象一个易于理解的名称，用于显示。默认为表名<span class="token punctuation">)</span>    verbose_name_plural<span class="token operator">=</span><span class="token string">'复数名'</span><span class="token punctuation">(</span>指定verbose_name的复数形式，默认直接加<span class="token string">'s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoFQ对象,聚合查询与原生数据库操作</title>
      <link href="/2021/10/06/DjangoFQ%E5%AF%B9%E8%B1%A1-%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/10/06/DjangoFQ%E5%AF%B9%E8%B1%A1-%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2%E4%B8%8E%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="FQ对象"><a href="#FQ对象" class="headerlink" title="FQ对象"></a>FQ对象</h2><h3 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h3><ul><li>一个F对象代表<strong>数据库</strong>中某条记录的字段的信息</li><li>作用：<ul><li>通常是对数据库中的字段值在不获取的情况下进行操作</li><li>用于**类属性(**字段)之间的比较</li></ul></li><li>语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> djang<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> FF<span class="token punctuation">(</span><span class="token string">'列名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="F对象示例"><a href="#F对象示例" class="headerlink" title="F对象示例"></a>F对象示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bookstore<span class="token punctuation">.</span>models <span class="token keyword">import</span> Books<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> Fobjs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>objs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>price<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 等同于mysql中如下代码update books set price&#x3D;price+10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不用F对象时等同如下代码</span><span class="token keyword">from</span> bookstore<span class="token punctuation">.</span>models <span class="token keyword">import</span> Booksobjs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> objs<span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>price<span class="token operator">=</span>obj<span class="token punctuation">.</span>price<span class="token operator">+</span><span class="token number">10</span>    obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F对象在数据库中不获取字段值"><a href="#F对象在数据库中不获取字段值" class="headerlink" title="F对象在数据库中不获取字段值"></a>F对象在数据库中不获取字段值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_like</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>book_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>book_id<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>price<span class="token operator">=</span>obj<span class="token punctuation">.</span>price<span class="token operator">+</span><span class="token number">10</span><span class="token comment">#等号右面obj.price将数据拿出来，并行时会造成脏读</span>    obj<span class="token punctuation">.</span>price<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token comment">#相当于 set books update price=price+10 update锁行,不会脏读</span>    obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F对象用于类属性之间的比较"><a href="#F对象用于类属性之间的比较" class="headerlink" title="F对象用于类属性之间的比较"></a>F对象用于类属性之间的比较</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bookstore<span class="token punctuation">.</span>models <span class="token keyword">import</span> Books<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> Fobjs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>price__gte<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'market_price'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 等同于mysql中如下代码select * from books where price&gt;&#x3D;market_price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不用F对象时等同于如下代码</span>objs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> objs<span class="token punctuation">:</span>    <span class="token keyword">if</span> obj<span class="token punctuation">.</span>price<span class="token operator">>=</span>obj<span class="token punctuation">.</span>market_price<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h3><ul><li>当在获取查询结果集使用复杂的逻辑或<code>|</code>，逻辑非<code>~</code>等操作时可以借助于Q对象进行操作</li><li><font color='red'>filter多个参数时，为逻辑与<code>&amp;</code></font></li><li>语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> djang<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> QQ<span class="token punctuation">(</span>属性<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>Q<span class="token punctuation">(</span>属性<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#对象异或操作，不违反python语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Q对象示例"><a href="#Q对象示例" class="headerlink" title="Q对象示例"></a>Q对象示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> QBooks<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Q<span class="token punctuation">(</span>price__lt<span class="token operator">=</span>F<span class="token punctuation">(</span><span class="token string">'market_price'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span>Q<span class="token punctuation">(</span>pub<span class="token operator">=</span><span class="token string">'pku'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p>聚合查询是指对一个数据表中的<strong>一个字段</strong>的数据进行部分或全部进行统计查询，查books数据表中的全部书的<strong>平均</strong>价格，查询所有书的总<strong>个数</strong>等，都要使用聚合查询</p><h3 id="整表聚合"><a href="#整表聚合" class="headerlink" title="整表聚合"></a>整表聚合</h3><ul><li><p>不带分组的聚合查询是指导将全部数据进行集中统计查询</p></li><li><p>聚合函数[需要导入]</p><ul><li><p>导入方法：<code>from django.db.models import *</code></p></li><li><p>聚合函数： <code>Sum</code>，<code> Avg</code>， <code>Count</code>， <code>Max</code>，<code>Min</code></p></li><li><p>语法： <code>MyModel.objects.aggregate(结果变量名=聚合函数(列))</code></p></li><li><p>返回结果：结果变量名和值组成的<strong>字典</strong></p><p>​    格式为：{“结果变量名”：值}</p></li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> Countdic<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>count<span class="token operator">=</span>Count<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dic<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from books<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><p>分组聚合是指通过计算查询结果中每一个对象所关联的对象集合，从而得出总计值（也可以是平均值或总和），即为查询集的每一项生成聚合。</p><p>语法：</p><ul><li><code>QuerySet.annotate(结果变量名＝聚合函数(列))</code></li><li>返回值：<code>QuerySet </code>(<font color='red'>QuerySet</font>可以接查询)</li><li>一般来说，按什么分组就查什么东西</li></ul><ol><li> 通过<code>Books.objects.values</code>分组得到<code>QuerySet</code></li><li> 调用<code>QuerySet</code>的<code>annotate</code>函数实现分组聚合</li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">dics<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'pub'</span><span class="token punctuation">)</span>QS<span class="token operator">=</span>dics<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>count<span class="token operator">=</span>Count<span class="token punctuation">(</span><span class="token string">'pub'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#values返回的QS调用annotate，而不是表调用#QS: &lt;QuerySet [&#123;'pub': 'zju', 'npub': 1&#125;, &#123;'pub': 'pku', 'npub': 2&#125;, &#123;'pub': 'tju', 'npub': 1&#125;, &#123;'pub': 'ecnu', 'npub': 1&#125;]>QS.filter(npub__gt=1) #filter可以用聚合时结果变量的字段#&lt;QuerySet [&#123;'pub': 'pku', 'npub': 2&#125;]></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select pub ,count(*) as npub from books group by pub having npub&gt;1;# QS.query可查看sql语句<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="聚合查询练习"><a href="#聚合查询练习" class="headerlink" title="聚合查询练习"></a>聚合查询练习</h3><p>null</p><h2 id="原生数据库操作"><a href="#原生数据库操作" class="headerlink" title="原生数据库操作"></a>原生数据库操作</h2><h3 id="raw方法"><a href="#raw方法" class="headerlink" title="raw方法"></a>raw方法</h3><p>Django支持直接用sql语句的方式通信数据库</p><p>语法：<code>Books.objects.raw(sql语句,拼接参数)</code> <font color='red'>查询操作</font></p><p>返回值：<code>RawQuerySet</code>集合对象 <font color='red'>只支持基础操作，比如遍历</font></p><p>示例：</p><img src="https://i.loli.net/2021/10/06/ktqs8g4ZoDzyAYi.png" style="zoom:53%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python">rqs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'select * from books'</span><span class="token punctuation">)</span><span class="token comment">#rqs:&lt;RawQuerySet: select * from books>for data in rqs:    print(data)'''apple_zju_12.49lemon_pku_16.79pitaya_tju_12.10plum_ecnu_20.00litchi_pku_10.00'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#错误Books.objects.raw('select * from books where id=%s'%('1 or 1=1'))#正确 将条件变为字符串 id='1 or 1=1'Books.objects.raw('select * from books where id=%s',['1 or 1=1'])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="cursor操作"><a href="#cursor操作" class="headerlink" title="cursor操作"></a>cursor操作</h3><p>完全跨过模型类操作数据库-<strong>查询</strong>/<strong>更新</strong>/<strong>删除</strong></p><p>每次执行sql语句，都要创建一个新的cursor对象，并释放cursor资源</p><p>返回值：执行成功的语句的数目</p><ol><li>导入<code>cursor</code>所在的包</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建connection.cursor对象。为保证在出现异常时能释放cursor资源，使用with语句进行创建</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connectionwith connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'执行SQL语句'</span><span class="token punctuation">,</span><span class="token string">'拼接参数'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="cursor示例"><a href="#cursor示例" class="headerlink" title="cursor示例"></a>cursor示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connection<span class="token keyword">def</span>  <span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        v1<span class="token operator">=</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from books'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        v2<span class="token operator">=</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from books where pub=\'tju\''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>test&lt;/h1>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoORM更新和删除操作</title>
      <link href="/2021/10/06/DjangoORM%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/10/06/DjangoORM%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h2><h3 id="更改单个数据"><a href="#更改单个数据" class="headerlink" title="更改单个数据"></a>更改单个数据</h3><p>修改单个实体的某些字段值的步骤：</p><ol><li><p>查</p><p>通过<code>get()</code>得到要修改的实体对象 .</p></li><li><p>改</p><p>通过<code>对象.属性</code>的方式修改数据</p></li><li><p>保存</p><p>通过 对象<code>.save()</code>保存数据</p></li></ol><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bookstore<span class="token punctuation">.</span>models <span class="token keyword">import</span> Booksobj<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'litchi'</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">13</span>obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量更新数据"><a href="#批量更新数据" class="headerlink" title="批量更新数据"></a>批量更新数据</h3><ul><li>直接调用<code>QuerySet</code>的update(属性=值)实现批量修改</li><li>示例</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将 id大于等于4的所有图书价格定为0元</span><span class="token keyword">from</span> bookstore<span class="token punctuation">.</span>models <span class="token keyword">import</span> Booksobjs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gte<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>objs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 将所有书的价格定为100元</span>objs<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>objs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习：制作’更新书籍’的界面"><a href="#练习：制作’更新书籍’的界面" class="headerlink" title="练习：制作’更新书籍’的界面"></a>练习：制作’更新书籍’的界面</h4><img src="https://i.loli.net/2021/10/04/Q6xOBy5tZR7iWXS.png" style="zoom:24%;" /><img src="https://i.loli.net/2021/10/04/gzd5nhGMi9mTR32.png" style="zoom:33%;" /><p><a href="https://github.com/bai62/CloudCode/tree/master/Python/Django/beginner/%E6%9B%B4%E6%96%B0%E4%B9%A6%E7%B1%8D%E7%9A%84%E9%A1%B5%E9%9D%A2">更改书籍代码(Beta)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新设备上关联GibHub仓库</title>
      <link href="/2021/10/05/%E6%96%B0%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%85%B3%E8%81%94GibHub%E4%BB%93%E5%BA%93/"/>
      <url>/2021/10/05/%E6%96%B0%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%85%B3%E8%81%94GibHub%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="新设备关联GitHub时不涉及的操作"><a href="#新设备关联GitHub时不涉及的操作" class="headerlink" title="新设备关联GitHub时不涉及的操作"></a>新设备关联GitHub时不涉及的操作</h2><ol><li><code>git init</code></li><li>处理分支的操作</li></ol><h2 id="新设备关联GitHub的步骤"><a href="#新设备关联GitHub的步骤" class="headerlink" title="新设备关联GitHub的步骤"></a>新设备关联GitHub的步骤</h2><ol><li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在~/.gitconfig文件中</li><li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在~/.gitconfig文件中</li><li><code>ssh-kengen</code>生成密钥,将<code>~/.ssh/id_rsa.pub</code>中的公钥</li></ol><img src="https://i.loli.net/2021/10/05/vPsizxbYc9jSghy.png" style="zoom:50%;" /><ol start="4"><li>任意文件夹上<code>git bash here</code></li><li><code>git clone git@github.com:username/XXX.git</code>克隆仓库</li></ol><img src="https://i.loli.net/2021/10/05/CaMmilVNb2E8wnu.png" style="zoom:50%;" /><ol start="6"><li><code>cd dir</code><font color='red'>进入仓库目录(带有.git文件夹)</font></li><li>添加任意内容</li><li><code>git add .</code></li><li><code>git commit -m &#39;test&#39;</code></li><li><code>git push</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjanogORM查询操作</title>
      <link href="/2021/10/04/DjanogORM%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/10/04/DjanogORM%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="orm查询方法"><a href="#orm查询方法" class="headerlink" title="orm查询方法"></a>orm查询方法</h2><ul><li><p>数据库的查询需要使用管理器对象进行</p></li><li><p>通过 <strong>Books.objects</strong> 管理器方法调用查询方法 </p></li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>查询全部记录，返回QuerySet查询对象</td></tr><tr><td>get()</td><td>查询符合条件的单一记录</td></tr><tr><td>filter()</td><td>查询符合条件的多条记录</td></tr><tr><td>exclude()</td><td>查询符合条件之外的全部记录</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="模型类中的-str-方法"><a href="#模型类中的-str-方法" class="headerlink" title="模型类中的__str__方法"></a>模型类中的<code>__str__</code>方法</h4><p>​    可以在模型类中定义<code>__str__</code>方法，自定义<code>QuerySet</code>中的输出格式</p><p>​    例如 在Books模型类下定义如下：</p><img src="https://i.loli.net/2021/10/04/L3J5XKmOTycN4nW.png" style="zoom:50%;" /><p>​    则在<code>django shell</code>中可得到如下显示输出</p><img src="https://i.loli.net/2021/10/04/GkR3Lqj9hzKoQZ4.png" style="zoom:50%;" /><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>value纵向，条件查询横向</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h4><p>用法:<code>Books.objects.all()</code> <font color='red'><code>Books.objects</code></font>=<font color='red'><code>Books.objects.all()</code></font></p><p>作用:查询MyModel实体(表)中所有的数据</p><p>等同于 <code>select * from tabel</code></p><p>返回值: QuerySet容器对象，内部<strong>存放Books实例化对象</strong></p><p><img src="https://i.loli.net/2021/10/04/8KsgDxH1mecr3ad.png"></p><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><img src="https://i.loli.net/2021/10/04/SpoNtqDlJGPrd9y.png" style="zoom:70%;" /><h4 id="values-‘列1’-’列2’…"><a href="#values-‘列1’-’列2’…" class="headerlink" title="values(‘列1’,’列2’…)"></a>values(‘列1’,’列2’…)</h4><p>用法：<code>Books.objects.values(...)</code></p><p>作用：查询部分列的数据并返回</p><p>等同于<code>select列1，列2 from xxx</code></p><p>返回值：<code>QuerySet</code></p><p>​    返回查询结果容器，容器内存<strong>字典</strong>，每个字典代表一条数据，</p><p>​    格式为：{‘列1’:’值1’,’列2’:’值2’}</p><p><img src="https://i.loli.net/2021/10/04/rMsgPIyG5qnUEND.png"></p><h5 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h5><img src="https://i.loli.net/2021/10/04/eWXzFsm7aOh2Su8.png" style="zoom:67%;" /><h4 id="values-list-‘列1’-’列2’…"><a href="#values-list-‘列1’-’列2’…" class="headerlink" title="values_list(‘列1’,’列2’…)"></a>values_list(‘列1’,’列2’…)</h4><p>用法：<code>Books.objects.values_list(...)</code></p><p>作用：返回元组形式的查询结果</p><p>等同于select列1，列2 from xxx</p><p>返回值：返回<code>QuerySet</code>容器对象，内部储存元组</p><ul><li>会将查询出来的结果封装到元组中再封装到查询集合QuerySet中</li></ul><p><img src="https://i.loli.net/2021/10/04/mbMjFgQkxXZCAKe.png"></p><h5 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h5><img src="https://i.loli.net/2021/10/04/cfuNnT6lP2bq9Qh.png" style="zoom:67%;" /><h4 id="order-by"><a href="#order-by" class="headerlink" title="order_by()"></a>order_by()</h4><p>用法：<code>Books.objects.order_by(&#39;-列&#39;/&#39;列&#39;)</code></p><p>作用：</p><p>​    与all()方法不同，它会用SQL语句的<code>ORDER BY</code>子句对查询结果进行根据某个字段选择性的进行排序</p><p>说明：</p><p>​    默认是按照升序排序，降序排序则需要在列前增加<code>&#39;-&#39;</code>表示</p><p>返回值: QuerySet容器对象，内部<strong>存放Books实例化对象</strong></p><p><img src="https://i.loli.net/2021/10/04/ypaivtdh73WHkVN.png"></p><h5 id="遍历-3"><a href="#遍历-3" class="headerlink" title="遍历"></a>遍历</h5><img src="https://i.loli.net/2021/10/04/pATOLIHEvZb7tJ3.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/10/04/uLT5bsYAQ9wUjcd.png" style="zoom:65%;" /><p>查询QuerySet对应的sql语句</p><img src="https://i.loli.net/2021/10/04/63TCKBdJ418uLPZ.png" style="zoom:80%;" /><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="制作’查看所有书籍’的页面"><a href="#制作’查看所有书籍’的页面" class="headerlink" title="制作’查看所有书籍’的页面"></a>制作’查看所有书籍’的页面</h4><p>视图函数 <code>all_book</code></p><p>url <code>http://127.0.0.1:8000/bookstore/all_book/</code></p><img src="https://i.loli.net/2021/10/04/NqePE4U561WuMFo.png" style="zoom:50%;" /><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># model.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Books</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'书名'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    pub<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'出版社'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    price<span class="token operator">=</span>models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span><span class="token string">'价格'</span><span class="token punctuation">,</span>max_digits<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    market_price<span class="token operator">=</span>models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span><span class="token string">'市场价'</span><span class="token punctuation">,</span>max_digits<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table<span class="token operator">=</span><span class="token string">'books'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"%s_%s_%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>title<span class="token punctuation">,</span>self<span class="token punctuation">.</span>pub<span class="token punctuation">,</span>self<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Books<span class="token keyword">def</span> <span class="token function">all_book</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    all_book<span class="token operator">=</span>Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'bookstotre/show_book.html'</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token comment">&lt;!--templates/bookstore/show_book.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>price<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>op<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">for</span> <span class="token variable">book</span> <span class="token keyword">in</span> <span class="token variable">all_book</span> <span class="token delimiter punctuation">%&#125;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">book</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">book</span><span class="token punctuation">.</span><span class="token variable">title</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">book</span><span class="token punctuation">.</span><span class="token variable">price</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="filer-条件"><a href="#filer-条件" class="headerlink" title="filer(条件)"></a>filer(条件)</h4><p>语法：<code>Books.objects.filter(属性1=值1,属性2=值2)</code></p><p>作用：返回包含此条件的所有<strong>数据集</strong></p><p>返回值:<code>QuerySet</code>容器对象，内部存放Books实例</p><p>说明：当多个属性在一起时为”与”关系，(属性1=<font color='red'>属性a</font>)时用<strong>F对象</strong></p><p>filter样例：</p><p>​    查询出版社为pku，且价格为18.26的书</p><img src="https://i.loli.net/2021/10/04/6ZqoEh3XSjwOfKb.png" style="zoom:67%;" /><h4 id="exclude-条件"><a href="#exclude-条件" class="headerlink" title="exclude(条件)"></a>exclude(条件)</h4><p>语法：<code>Books.objects.exclude(条件)</code></p><p>作用：返回不包含此条件的全部数据集</p><p>exclude样例：</p><p>​    查询出版社不为pku<strong>且</strong>价格不是18.26的所有书</p><p><img src="https://i.loli.net/2021/10/04/51OCQNPzljd6sRH.png" alt="image-20211004164245782"></p><p>​    查询出版社不为pku<strong>或</strong>tju的所有书</p><img src="https://i.loli.net/2021/10/04/haS2Nfmo1dOlp9C.png" style="zoom:50%;" /><h4 id="get-条件"><a href="#get-条件" class="headerlink" title="get(条件)"></a>get(条件)</h4><p>语法：<code>Books.objects.get(条件)</code></p><p>作用：返回满足条件的唯一一条数据</p><p>说明：该方法只能返回一条数据</p><p>​    查询结果多余一条数据则抛出</p><p>​        <code>Model.MoltipleObjectsRetuened</code>异常</p><p>​    查询你结果没有数据则抛出</p><p>​        <code>Model.DoesNotExist</code>异常</p><h3 id="查询谓词"><a href="#查询谓词" class="headerlink" title="查询谓词"></a>查询谓词</h3><p>​    定义：做更灵活的条件查询时需要使用查询谓词</p><p>​    说明：每一个查询谓词是一个独立的查询功能</p><h4 id="exact"><a href="#exact" class="headerlink" title="__exact"></a>__exact</h4><ul><li>等值匹配(可以查是否是null)</li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__exact<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 等同于select * from books where id = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="contains"><a href="#contains" class="headerlink" title="__contains"></a>__contains</h4><ul><li>包含指定值</li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title__contains<span class="token operator">=</span><span class="token string">'pl'</span><span class="token punctuation">)</span><span class="token comment"># 等同于 select * from books where name like '%pl%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="startwith"><a href="#startwith" class="headerlink" title="__startwith:"></a>__startwith:</h4><ul><li>以XXX开始</li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title__startwith<span class="token operator">=</span><span class="token string">'pl'</span><span class="token punctuation">)</span><span class="token comment"># 等同于 select * from books where name like 'pl%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="endwith"><a href="#endwith" class="headerlink" title="__endwith"></a>__endwith</h4><ul><li>以XXX结束</li></ul><h4 id="gt"><a href="#gt" class="headerlink" title="__gt"></a>__gt</h4><ul><li>大于指定值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>price__gt<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment"># 等同于 select * from books where price > 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="gte"><a href="#gte" class="headerlink" title="__gte"></a>__gte</h4><ul><li>大于等于指定值</li></ul><h4 id="lt"><a href="#lt" class="headerlink" title="__lt"></a>__lt</h4><ul><li>小于指定值</li></ul><h4 id="lte"><a href="#lte" class="headerlink" title="__lte"></a>__lte</h4><ul><li>小于等于指定值</li></ul><h4 id="in"><a href="#in" class="headerlink" title="__in"></a>__in</h4><ul><li>查找数据是否在指定的范围内（列表）</li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pub__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zju'</span><span class="token punctuation">,</span><span class="token string">'tju'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 等同于 select * from books where pub in ('zju','tju')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="range"><a href="#range" class="headerlink" title="__range"></a>__range</h4><ul><li>查找数据是否在指定的区间范围内</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Books<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>price__range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 等同于 select * from books wherer price BETWEEN 15 and 17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoORM介绍与创建数据</title>
      <link href="/2021/10/04/DjangoORM%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/10/04/DjangoORM%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h3><h5 id="模型层："><a href="#模型层：" class="headerlink" title="模型层："></a>模型层：</h5><ul><li>负责数据库之间进行通信</li></ul><h5 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h5><ul><li><p><strong>模型</strong>是一个Python类，它是由<code>django.db.models.Model</code>派生出的<strong>子类</strong></p></li><li><p>一个<strong>模型类</strong>代表数据库中的一张<strong>数据表</strong></p></li><li><p>模型类中每一个<strong>类属性</strong>都代表数据库中的一个<strong>字段</strong></p></li><li><p>模型是数据交互的接口，是表示和操作数据库的方法和方式</p></li></ul><h3 id="MySQL与mysqlclient"><a href="#MySQL与mysqlclient" class="headerlink" title="MySQL与mysqlclient"></a>MySQL与mysqlclient</h3><h4 id="Django下载mysqlclient"><a href="#Django下载mysqlclient" class="headerlink" title="Django下载mysqlclient"></a>Django下载mysqlclient</h4><ol><li><a href="https://blog.csdn.net/qq_26164609/article/details/106881079">下载mysql(见博客)</a></li><li>下载mysqlclient</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install python3-dev default-libmysqlclient-dev# 先安装python3-dev和defalut-libmysqlclient-dev包sudo pip install mysqlclient# 安装mysqlclientsudo pip3 freeze|grep -i &#39;mysql&#39;# 检查mysqlclient是否安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/03/lGw9NFq6HRtxm3u.png"></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><h5 id="进入mysql数据库执行"><a href="#进入mysql数据库执行" class="headerlink" title="进入mysql数据库执行"></a>进入mysql数据库执行</h5><p><code>create database 数据库名 default charset utf8;</code></p><p>通常数据库名跟项目名保持一致</p><h5 id="settings-py里进行数据库的配置"><a href="#settings-py里进行数据库的配置" class="headerlink" title="settings.py里进行数据库的配置"></a>settings.py里进行数据库的配置</h5><p>修改DATABASES配置项的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'mysite3'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'14'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span><span class="token string">'3306'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>ENGINE</strong>:指定数据库存储引擎</p></li><li><p><strong>NAME</strong>:指定要连接的数据库的名称</p></li><li><p><strong>USER</strong>:指定登录到数据库的用户名</p></li><li><p><strong>PASSWORD</strong>:数据库的密码</p></li><li><p><strong>HOST/PORT</strong>:连接具体数据库的IP和端口</p></li></ul><h4 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h4><ul><li>迁移是Django同步您对模型所做更改（添加字段，删除模型等）到您的数据库模式的方式</li></ul><h5 id="生成迁移文件执行-python3-manage-py-makemigrations-应用名"><a href="#生成迁移文件执行-python3-manage-py-makemigrations-应用名" class="headerlink" title="生成迁移文件执行 python3 manage.py makemigrations 应用名"></a>生成迁移文件执行 <code>python3 manage.py makemigrations 应用名</code></h5><p>​    将应用下的models.py文件生成一个中间文件，并保存在migrations文件夹中</p><h5 id="执行迁移脚本程序-执行-python3-manage-py-migrate"><a href="#执行迁移脚本程序-执行-python3-manage-py-migrate" class="headerlink" title="执行迁移脚本程序-执行 python3 manage.py migrate"></a>执行迁移脚本程序-执行 <code>python3 manage.py migrate</code></h5><p>​    执行迁移程序实现迁移。将每个应用下的migrations目录中的中间文件同步回数据库</p><h3 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h3><ul><li><p>定义：ORM（Object Relational Mapping）即对象关系映射，它是一种程序技术，它允许你使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库</p></li><li><p>作用：</p><ul><li><p>建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库。</p></li><li><p>根据设计的模型类生成数据库中的表格。</p></li><li><p>通过简单的配置就可以进行数据库的切换。</p></li></ul></li><li><p>优点：</p><ul><li><p>只需要面向对象编程，不需要面向数据库编写代码</p></li><li><p>对数据库的操作都转化成对类属性和方法的操作</p></li><li><p>不用编写各种数据库的sql语句.</p></li><li><p>实现了数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异</p></li><li><p>不在关注用的是mysql、oracle…等数据库的内部细节</p></li><li><p>通过简单的配置就可以轻松更换数据库，而不需要修改代码</p></li></ul></li><li><p>缺点</p><ul><li><p>对于复杂业务，使用成本较高</p></li><li><p>根据对象的操作转换成SQL语句，根据查询的结果转化成对象，在映射过程中有性能损失</p></li></ul></li><li><p>映射关系</p><img src="https://i.loli.net/2021/10/03/YyEJjDhH9R4U3M1.png" style="zoom:30%;" /></li></ul><h3 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h3><h4 id="ORM操作"><a href="#ORM操作" class="headerlink" title="ORM操作"></a>ORM操作</h4><p>基本操作包括增删改查操作，即（CRUD操作）</p><p>CRUD是指在做计算处理时的增加（Create）、读取查询（Read）、更新(Update)和删除(Delete)</p><p>ORM CRUD核心—&gt;模型类.<font color='red'><strong>管理器对象</strong></font></p><h4 id="管理器对象"><a href="#管理器对象" class="headerlink" title="管理器对象"></a>管理器对象</h4><p>每个继承自models.Model的模型类，都会有一个objects对象被同样继承下来。这个对象叫管理器对象</p><p>数据库的增删改查可以通过模型的管理器实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">#object是管理器对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建数据-1"><a href="#创建数据-1" class="headerlink" title="创建数据"></a>创建数据</h4><p>Django ORM 使用一种直观的方式把数据库表中的数据表示成</p><p>Python 对象</p><p>创建数据中每一条记录就是创建一个数据对象</p><h5 id="方案1："><a href="#方案1：" class="headerlink" title="方案1："></a>方案1：</h5><p><code>MyModel.objects.create(属性1=值1,属性2=值2,...)</code></p><p>​    成功：返回创建好的实体对象</p><p>​    失败：抛出异常</p><h5 id="方案2："><a href="#方案2：" class="headerlink" title="方案2："></a>方案2：</h5><p>创建模型类对象，并调用save()保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">obj<span class="token operator">=</span>MyModel<span class="token punctuation">(</span>属性<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>属性<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>属性<span class="token operator">=</span>值obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h3><p>在Django提供了一个交互式的操作项目叫Django Shell 它能够在交互模式用项目工程的代码执行相应的操作</p><p>利用Django Shell 可以代替编写view的代码来进行直接操作</p><p>注意：<font color='red'>项目代码发生变化时，重新进入Django shell</font></p><p>启动方式：<code>python3 manage.py shell</code></p><img src="https://i.loli.net/2021/10/04/lPC1NmpV4SuqhO9.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoORM基础字段与选项</title>
      <link href="/2021/10/03/DjangoORM%E5%9F%BA%E7%A1%80%E5%AD%97%E6%AE%B5%E4%B8%8E%E9%80%89%E9%A1%B9/"/>
      <url>/2021/10/03/DjangoORM%E5%9F%BA%E7%A1%80%E5%AD%97%E6%AE%B5%E4%B8%8E%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="创建模型类流程"><a href="#创建模型类流程" class="headerlink" title="创建模型类流程"></a>创建模型类流程</h3><ul><li>创建并注册应用</li><li>在应用下的model.py中编写模型类</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> 模型类名<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    字段名 <span class="token operator">=</span> models<span class="token punctuation">.</span>字段类型<span class="token punctuation">(</span>字段选项<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迁移同步 <code>makemigrations</code>和<code>migrate</code></li></ul><h3 id="migrations文件重置管理"><a href="#migrations文件重置管理" class="headerlink" title="migrations文件重置管理"></a>migrations文件重置管理</h3><img src="https://i.loli.net/2021/10/07/Vb2QBxUlcN9XKhY.png" style="zoom:37%;" /><p>如果你直接删除migrations文件，下次执行 makemigrations 命令时就会报错，因为多个 migrations 文件是有关联的。</p><ol><li><code>python manage.py migrate --fake app名 zero</code>  即可重置对应 app 下面 migrations 文件，即自动清除该 app 下面 migrations 文件执行记录</li><li>删除对应 app 下面的 migrations 文件</li><li>执行 <code>python manage.py makemigrations</code> 重新生成 migrations 文件</li><li>然后执行 <code>python manage.py migrate --fake app名</code> 重新在数据库中 migrations 表记录 migrate 执行记录，但并不会执行 migrations 文件中的代码。</li></ol><p>这样就做到了，既不对现有的数据库改动，而又可以重置 migraion 文件</p><h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><h4 id="BooleamField"><a href="#BooleamField" class="headerlink" title="BooleamField()"></a>BooleamField()</h4><ul><li>数据库类型:tinyint(1)</li><li>编程语言中:使用True或者False来表示值</li><li>在数据库中:使用1或0来表示具体的值</li></ul><h4 id="CharField"><a href="#CharField" class="headerlink" title="CharField()"></a>CharField()</h4><ul><li>数据库类型:varchar</li><li>注意：<font color='red'>必须指定max_lenth的值</font></li></ul><h4 id="DataField"><a href="#DataField" class="headerlink" title="DataField()"></a>DataField()</h4><p>数据库类型：date</p><p>作用：表示日期(精确到日)</p><p>参数：</p><ol><li><p>auto_now：<strong>每次</strong>保存对象时，自动设置该字段为当前时间(取值:True／False)</p></li><li><p>auto_now_add：当对象<strong>第一次</strong>被创建时自动设置当前时间(取值:True／False)</p></li><li><p>default：设置当前时间(取值：字符串格式时间如:2019—6—1)</p><p><font color='red'>以上三个参数只能多选一</font></p></li></ol><h4 id="DataTimeField"><a href="#DataTimeField" class="headerlink" title="DataTimeField()"></a>DataTimeField()</h4><p>数据库类型：datatime(5)</p><p>作用：表示日期</p><p>参数同DataField(精确到秒)</p><h4 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField()"></a>FloatField()</h4><p>数据库类型：double</p><p>编程语言和数据库都使用小数表示值</p><h4 id="DecimalField"><a href="#DecimalField" class="headerlink" title="DecimalField()"></a>DecimalField()</h4><p>数据库类型：decimal(x,y)</p><p>编程语言中：使用小数表示该列的值在数据库中：使用小数</p><p>参数：</p><p>​    1. max_digits(<font color='red'>必须指定</font>)：位数总数，包括小数点后的位数。该值必须大于等于decimal_places.</p><p>​    2. decimal＿places：小数点后的数字数量 </p><h4 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField()"></a>EmailField()</h4><p>数据库类型：varchar</p><p>编程语言和数据库中使用字符串</p><h4 id="IntegarField"><a href="#IntegarField" class="headerlink" title="IntegarField()"></a>IntegarField()</h4><p>数据库类型：int</p><p>编程语言和数据库中使用整数</p><h4 id="ImageField"><a href="#ImageField" class="headerlink" title="ImageField()"></a>ImageField()</h4><p>数据库类型：varchar(100)</p><p>作用：在数据库中保存图片的路径</p><p>编程语言和数据库中使用字符串</p><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField()"></a>TextField()</h4><p>数据库类型：longtext</p><p>作用：表示不定长的字符数据</p><h3 id="字段选项"><a href="#字段选项" class="headerlink" title="字段选项"></a>字段选项</h3><p>字段选项，指定创建的列的额外的信息</p><p>允许出现多个字段选项，多个选项之间使用<strong>逗号</strong>隔开</p><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h4><p>​    如果设置为True，表示该列为<strong>主键</strong>，如果指定一个字段为主键，则此数库表不会创建id字段</p><h4 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h4><p>​    设置为True时，字段可以为空。设置为False时，字段是必须填写的(admin后台的，与null不同)</p><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>​    如果设置为True，表示该列值允许为空。(业务上不建议)</p><p>​    默认为False，如果此选项为False建议加入default选项来设置默认值</p><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>​    设置所在列的默认值，如果字段选项null＝False建议添加此项</p><p>​    从程序的角度，而非数据库的角度设置默认值(增加orm灵活性)</p><img src="https://i.loli.net/2021/10/03/o2nKAzITjtRN8PC.png" style="zoom:50%;" /><h4 id="db-index"><a href="#db-index" class="headerlink" title="db_index"></a>db_index</h4><p>​    如果设置为True，表示为该列增加索引</p><pre class="line-numbers language-none"><code class="language-none">这并不是真正的 django 特定的；更多地与数据库有关。当您想要加快对该列的搜索速度时，您可以在该列上添加索引。通常，数据库只索引主键。这意味着优化了使用主键的查找。如果您对辅助列进行大量查找，请考虑向该列添加索引以加快速度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p>​    如果设置为True，表示该字段在数据库中的值必须是唯一（不能重复出现的）</p><h4 id="db-column"><a href="#db-column" class="headerlink" title="db_column"></a>db_column</h4><p>​    指定列的名称，如果不指定的话则采用属性名作为列名</p><h4 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose name"></a>verbose name</h4><p>​    设置此字段在<strong>admin</strong>界面上的显示名称</p><h3 id="Meta内部类"><a href="#Meta内部类" class="headerlink" title="Meta内部类"></a>Meta内部类</h3><p>定义：使用内部Meta类来给模型赋予属性，Meta类下有很多内建的类属性，可对模型类做一些控制</p><img src="https://i.loli.net/2021/10/03/82np1zlZb7EMiqv.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django静态文件，应用及分布式路由</title>
      <link href="/2021/10/03/Django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BA%94%E7%94%A8%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1/"/>
      <url>/2021/10/03/Django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BA%94%E7%94%A8%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="新建django项目需要修改的配置"><a href="#新建django项目需要修改的配置" class="headerlink" title="新建django项目需要修改的配置"></a>新建django项目需要修改的配置</h3><ul><li><p>MIDDLEWARE中关闭csrf防范</p></li><li><p>TEMPLATES中DIRS设为模板目录</p></li><li><p>LANGUAGE_CODE改为zh-Hans</p></li><li><p>TIME_ZONE改为Asia/Shanghai</p></li><li><p>添加STATICFILES_DIRS(该配置项为元组<code>(os,os,)</code>,可配置多个静态文件的目录)</p></li><li><p><code>create database notebook default charset utf8;</code>创建数据库</p><p>pycharm在主应用<code>__init.py__</code>内添加</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>DATABASES设置为</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>         <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>         <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'notebook'</span><span class="token punctuation">,</span>         <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>         <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'14'</span><span class="token punctuation">,</span>         <span class="token string">'HOST'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>         <span class="token string">'PORT'</span><span class="token punctuation">:</span><span class="token string">'3306'</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><h4 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h4><ul><li><p>settings.py中<code>STATIC URL=&#39;/static/&#39;</code></p></li><li><p>指定访问静态文件时是需要通过/static/xxx或<a href="http://127.0.0.1:8000/static/xxx">http://127.0.0.1:8000/static/xxx</a></p></li><li><p>配置静态文件的存储路径<code>STATICFILES＿DIRS</code></p></li></ul><p>​    <code>STATICFILES＿DIRS</code>保存的是静态文件在服务器端的存储位置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># file: setting.py </span>STATICFILES_DIRS <span class="token operator">=</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板中加载静态文件的三种方式"><a href="#模板中加载静态文件的三种方式" class="headerlink" title="模板中加载静态文件的三种方式"></a>模板中加载静态文件的三种方式</h4><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:8000/static/image/django2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/image/django2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">load</span> <span class="token variable">static</span> <span class="token delimiter punctuation">%&#125;</span></span> <span class="token comment">&lt;!--加载STATIC_URL--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">static</span> <span class="token string">'image/django2.jpg'</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>STATIC_URL = &#39;/static/&#39;</code>时，第三种方式仍能正常加载静态文件</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>应用在Django项目中是一个独立业务模块，可以包含自己的路由，视图，模板和模型</p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><h5 id="步骤1-用startapp创建应用文件夹"><a href="#步骤1-用startapp创建应用文件夹" class="headerlink" title="步骤1 用startapp创建应用文件夹"></a>步骤1 用startapp创建应用文件夹</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 manage.py startapp music<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="步骤2-在setting-py的INSTALLED-APP列表中配置安装此应用"><a href="#步骤2-在setting-py的INSTALLED-APP列表中配置安装此应用" class="headerlink" title="步骤2 在setting.py的INSTALLED_APP列表中配置安装此应用"></a>步骤2 在setting.py的INSTALLED_APP列表中配置安装此应用</h5><h3 id="分布式路由"><a href="#分布式路由" class="headerlink" title="分布式路由"></a>分布式路由</h3><p>Django中，主路由配置文件(urls.py)可以不处理用户具体路由，主路由配置文件的可以做请求的分发（分布式请求处理）。具体的请求可以由各自的应用来进行处理</p><img src="https://i.loli.net/2021/09/30/iqVxDtIyUdnGWM6.png" style="zoom: 50%;" /><h4 id="配置分布式路由"><a href="#配置分布式路由" class="headerlink" title="配置分布式路由"></a>配置分布式路由</h4><h5 id="步骤1-主路由中调用include函数"><a href="#步骤1-主路由中调用include函数" class="headerlink" title="步骤1 主路由中调用include函数"></a>步骤1 主路由中调用include函数</h5><p>​    <strong>语法</strong>:<code>include(&#39;app名字.url模块名&quot;)</code></p><p>​    <strong>作用</strong>:用于将当前路由转到各个应用的路由配置文件的urlpatterns进行分布式处理</p><p>​    <strong>实例</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'test_static/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test_static<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'music/'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">'music.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="步骤2-应用下配置urls-py"><a href="#步骤2-应用下配置urls-py" class="headerlink" title="步骤2  应用下配置urls.py"></a>步骤2  应用下配置urls.py</h5><p>​    应用下<strong>手动创建</strong>urls.py</p><p>​    内容结构同主路由完全一样</p><h3 id="应用下模板"><a href="#应用下模板" class="headerlink" title="应用下模板"></a>应用下模板</h3><h4 id="应用内部配置模板目录"><a href="#应用内部配置模板目录" class="headerlink" title="应用内部配置模板目录"></a>应用内部配置模板目录</h4><ol><li><p>应用下手动创建templates文件夹 </p></li><li><p>settings.py中开启应用模板功能</p><p>TEMPLATE配置项中的<strong>APP_DIRS</strong>值为True即可</p></li></ol><h5 id="应用下templates和外层templates都存在时，-django得查找模板规则"><a href="#应用下templates和外层templates都存在时，-django得查找模板规则" class="headerlink" title="应用下templates和外层templates都存在时， django得查找模板规则"></a>应用下templates和外层templates都存在时， django得查找模板规则</h5><ol><li><p>优先查找外层templates目录下的模板</p></li><li><p>按INSTALLED_APPS配置下的应用顺序逐层查找（先注册应用的模板被使用 ）</p></li></ol><h5 id="使用templates嵌套文件夹可解决应用内模板冲突"><a href="#使用templates嵌套文件夹可解决应用内模板冲突" class="headerlink" title="使用templates嵌套文件夹可解决应用内模板冲突"></a>使用templates嵌套文件夹可解决应用内模板冲突</h5><img src="https://i.loli.net/2021/10/03/qYC2oB3TPNJpzQ8.png" style="zoom:70%;" /><img src="https://i.loli.net/2021/10/03/es1OzvyG6gHYr7u.png" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DjangoURL反向解析</title>
      <link href="/2021/09/29/DjangoURL%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/09/29/DjangoURL%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="代码中url出现位置"><a href="#代码中url出现位置" class="headerlink" title="代码中url出现位置"></a>代码中url出现位置</h4><p>模板[html]中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--点击链后，页面跳转至url--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>url<span class="token punctuation">'</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>post<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--form表单中的数据 用post方法--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图函数中 302跳转</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HttpResponseRedirect<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token comment"># 将用户地址栏的地址跳转到url</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="‘-‘开头的相对地址"><a href="#‘-‘开头的相对地址" class="headerlink" title="‘/‘开头的相对地址"></a>‘/‘开头的相对地址</h4><p>urls.py中<code>path(&#39;test/url&#39;, views.test_url),</code></p><p>模板中</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>带'/'的相对地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> #解析成../test_url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不带'/'的相对地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> #解析成../test/test/url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="URL反向解析"><a href="#URL反向解析" class="headerlink" title="URL反向解析"></a>URL反向解析</h3><p>模板html中动态的超链接，视图函数中动态的url</p><h5 id="urls-py中path函数中使用name-参数添加别名-入度"><a href="#urls-py中path函数中使用name-参数添加别名-入度" class="headerlink" title="urls.py中path函数中使用name=参数添加别名(入度)"></a>urls.py中path函数中使用<code>name=</code>参数添加别名(入度)</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'test_urls/&lt;int:age>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test_url<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="模板html中url反向解析-出度"><a href="#模板html中url反向解析-出度" class="headerlink" title="模板html中url反向解析(出度)"></a>模板html中url反向解析(出度)</h4><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">url</span> <span class="token string">'别名'</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">url</span> <span class="token string">'别名'</span> <span class="token string">'参数值1'</span> <span class="token string">'参数2'</span> <span class="token delimiter punctuation">%&#125;</span></span> <span class="token comment">&lt;!--path转换器--></span>ex:<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">url</span> <span class="token string">'test'</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">url</span> <span class="token string">'test'</span> <span class="token string">'100'</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">url</span> <span class="token string">'test'</span> <span class="token variable">name</span><span class="token operator">=</span><span class="token string">'bai'</span> <span class="token variable">age</span><span class="token operator">=</span><span class="token string">'19'</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="作业-模板url反向解析"><a href="#作业-模板url反向解析" class="headerlink" title="作业:模板url反向解析"></a>作业:模板url反向解析</h5><p>思路 u&gt;<strong>uh</strong>-&gt;ur-&gt;urh</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#urls.py</span>    path<span class="token punctuation">(</span><span class="token string">'test_url'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>test_url<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'test_url_result/&lt;int:page>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>test_url_result<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">#views.py</span><span class="token keyword">def</span> <span class="token function">test_url</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_url.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_url_result</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_url_result.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--test_url.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url test is ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">h2ef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>test<span class="token punctuation">'</span> page=100 %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>url test result<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--test_url_result.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url test result is ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="视图函数中的url反向解析-入度"><a href="#视图函数中的url反向解析-入度" class="headerlink" title="视图函数中的url反向解析(入度)"></a>视图函数中的url反向解析(入度)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reversereverse<span class="token punctuation">(</span><span class="token string">'别名'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'bai'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 通过列表和字典，传参给path转换器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="作业：视图函数url反向解析"><a href="#作业：视图函数url反向解析" class="headerlink" title="作业：视图函数url反向解析"></a>作业：视图函数url反向解析</h5><p>思路：<strong>u</strong>-&gt;ur-&gt;urh</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#urls.py</span>    path<span class="token punctuation">(</span><span class="token string">'test_url/&lt;int:path>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>test_url_result<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'test_url/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>test_url<span class="token punctuation">)</span>    <span class="token comment">#views.py</span><span class="token keyword">def</span> <span class="token function">test_url</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_url_result</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_url_result.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--test_url.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url test is ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">h2ef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>test<span class="token punctuation">'</span> page=100 %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>url test result<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--test_url_result.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>url test result is ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="url相关总结"><a href="#url相关总结" class="headerlink" title="url相关总结"></a>url相关总结</h4><p><img src="https://i.loli.net/2021/09/29/m7S6esqtRcEwTzH.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django设计模式及模板层</title>
      <link href="/2021/09/28/Django%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/09/28/Django%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="传统的MVC"><a href="#传统的MVC" class="headerlink" title="传统的MVC"></a>传统的MVC</h4><img src="https://i.loli.net/2021/09/28/9OZNM7aGCqwEi2H.png" style="zoom: 33%;" /><p>Django中的MTV模式</p><img src="https://i.loli.net/2021/09/28/d5kEU1tObsBKezA.png" style="zoom: 33%;" /><h3 id="模板层"><a href="#模板层" class="headerlink" title="模板层"></a>模板层</h3><h4 id="什么是模板层"><a href="#什么是模板层" class="headerlink" title="什么是模板层"></a>什么是模板层</h4><img src="https://i.loli.net/2021/09/28/wc8pmLTEsWQxXa9.png" style="zoom: 25%;" /><h4 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h4><p><strong>创建模板文件夹<code>＜项目名＞/templates</code></strong></p><p>在settings.py 中 TEMPLATES 配置项 </p><ol><li><p> BACKEND：指定模板的引擎</p></li><li><p> DIRS：模板的搜索目录（可以是一个或多个）</p></li><li><p> APP＿DIRS：是否要在应用中的templates文件夹中搜索模板文件</p></li><li><p> OPTIONS：有关模板的选项</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span> <span class="token comment"># 模板引擎</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 模板的搜索目录</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 是否要在应用中的templates文件夹中搜索模板文件</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token comment"># 有关模板的选项</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>os.path常用函数</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.abspath(path)</td><td>返回绝对路径</td></tr><tr><td>os.path.dirname(path)</td><td>返回文件路径</td></tr><tr><td>os.path.join(path1[, path2[, …]])</td><td>把目录和文件名合成一个路径</td></tr></tbody></table></li><li><p>配置项中 需要修改部分</p><p><code>&#39;DIRS&#39;:[os.path.join(BASE＿DIR,&#39;templates&#39;)］</code></p></li></ul><h4 id="模板的加载方式"><a href="#模板的加载方式" class="headerlink" title="模板的加载方式"></a>模板的加载方式</h4><h5 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h5><p>通过<strong>loader</strong>获取模板，通过<strong>HttpResponse</strong>进行响应在视图函数中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">test_template</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> loader    t <span class="token operator">=</span> loader<span class="token punctuation">.</span>get_template<span class="token punctuation">(</span><span class="token string">'test_template.html'</span><span class="token punctuation">)</span> <span class="token comment"># 返回一个template对象</span>    html <span class="token operator">=</span> t<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 字典数据</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h5><p>使用render()直接加载并响应模板在视图函数中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_template</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_template.html'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 第三个参数是一个字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="视图层与模板层之间的交互"><a href="#视图层与模板层之间的交互" class="headerlink" title="视图层与模板层之间的交互"></a>视图层与模板层之间的交互</h3><ol><li><p>视图函数中可以将Python变量封装到字典中传递到<strong>模板</strong></p><p>样例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_template</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    dic<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tux'</span><span class="token punctuation">,</span>        <span class="token string">'test'</span><span class="token punctuation">:</span><span class="token string">'200'</span><span class="token punctuation">,</span>        <span class="token string">'end'</span><span class="token punctuation">:</span><span class="token string">'done'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_template.html'</span><span class="token punctuation">,</span>dic<span class="token punctuation">)</span> <span class="token comment">#写好字典后，不要忘记把字典传入render</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模板中，我们可以用语法调用试图函数传进来的变量</p><p>样例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; name &#125;&#125;template test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; test &#125;&#125;&#123;&#123; end &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/28/ueNGmod2xQBL6gM.png" style="zoom:67%;" /></li></ol><h4 id="在模板中使用变量语法"><a href="#在模板中使用变量语法" class="headerlink" title="在模板中使用变量语法"></a>在模板中使用变量语法</h4><ul><li><p>{ {变量名}}</p></li><li><p>{ {变量名.index}} </p></li><li><p>{ {变量名.key}}</p></li><li><p>{ {对象方法}} (调用方法不需加括号)</p></li><li><p>{ {函数名}}</p></li></ul><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#urls.py</span><span class="token keyword">def</span> <span class="token function">test_template</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    dic<span class="token punctuation">[</span><span class="token string">'int'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">88</span>    dic<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'string'</span>    dic<span class="token punctuation">[</span><span class="token string">'lst'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'sd'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'sf'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    dic<span class="token punctuation">[</span><span class="token string">'dic'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span>    dic<span class="token punctuation">[</span><span class="token string">'func'</span><span class="token punctuation">]</span><span class="token operator">=</span>say_hi    dic<span class="token punctuation">[</span><span class="token string">'class_obj'</span><span class="token punctuation">]</span><span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_template.html'</span><span class="token punctuation">,</span>dic<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hahaha'</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'wangwang'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"># test_template.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>int是&#123;&#123; int &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>str是&#123;&#123; str &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>lst是&#123;&#123; lst &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>lst[0]是&#123;&#123; lst.0 &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>dic是&#123;&#123; dic &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>dic[a]是&#123;&#123; dic.a &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>func是&#123;&#123; func &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>class_obj是&#123;&#123; class_obj.say &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/28/MPmDgCWStIsTnf1.png" style="zoom:50%;" /><h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><p>作用：将一些服务器端的功能嵌入到模板中，例如流程控制等</p><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><p>语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span><span class="token keyword">if</span> expr1<span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">elif</span> expr2 <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">elif</span> expr3 <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="练习-if标签"><a href="#练习-if标签" class="headerlink" title="练习:if标签"></a>练习:if标签</h5><img src="https://i.loli.net/2021/09/28/NgV1q2TXSICKf4G.png" style="zoom:50%;" /><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">if</span> <span class="token variable">x</span> <span class="token operator">==</span> <span class="token number">20</span> <span class="token delimiter punctuation">%&#125;</span></span>x is 20<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">elif</span> <span class="token variable">x</span> <span class="token operator">==</span> <span class="token number">30</span> <span class="token delimiter punctuation">%&#125;</span></span>x is 30<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习：if标签计算器"><a href="#练习：if标签计算器" class="headerlink" title="练习：if标签计算器"></a>练习：if标签计算器</h4><img src="https://i.loli.net/2021/09/28/VvSTgFuaIL6KCtb.png" style="zoom:50%;" /><pre class="line-numbers language-html" data-language="html"><code class="language-html"># mysite1/templates/mycal.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>mycal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/mycal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;&#123;</span> <span class="token attr-name">x</span> <span class="token attr-name">&#125;&#125;</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>op<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;option value="add" &#123;% if op == 'add' %&#125;selected&#123;% endif %&#125;>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value="sub" &#123;% if op == 'sub' %&#125;selected&#123;% endif %&#125;>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value="mul" &#123;% if op == 'mul' %&#125;selected&#123;% endif %&#125;>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        &lt;option value="div" &#123;% if op == 'div' %&#125;selected&#123;% endif %&#125;>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; y &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>=&#123;&#123; result &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--submit后再次调用mycal函数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mysite1/mysite1/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">def</span> <span class="token function">mycal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'mycal.html'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        op <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'op'</span><span class="token punctuation">]</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> x <span class="token operator">-</span> y        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'mul'</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'div'</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> x <span class="token operator">/</span> y    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'mycal.html'</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for标签"><a href="#for标签" class="headerlink" title="for标签"></a>for标签</h4><p>语法：</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象 <span class="token delimiter punctuation">%&#125;</span></span>...循环语句<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">empty</span> <span class="token delimiter punctuation">%&#125;</span></span>...可迭代对象无数据时填充的语句<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/28/1KRosQxF6zdkqwf.png" style="zoom:50%;" /><h5 id="练习-for标签"><a href="#练习-for标签" class="headerlink" title="练习:for标签"></a>练习:for标签</h5><img src="https://i.loli.net/2021/09/28/EdBe3yNcpG1vUYR.png" style="zoom:50%;" /><pre class="line-numbers language-django" data-language="django"><code class="language-django"># mysite1/templates/test_for.html<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">for</span> <span class="token variable">name</span> <span class="token keyword">in</span> <span class="token variable">ls</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">if</span> <span class="token variable">forloop</span><span class="token punctuation">.</span><span class="token variable">first</span> <span class="token delimiter punctuation">%&#125;</span></span>first<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">forloop</span><span class="token punctuation">.</span><span class="token variable">revcounter0</span> <span class="token delimiter punctuation">&#125;&#125;</span></span> name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">if</span> <span class="token variable">forloop</span><span class="token punctuation">.</span><span class="token variable">last</span> <span class="token delimiter punctuation">%&#125;</span></span>last<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mysite1/mysite1/views.py</span><span class="token keyword">def</span> <span class="token function">test_for</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'ls'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sd'</span><span class="token punctuation">,</span><span class="token string">'sdg'</span><span class="token punctuation">,</span><span class="token string">'er'</span><span class="token punctuation">,</span><span class="token string">'er'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'test_for.html'</span><span class="token punctuation">,</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板过滤器"><a href="#模板过滤器" class="headerlink" title="模板过滤器"></a>模板过滤器</h3><p>定义：在变量输出时对变量的值进行处理</p><p>作用：可以通过使用过滤器来改变变量的输出显示</p><p>语法：</p><p>{ { 变量|过滤器1:’参数值1’| 1过滤器2:’参数值2’. .}}</p><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>lower</td><td>将字符串转换为全部小写。</td></tr><tr><td>upper</td><td>将字符串转换为大写形式。</td></tr><tr><td>safe</td><td>对变量内的字符串进行html转义</td></tr><tr><td>add:”n”</td><td>将value的值增加n</td></tr><tr><td>truncatechars:’n’</td><td>如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列“…”结尾。</td></tr></tbody></table><h3 id="模板的继承"><a href="#模板的继承" class="headerlink" title="模板的继承"></a>模板的继承</h3><p>模板继承可以使<strong>父模板</strong>的<strong>内容重用</strong>，<strong>子模板</strong>直接<strong>继承</strong>父模板的全部内容并可以<strong>覆盖父模板中相应的块</strong></p><h4 id="语法-父模板中："><a href="#语法-父模板中：" class="headerlink" title="语法-父模板中："></a>语法-父模板中：</h4><ol><li><p>定义父模板中的<strong>块block</strong>标签</p></li><li><p>标识出哪些在子模块中是<strong>允许被修改</strong>的</p></li><li><p>block标签：在父模板中定义，可以在子模板中覆盖</p></li></ol><h4 id="语法-子模版中："><a href="#语法-子模版中：" class="headerlink" title="语法-子模版中："></a>语法-子模版中：</h4><p>继承模板 extends 标签（写在模板文件的第一行）</p><p>​    <code>&#123;% extends 'base.html' %&#125;</code></p><p>子模板重写父模板中的内容块</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">block</span> <span class="token variable">block_name</span> <span class="token delimiter punctuation">%&#125;</span></span>子模板块用来覆盖父模板中 block＿name 块的内容<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endblock</span> <span class="token variable">block_name</span> <span class="token delimiter punctuation">%&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="重写的覆盖规则"><a href="#重写的覆盖规则" class="headerlink" title="重写的覆盖规则"></a>重写的覆盖规则</h4><p>​    不重写，将按照父模板的效果显示</p><p>​    重写，则按照重写效果显示</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>​    模板继承时，服务器端的<strong>动态内容</strong>无法继承</p><h4 id="作业：实现讲义内容"><a href="#作业：实现讲义内容" class="headerlink" title="作业：实现讲义内容"></a>作业：实现讲义内容</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index_base</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'qw'</span><span class="token punctuation">,</span><span class="token string">'qw'</span><span class="token punctuation">,</span><span class="token string">'tr'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index_base.html'</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_music</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index_music.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_sport</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index_sport.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token comment">&lt;!--mysite1/templates/index_base.html--></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我是主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;&#123;</span> <span class="token variable">ls</span> <span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index_music<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>音乐频道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index_sport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>体育频道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">block</span> <span class="token variable">info</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>有问题请联系bai62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token comment">&lt;!--mysite1/templates/index_music.index--></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">extends</span> <span class="token string">'index_base.html'</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我是音乐频道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">block</span> <span class="token variable">info</span> <span class="token delimiter punctuation">%&#125;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是音乐频道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django的请求及响应</title>
      <link href="/2021/09/27/Django%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%8A%E5%93%8D%E5%BA%94/"/>
      <url>/2021/09/27/Django%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%8A%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h3 id="Django中的请求"><a href="#Django中的请求" class="headerlink" title="Django中的请求"></a>Django中的请求</h3><ul><li><p>请求在Django中实则就是视图函数的第一个参数，即HttpRequest对象</p></li><li><p>Django接收到http协议的请求后，会根据请求数据报文创建HttpRequest对象</p></li><li><p>HttpRequest对象通过属性描述了请求的所有相关信息</p></li></ul><h4 id="Django请求详细信息"><a href="#Django请求详细信息" class="headerlink" title="Django请求详细信息"></a>Django请求详细信息</h4><ul><li><p>path＿info：URL字符串</p></li><li><p>method：字符串，表示HTTP请求方法，常用值：＇GET＇、＇POST＇</p></li><li><p>GET：QueryDict查询字典的对象，包含</p></li><li><p>get请求方式的所有数据</p></li><li><p>POST：QueryDict查询字典的对象，包含post请求方式的所有数</p></li></ul><p>据</p><ul><li><p>FILES：类似于字典的对象，包含所有的上传文件信息</p></li><li><p>COOKIES： Python字典，包含所有的cookie，键和值都为字符串session：似于字典的对象，表示当前的会话</p></li><li><p>body：字符串，请求体的内容（POST或PUT）scheme :请求协议(‘http’/‘https”)</p></li><li><p>request.get full path() :请求的完整路径 request.META ：请求中的元数据（消息头）</p></li><li><p>request.META[REMOTE ADDR’] :客户端IP地址</p></li></ul><h4 id="用代码查看Django请求信息"><a href="#用代码查看Django请求信息" class="headerlink" title="用代码查看Django请求信息"></a>用代码查看Django请求信息</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    path<span class="token punctuation">(</span><span class="token string">'test/request'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>reaquest_test<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">reaquest_test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'path_info 是 '</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'method 是 '</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'querystring 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILES 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'full path 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>get_full_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheme 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>test request ok&lt;/h1>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/27/gMZKF6cGhC3t7RI.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/27/ZdOE3lJve4cGqBy.png" style="zoom:50%;" /><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><img src="https://i.loli.net/2021/09/27/UCs3THyafQMjBF7.png" style="zoom:80%;" /><h4 id="构造函数格式"><a href="#构造函数格式" class="headerlink" title="构造函数格式"></a>构造函数格式</h4><p>HttpResponse(content＝响应体,content＿type＝响应体数据类型,status＝状态码)</p><p>作用：</p><p>​    向客户端浏览器返回响应，同时携带响应体内容</p><h5 id="常用的Content-Type"><a href="#常用的Content-Type" class="headerlink" title="常用的Content-Type"></a>常用的Content-Type</h5><ul><li><p><code>&#39;text/html&#39;</code>(默认的, html文件)</p></li><li><p><code>&#39;text/plain&#39; </code>(纯文本)</p></li><li><p><code>&#39;text/css&#39; </code>(css文件)</p></li><li><p><code>&#39;text/javascript&#39;</code> (js文件)</p></li><li><p><code>&#39;multipart/form-data&#39; </code>(文件提交)</p></li><li><p><code>&#39;application/json&#39; </code>(json传输) </p></li><li><p><code>&#39;application/xml&#39; </code>(xml文件)</p></li></ul><h4 id="HttpResponse子类"><a href="#HttpResponse子类" class="headerlink" title="HttpResponse子类"></a>HttpResponse子类</h4><img src="https://i.loli.net/2021/09/27/HsmWGg85rhoqpA9.png" style="zoom: 33%;" /><h5 id="HttpResponseRedirect练习"><a href="#HttpResponseRedirect练习" class="headerlink" title="HttpResponseRedirect练习"></a>HttpResponseRedirect练习</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    path<span class="token punctuation">(</span><span class="token string">'page/1'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>showpage<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'test/request'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>reaquest_test<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span>HttpResponseRedirect<span class="token keyword">def</span> <span class="token function">showpage</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>这是page为1的网页&lt;/h1>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">reaquest_test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'path_info 是 '</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'method 是 '</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'querystring 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILES 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'full path 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>get_full_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheme 是'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span><span class="token string">'/page/1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/27/AEqnNt4v3pCgVFr.png" style="zoom:50%;" /><h3 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h3><ul><li>无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>    处理GET请求时的业务逻辑<span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>    处理POST请求时的业务逻辑<span class="token keyword">else</span><span class="token punctuation">:</span>    其他业务逻辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GET处理"><a href="#GET处理" class="headerlink" title="GET处理"></a>GET处理</h4><ul><li><p>GET请求动作，一般用于向服务器获取数据</p></li><li><p>能够产生GET请求的场景：</p><ul><li><p>浏览器地址栏中输入URL，回车后 （拿回相应的html显示出来）</p></li><li><p>form表单中method为get</p></li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>地址?参数=值&amp;参数=值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--超链接向服务器拿html显示出来--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GET请求方式中，如果有数据需要传递给服务器，通常会用查询字符串（<strong>Query String</strong>）传递【注意：不要传递敏感数据】</p><p>URL 格式：xxx？参数名1＝值1＆参数名2＝值2…</p><ul><li>如：<a href="http://127.0.0.1:8000/page1?a=100&amp;b=200">http://127.0.0.1:8000/page1?a=100&amp;b=200</a> 服务器端接收参数</li></ul><p>获取客户端请求GET请求提交的数据</p><p><img src="https://i.loli.net/2021/09/27/x4WrEK67h19aZzN.png"></p><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><ul><li><p>POST请求动作，一般用于向服务器提交大量／隐私数据数据</p></li><li><p>客户端通过表单等POST请求将数据传递给服务器端，如：</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FirstName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mickey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LastName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mouse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　<font color=red><strong>取消csrf验证，否则Django将会拒绝客户端发来的POST请求,报403响应</strong></font></p><img src="https://i.loli.net/2021/09/27/NKoUkG8gxSWpurV.png" style="zoom:50%;" /><h5 id="取消csrf验证"><a href="#取消csrf验证" class="headerlink" title="取消csrf验证"></a>取消csrf验证</h5><ul><li><p>禁止掉<code>settings.py</code>中<code>MIDDLEWARE</code>中的<code>CsrfViewsMiddleWare</code>的中间件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MIDDLEWARE<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 'django.middleware.csrf.CsrfviewMiddleware',</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="GET与POST方法实例"><a href="#GET与POST方法实例" class="headerlink" title="GET与POST方法实例"></a>GET与POST方法实例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    path<span class="token punctuation">(</span><span class="token string">'test_get_post'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>test_get_post<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponsepost_form<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;form method="post" action='test_get_post'>    姓名&lt;input type="txt" name="name">    &lt;input type="submit" value="提交">&lt;/form>'''</span><span class="token keyword">def</span> <span class="token function">test_get_post</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'no b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>post_form<span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name is'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'test post is ok'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://i.loli.net/2021/09/27/6lqzVTEwZmn1BOb.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/27/hq4PS1xMioweL9I.png" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django处理URL请求</title>
      <link href="/2021/09/26/Django%E5%A4%84%E7%90%86URL%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/09/26/Django%E5%A4%84%E7%90%86URL%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>环境：linux | Django 2.1.12</p><p>课程：<a href="https://www.bilibili.com/video/BV1vK4y1o7jH?p=1">2021最新版Django全套视频（django框架快速上手）</a></p><h3 id="处理URL请求"><a href="#处理URL请求" class="headerlink" title="处理URL请求"></a>处理URL请求</h3><ul><li>浏览器地址栏-&gt; <a href="http://127.0.0.1:8000/page/2003/">http://127.0.0.1:8000/page/2003/</a></li></ul><ol><li>Django从配置文件中根据ROOT_URLCONF找到主路由文件；默认情况下，</li></ol><p>该文件在项目同名目录下的urls；例如<code>mysite1/mysite1/urls.py</code></p><ol start="2"><li><p>Django加载主路由文件中的<code>urlpatterns</code>变量[包含很多路由的数组]</p></li><li><p>依次匹配urlpatterns中的path， 匹配到第一个合适的中断后续匹配</p></li><li><p>匹配成功—调用对应的视图函数处理请求，返回响应</p></li><li><p>匹配失败—返回404响应</p></li></ol><h5 id="urls-py文件"><a href="#urls-py文件" class="headerlink" title="urls.py文件"></a>urls.py文件</h5><img src="https://i.loli.net/2021/09/26/9XpxKCEdhgqfkVo.png" style="zoom:67%;" /><h4 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h4><ul><li><p>视图函数是用于接收一个浏览器请求（HttpRequest对象）并通过 HttpResponse对象返回响应的函数。 此函数可以接收浏览器请 求并根据业务逻辑返回相应的响应内容给浏览器</p></li><li><p>语法</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">xxx_view</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span>，其它参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> HttpResponse对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>样例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># file： &lt;项目同名文件夹下>/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">page1_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>html <span class="token operator">=</span><span class="token string">"&lt;h1>这是第一个页面&lt;/h1>"</span><span class="token keyword">return</span> HttpResponse（html）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><img src="https://i.loli.net/2021/09/26/T3A8h7MqVxmyGa5.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/26/JiWv9qfcBCRgIlX.png" alt="image-20210925200402814" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/26/OSkYiJIQczm9MWq.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/26/X5ArMQbWjDcnN8g.png" style="zoom: 33%;" /><h3 id="path转换器"><a href="#path转换器" class="headerlink" title="path转换器"></a>path转换器</h3><img src="https://i.loli.net/2021/09/26/FJ69la7VnDEcetW.png" style="zoom: 33%;" /><h4 id="练习：网页计算器"><a href="#练习：网页计算器" class="headerlink" title="练习：网页计算器"></a>练习：网页计算器</h4><img src="https://i.loli.net/2021/09/26/EOjXgtu2RP5bNJT.png" style="zoom: 33%;" /><img src="https://i.loli.net/2021/09/26/pCEDhT642dyRGz7.png" alt="效果图" style="zoom:50%;" /><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>urls.py文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> Comurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    path<span class="token punctuation">(</span><span class="token string">'&lt;int:p1>/&lt;str:op>/&lt;int:p2>'</span><span class="token punctuation">,</span>Com<span class="token punctuation">.</span>op<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Com.py文件(创建于urls.py同级文件下)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">op</span><span class="token punctuation">(</span>Request <span class="token punctuation">,</span> p1 <span class="token punctuation">,</span> op <span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'mul'</span> <span class="token punctuation">,</span> <span class="token string">'sub'</span> <span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>invalid opreator&lt;/h1>'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> p1 <span class="token operator">+</span> p2    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> p1 <span class="token operator">-</span> p2    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> p1 <span class="token operator">*</span> p2    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>%d&lt;/h1>'</span><span class="token operator">%</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="re-path-函数"><a href="#re-path-函数" class="headerlink" title="re_path()函数"></a>re_path()函数</h3><p>在url的匹配过程中可以使用<strong>正则表达式</strong>进行精确匹配</p><p>语法：</p><ul><li><p><code>re_path(reg, view, name=xxx)</code></p></li><li><p>正则表达式为命名分组模式(?P＜name＞pattern); 匹配提取</p></li></ul><p>参数后用关键字传参方式传递给<strong>视图函数</strong></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ol><li><p>re_path和path的作用都是一样的。只不过re_path是在写url的时候可以用正则表达式，功能更加强大。</p></li><li><p>写正则表达式都推荐使用原生字符串。也就是以r开头的字符串。</p></li><li><p>在正则表达式中定义变量，需要使用圆括号括起来。这个参数是有名字的，那么需要使用<code>(?P&lt;参数的名字&gt;)</code>。然后在后面添加正则表达式的规则。</p><p><strong>例如：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">re_path<span class="token punctuation">(</span><span class="token string">r"^list/(?P&lt;year>\d&#123;4&#125;)/$"</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>article_list<span class="token punctuation">)</span><span class="token punctuation">,</span>re_path<span class="token punctuation">(</span><span class="token string">r"^list/(?P&lt;month>\d&#123;2&#125;)/$"</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>article_list_month<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个表示以list开始，中间需要有4个数字，一个都不能多也不能少，再以 ‘/’ 结尾。<br>形如list/2222/这样的字符窜才能被识别，<br>同理，第二句是需要形如list/22/这样的字符窜才能被识别。</p></li><li><p>如果不是特别要求。直接使用path就够了，省的把代码搞的很麻烦。除非是url中确实是需要使用正则表达式来解决才使用re_path。</p></li></ol><h4 id="练习：网页计算器-1"><a href="#练习：网页计算器-1" class="headerlink" title="练习：网页计算器"></a>练习：网页计算器</h4><p>​    原题中的数字限制为个位数或十位数</p><p>​                                                            <img src="https://i.loli.net/2021/09/26/CkhqBZA4JDRb1zP.png" style="zoom: 50%;" /></p><img src="https://i.loli.net/2021/09/26/Zomh9ukBfHRV8OL.png" style="zoom:50%;" /><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py文件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> Com<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    re_path<span class="token punctuation">(</span><span class="token string">r'^(?P&lt;p1>\d&#123;1,2&#125;)/(?P&lt;op>\w+)/(?P&lt;p2>\d&#123;1,2&#125;)$'</span><span class="token punctuation">,</span>Com<span class="token punctuation">.</span>op<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#与urls.py同级的Com.py文件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">op</span><span class="token punctuation">(</span>request <span class="token punctuation">,</span> p1 <span class="token punctuation">,</span> op <span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'mul'</span> <span class="token punctuation">,</span> <span class="token string">'sub'</span> <span class="token punctuation">,</span> <span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>invalid opreator&lt;/h1>'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment"># 正则表达式将p1,p2为str类型，需转换为int类型后计算</span>    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>%d&lt;/h1>'</span><span class="token operator">%</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习：生日输出"><a href="#练习：生日输出" class="headerlink" title="练习：生日输出"></a>练习：生日输出</h4><p>​    效果样例：</p><p>​    输入网址：<a href="http://127.0.0.1:8000//birthday/2015/12/11">http://127.0.0.1:8000//birthday/2015/12/11</a> </p><p>​    显示为：生日为：2015年12月11日</p><img src="https://i.loli.net/2021/09/26/zZRusx7JSXFMlDE.png" style="zoom:50%;" /><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py文件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>re_path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> Dateurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 参数为 路由和视图函数</span>    re_path<span class="token punctuation">(</span><span class="token string">r'^birthday/(?P&lt;y>\d&#123;4&#125;)/(?P&lt;m>\d&#123;1,2&#125;)/(?P&lt;d>\d&#123;1,2&#125;)$'</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Data.py文件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'&lt;h1>%s年%s月%s日&lt;/h1>'</span><span class="token operator">%</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django项目结构</title>
      <link href="/2021/09/25/Django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/09/25/Django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>环境：linux | Django 2.1.12</p><p>课程：<a href="https://www.bilibili.com/video/BV1vK4y1o7jH?p=1">2021最新版Django全套视频（django框架快速上手）</a></p><h3 id="Django项目结构"><a href="#Django项目结构" class="headerlink" title="Django项目结构"></a>Django项目结构</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>执行<code>django-admin startproject 项目名</code> 即可创建出对应项目文件夹</p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><ul><li>启动［测试开发阶段］</li></ul><ol><li> 终端<code>cd</code>进入到项目文件夹，例如 <code>cd mysite1</code></li><li> 进入到项目文件夹后，执行 <code>python3 manage.py runserver</code> 启动</li></ol><p>django 服务【注：该启动方式下，Django在前台启动服务，默认监听<strong>8000端口</strong>】</p><img src="https://i.loli.net/2021/09/25/BryIAiXj3vO7nwS.png" style="zoom: 50%;" /><ol start="3"><li>浏览器访问 <strong><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a></strong>可看到django的启动页面注：【如果想更换端口，则可以用 <code>python3 manage.py runserver 端口号</code></li></ol><img src="https://i.loli.net/2021/09/25/nMmteWXiA9ZoQK1.png" style="zoom: 33%;" /><h4 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h4><p>方式1：在runserver启动终端下</p><p>执行Ctrl + c可关闭Django服务</p><p>方式2：在其他终端下</p><p>执行<code>sudo lsof -i:8000</code>查询出Django的进程PID （list open files）</p><p>执行<code>kill -9 对应Django进程PID</code></p><img src="https://i.loli.net/2021/09/25/A9PY5GSzJQRHLE7.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/09/25/DTY1NrMpkVG7Ctf.png" style="zoom: 86%;" /><h4 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a>manage.py</h4><p>manage.py 包含项目管理的子命令，如：</p><ul><li><p>python3 manage．py runserver 启动服务</p></li><li><p>python3 manage．py startapp 创建应用</p></li><li><p>python3 manage．py migrate 数据库迁移</p></li><li><p>…</p></li><li><p>直接执行 python3 manage．py 可列出所有的Django子命令</p></li></ul><h4 id="项目同名文件夹-mysite1-mysite1"><a href="#项目同名文件夹-mysite1-mysite1" class="headerlink" title="项目同名文件夹 - mysite1/mysite1"></a>项目同名文件夹 - mysite1/mysite1</h4><img src="https://i.loli.net/2021/09/25/P1rMasZuLJtCoGV.png" style="zoom:50%;" /><ul><li><p>_init_.py ：Python包的初始化文件</p></li><li><p>wsgi.py ： <strong>WEB服务网关</strong>的配置文件<strong>—Django</strong>正式启动时，需要用到</p></li><li><p>urls.py ：项目的<strong>主路由配置</strong>—<strong>HTTP</strong>请求进入<strong>Django</strong>时，优先调用该文件</p></li><li><p>settings.py：项目的<strong>配置文件</strong>—包含<strong>项目启动</strong>时需要的配置</p></li></ul><h4 id="settings-py配置详解"><a href="#settings-py配置详解" class="headerlink" title="settings.py配置详解"></a>settings.py配置详解</h4><h5 id="BASE-DIR"><a href="#BASE-DIR" class="headerlink" title="BASE_DIR"></a>BASE_DIR</h5><p>项目的路径， 即setting.py的上上级文件夹</p><img src="https://i.loli.net/2021/09/25/MkCcLaesOJpoAnq.png" style="zoom:80%;" /><h5 id="ALLOWED-HOSTS"><a href="#ALLOWED-HOSTS" class="headerlink" title="ALLOWED_HOSTS"></a>ALLOWED_HOSTS</h5><p>如果要在局域网其它主机也能访问此主机的Django服务，启动方式如下：</p><ul><li><p> <code>python3 manage.py runserver 0.0.0.0:5000</code></p></li><li><p>指定网络设备如果内网环境下其他主机想正常访问该站点，需加ALLOWED HOSTS＝［＇内网ip＇］</p></li></ul><img src="https://i.loli.net/2021/09/25/pLqKJui1EgwHDIW.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/09/25/j9TZI3MHEieA5gz.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/09/25/MWAE1d7bzIeSmhp.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/25/DbtfWFVma1JG57e.png" style="zoom: 33%;" /><h6 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h6><p>Default: <code>[]</code> (Empty list)</p><p>A list of strings representing the host/domain names that this Django site can serve. This is a security measure to prevent <a href="https://docs.djangoproject.com/en/3.2/topics/security/#host-headers-virtual-hosting">HTTP Host header attacks</a>, which are possible even under many seemingly-safe web server configurations.</p><p>Values in this list can be fully qualified names (e.g. <code>&#39;www.example.com&#39;</code>), in which case they will be matched against the request’s <code>Host</code> header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: <code>&#39;.example.com&#39;</code> will match <code>example.com</code>, <code>www.example.com</code>, and any other subdomain of <code>example.com</code>. A value of <code>&#39;*&#39;</code> will match anything; in this case you are responsible to provide your own validation of the <code>Host</code> header (perhaps in a middleware; if so this middleware must be listed first in <a href="https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-MIDDLEWARE"><code>MIDDLEWARE</code></a>).</p><p>When <a href="https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-DEBUG"><code>DEBUG</code></a> is <code>True</code> and <code>ALLOWED_HOSTS</code> is empty, the host is validated against <code>[&#39;.localhost&#39;, &#39;127.0.0.1&#39;, &#39;[::1]&#39;]</code>.</p><p><code>ALLOWED_HOSTS</code> is also <a href="https://docs.djangoproject.com/en/3.2/topics/testing/advanced/#topics-testing-advanced-multiple-hosts">checked when running tests</a>.</p><p>This validation only applies via <a href="https://docs.djangoproject.com/en/3.2/ref/request-response/#django.http.HttpRequest.get_host"><code>get_host()</code></a>; if your code accesses the <code>Host</code> header directly from <code>request.META</code> you are bypassing this security protection.</p><pre class="line-numbers language-none"><code class="language-none">Changed in Django 3.1:If &#96;ALLOWED_HOSTS&#96; is empty and &#96;DEBUG&#x3D;True&#96;, subdomains of localhost were allowed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="LANGUAGE-CODE"><a href="#LANGUAGE-CODE" class="headerlink" title="LANGUAGE_CODE"></a>LANGUAGE_CODE</h5><p>语言设置选项。默认为<code>&#39;en-us&#39;</code>,可以修改成中文<code>&#39;zh-Hans&#39;</code></p><img src="https://i.loli.net/2021/09/25/RSG1iPAKFJzXIV4.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/25/f8DlJHF9Oadm2bg.png" style="zoom: 33%;" /><h5 id="TIME-ZONE"><a href="#TIME-ZONE" class="headerlink" title="TIME_ZONE"></a>TIME_ZONE</h5><p>时区，应改为东八区</p><p><img src="https://i.loli.net/2021/09/25/Z3BvMRSoEkqrjNH.png"></p><h5 id="ROOT-URLCONF"><a href="#ROOT-URLCONF" class="headerlink" title="ROOT URLCONF"></a>ROOT URLCONF</h5><p>用于配置主url配置 ‘mysite1.urls’</p><ul><li><code>ROOT_URLCONF = &#39;mysite1.urls&#39;</code></li></ul><h4 id="代码中调用settings-py"><a href="#代码中调用settings-py" class="headerlink" title="代码中调用settings.py"></a>代码中调用settings.py</h4><p>settings.py中的所有配置项，都可以按需的在代码中引入</p><p>引入方式：<code>from django.conf import settings</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用总结</title>
      <link href="/2021/09/23/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/09/23/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/activity/content/57/">相关课程(需付费)</a></p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">一个git可视化的学习网站</a></p><p><img src="https://i.loli.net/2021/09/23/wETPzZLF1erl6cQ.png"></p><p><code>git log</code>或<code>git log --oneline</code> 查看版本库的结点树</p><img src="https://i.loli.net/2021/09/23/lJKDkadEjsoRFch.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/09/23/8Kf9vI3CU6FNGX5.png" style="zoom: 73%;" /><p><code>git reflog</code> 查看版本改动历史(包括回滚版本)</p><p><img src="https://i.loli.net/2021/09/23/pGbhkJ72qLCEHKo.png"></p><p><a href="https://www.acwing.com/activity/content/57/">更多内容见linux基础课git讲义</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh远程执行命令引号问题</title>
      <link href="/2021/09/17/ssh%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%BC%95%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/17/ssh%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%BC%95%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="ssh远程执行命令"><a href="#ssh远程执行命令" class="headerlink" title="ssh远程执行命令"></a>ssh远程执行命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh server &quot;cd homework ; ls&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　基本能完成常用的对于远程节点的管理了，几个注意的点：</p><ol><li>如果不加<strong>双引号</strong>，第二个ls命令在本地执行</li><li><strong>分号</strong>，两个命令之间用分号隔开</li></ol><h3 id="整条ssh命令用引号包围"><a href="#整条ssh命令用引号包围" class="headerlink" title="整条ssh命令用引号包围"></a>整条ssh命令用引号包围</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">a&#x3D;1ssh myserver echo $a # 正确 ssh myserver &quot;echo $a&quot; # 正确ssh myserver &#39;echo $a&#39; # 错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双引号</strong>在<strong>本地</strong>进行解析，所以传过去命令不是<code>echo $a</code>，而是<code>echo 1</code><br><strong>单引号</strong>在<strong>服务器</strong>进行解析，传过去的是```echo $a``，服务器不知道$a的值，解析为空</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh myserver &quot;for ((i &#x3D; 0; i &lt; 10; i ++ )) do echo $i; done&quot; # 错误ssh myserver &#39;for ((i &#x3D; 0; i &lt; 10; i ++ )) do echo $i; done&#39; # 正确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>双引号</strong>在<strong>本地</strong>进行解析，本地不知道<code>$i</code>的值，解析为空</p><p><strong>单引号</strong>在<strong>服务器</strong>进行解析，<code>$i</code>的值在服务器随循环变化</p><h3 id="shell命令变量中的空格问题-用ssh执行"><a href="#shell命令变量中的空格问题-用ssh执行" class="headerlink" title="shell命令变量中的空格问题(用ssh执行)"></a>shell命令变量中的空格问题(用ssh执行)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh ser mkdir homework&#x2F;lesson_4&#x2F;homework_4&#x2F;\&quot;$1\&quot; # 正确ssh ser mkdir homework&#x2F;lesson_4&#x2F;homework_4&#x2F;&quot;&#39;$1&#39;&quot; # 正确ssh ser mkdir homework&#x2F;lesson_4&#x2F;homework_4&#x2F;&#39;&quot;$1&quot;&#39; # 错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>如果shell命令(用ssh执行)中有空格，<strong>变量</strong>用双引号引起来</p></li><li><p>最外层是双引号，内嵌单引号，$等特殊符号依旧可以识别</p></li><li><p>最外层是单引号，内嵌双引号，$等特殊符号无法识别</p></li><li><p><code>mkdir “my dir” -&gt; mkdir my dir -&gt;创建my和dir文件夹</code></p></li><li><p><code>mkdir&quot;&#39;my dir&#39;&quot; -&gt;mkdir &#39;my dir&#39;-&gt;创建my dir文件夹</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长上升子序列(从n*n到nlogn)</title>
      <link href="/2021/09/10/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/09/10/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/897/">朴素解法原题链接</a></p><h3 id="朴素解法（时间复杂度O-n2-）"><a href="#朴素解法（时间复杂度O-n2-）" class="headerlink" title="朴素解法（时间复杂度O(n2)）"></a>朴素解法（时间复杂度O(n<sup>2</sup>)）</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><a href="https://www.acwing.com/problem/content/898/">栈优化解法原题链接</a></p><h3 id="栈优化解法-时间复杂度O-nlogn"><a href="#栈优化解法-时间复杂度O-nlogn" class="headerlink" title="栈优化解法 (时间复杂度O(nlogn))"></a>栈优化解法 (时间复杂度O(nlogn))</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字三角形</title>
      <link href="/2021/09/10/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2021/09/10/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/900/">原题链接</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。</p><pre class="line-numbers language-none"><code class="language-none">        7      3   8    8   1   0  2   7   4   44   5   2   6   5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 nn，表示数字三角形的层数。</p><p>接下来 nn 行，每行包含若干整数，其中第 ii 行表示数字三角形第 ii 层包含的整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大的路径数字和。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤5001≤n≤500,<br>−10000≤三角形中的整数≤10000−10000≤三角形中的整数≤10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">573 88 1 0 2 7 4 44 5 2 6 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><img src="https://i.loli.net/2021/09/10/BPbZnDdasNSMIul.png" style="zoom:67%;" /><img src="https://i.loli.net/2021/09/10/anMt1SX9vlkFWoO.png" style="zoom: 67%;" /><p>​                        行内自左向右，整行自上向下计算，最终得到<strong>起点</strong>到<strong>最后一行各点</strong>的最大距离</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//a储存数字三角形，f为从起点到任意点(i,j)的最大路径</span><span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">510</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">510</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span> <span class="token comment">//a数组中有负数，处理三角形边界时需要使用f的初始值做比较</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//等边三角形映射为等腰直角三角形后，录入数字三角形数据</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//起点到起点的最短距离为a[1][1]，其他f默认值为-INF，必须手动设置f[1][1]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//dynamic programming</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//起点到最后一排的各点值的最大值中，选取最大值的最大值</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC与三层架构设计</title>
      <link href="/2021/09/06/MVC%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>/2021/09/06/MVC%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>　　这段时间要学习hadoop，但是也希望把自己的web知识复习起来。所以花自己休息的时间把这些web的知识好好的巩固一下！没有什么可以阻挡我前进的脚步。</p><p>　　首先我们先了解一下：　　</p><p>　　　　C/S：客户端 / 服务器 （胖客户端） 　　　B/S：浏览器 / 服务器    （瘦客户端） 　　　JavaBean:就是一个普通类（实体bean），包含三样标准：一个无参构造、私有属性、公共的getter和setter方法。</p><h3 id="一、javaWeb开发模式之Model1"><a href="#一、javaWeb开发模式之Model1" class="headerlink" title="一、javaWeb开发模式之Model1"></a>一、javaWeb开发模式之Model1</h3><p>　　其实在前面中javaweb知识中我们主要讲了两大类：一是servlet，二是jsp。 　Servlet就是为了解决静态页面的问题，能够实现动态的页面，使维护，开发更加的方便，但是也有缺点，在Servlet嵌入HTML代码实在是太麻烦了，每次都要out.println();输出。 　所以就有了Jsp，JSP中的内容就是html，为的就是方便写html，写页面，本质上JSP也是一个servlet，所以在它中也会不可避免的要写一些java代码，也就是脚本，为了不让其那么混乱，就增加了标签，EL表达式来尽量代替脚本。 　但是在写一些项目时，还是会很麻烦，原因是业务逻辑代码，与<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>交互的代码，HTML代码这些类别，风格，作用完全不同的都混杂在了一起，造成的结果是代码的维护性，可读性以及扩张性都非常差，比如要改一个需求， 　那么必须要把全部代码都看完，理解到，不然你可能会因为修改了一处代码，导致别的地方多处错误，这种设计模式也叫做 模式一(Model 1)。</p><img src="https://i.loli.net/2021/09/06/6R3B4msxiqQCoVw.png" alt="" style="zoom: 80%;" /><h3 id="二、javaWeb开发模式之Model2（MVC）"><a href="#二、javaWeb开发模式之Model2（MVC）" class="headerlink" title="二、javaWeb开发模式之Model2（MVC）"></a>二、javaWeb开发模式之Model2（MVC）</h3><h4 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h4><p>　　为了改进上面所说的缺点，也就是将业务逻辑代码放一起，显示页面的HTML代码放一起，与数据库交互的代码放一起，这样开发思路更加清晰，维护起来也更加方便，这种就叫做MVC模式。</p><p>　　M：Model 模型，代表着业务逻辑代码与数据库代码，V：View 对数据的展示代码，比如JSP页面，就是专门用来展示数据，美化页面的 。</p><p>　　C:Controller　控制，Servlet来充当这一角色，连接着View和Model，从View中获得指令，在从model中通过业务逻辑代码获取需要的数据，然后在通过Servlet去交给View层去显示。也就是MVC三层结构的意义！</p><p>　　用图分析就是：</p><img src="https://i.loli.net/2021/09/06/xSgVYEhHLX7vT8e.png" alt="" style="zoom: 80%;" /><p>　　我们打开浏览器，输入网址，就是到服务器中请求页面(JSP也可能是别的)，然后显示到浏览器上，然后通过点击JSP页面上的内容，提交请求，到服务器中，也就到了Control(Servlet)这一块，</p><p>　　Servlet通过分析请求，知道用户需要什么，需要数据，那么就通过Model，从数据库拿到数据，在将数据显示在JSP中，在将JSP发送回浏览器，显示在用户看，</p><p>　　所以我们经常说，JSP就是View层，给用户看的，Servlet作为控制流程，而编写操作数据库代码，业务逻辑代码就属于Model。这就是MVC的应用。</p><h4 id="2-2、分析"><a href="#2-2、分析" class="headerlink" title="2.2、分析"></a>2.2、分析</h4><p>　　JSP + Servlet + JavaBean 　MVC:开发模式 　M: Model模型 JavaBean|四种作用域 　V：view视图  JSP 　C:Controller控制器 Servlet</p><img src="https://i.loli.net/2021/09/06/Ot2L1BbWKFdZeJl.png" alt="" style="zoom: 80%;" /><h3 id="三、经典三层架构"><a href="#三、经典三层架构" class="headerlink" title="三、经典三层架构"></a>三、经典三层架构</h3><p>　　表示层(web层)、业务逻辑层(service层)、数据访问层(dao层)，用一张图来描述这其中的关系：</p><img src="https://i.loli.net/2021/09/06/NBQCDMcfVnxtP1s.png" style="zoom: 67%;" /><p>　　因为现在只学习Servlet，Jsp，所以在表示层中就放的是Servlet和Jsp了，如果学了3大框架，Struts、Hibernate、Spring、会发现Struts是处理表示层的一个框架，而Hibernate是在dao层的一个框架，spring就是service层了。</p><img src="https://i.loli.net/2021/09/06/NBQCDMcfVnxtP1s.png" style="zoom: 67%;" /><p>　　分层思想：强内聚、弱耦合</p><p>　　实际项目中的包命名结构，其也是按照三层架构思想来进行编写代码：</p><img src="https://i.loli.net/2021/09/06/7j26zcnYq1mekAN.png" style="zoom:67%;" /><p>　　分析：（xxx:代表公司名称、yyy：代表项目名称）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>dao　　　　　　dao层接口　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl　　　　dao层实现　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>service　　　　service层接口　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl　　service层实现　　　　　　　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>web　　　　　　web层　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>util　　　　　　工具包　　　　　　com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>domain　　　　javabean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、总结</p><p>经典三层架构和MVC的关系：</p><p>　　他们是两个毫无相关的东西，经典三层架构是一种分层思想，将开发模式分为了这三层，每个人根据自己的专长，开发不同的模块，比如，前端工程师，那么就专研表示层即可，想办法如何让页面变的更好看，</p><p>　　如何吸引别人，而有些专门做数据库工作的人，就可以只关注操作数据库的活，如何让查询更加快速有效，而不必关注数据该如何显示这种问题。这就是分层带来的巨大好处。</p><p>　　而MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发。　　</p><p> 　如果说他们有关系的话：只能说他们有共同的点，分层，解耦</p><p><a href="https://cloud.tencent.com/developer/article/1023800">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程的架构</title>
      <link href="/2021/09/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>/2021/09/05/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="基于组件的三层B-S结构概述"><a href="#基于组件的三层B-S结构概述" class="headerlink" title="基于组件的三层B/S结构概述"></a>基于组件的三层B/S结构概述</h3><p>在<strong>软件体系架构设计</strong>中，<strong>分层式结构</strong>是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从<strong>下至上分别</strong>为：<strong>数据访问层</strong>、<strong>业务逻辑层</strong>（又或成为领域层）、<strong>表示层</strong>。</p><img src="https://i.loli.net/2021/09/05/xCes2KtcVkz9WZh.png" alt="" style="zoom: 33%;" /><h3 id="三层结构原理"><a href="#三层结构原理" class="headerlink" title="三层结构原理"></a>三层结构原理</h3><p>3个层次中，<strong>系统主要功能</strong>和<strong>业务逻辑</strong>都在<strong>业务逻辑层</strong>进行处理。<br>所谓三层体系结构，是在<strong>客户端</strong>与<strong>数据库</strong>之间加入了一个“中间层”，也叫<strong>组件层</strong>。这里所说的<strong>三层体系</strong>，不是指物理上的三层，不是简单地放置三台机器就是三层体系结构，也不仅仅有B/S应用才是三层体系结构，三层是指<strong>逻辑上的三层</strong>，即使这三个层放置到一台机器上。<br>三层体系的应用程序将<strong>业务规则</strong>、<strong>数据访问</strong>、<strong>合法性校验</strong>等工作放到了中间层进行处理。通常情况下，客户端不直接与数据库进行交互，而是通过COM/DCOM通讯与中间层建立连接，再经由中间层与数据库进行交互。</p><img src="https://i.loli.net/2021/09/05/MaIKm4ztexbcug7.png" alt="" style="zoom:33%;" /><p><strong>表示层</strong><br>位于<strong>最外层</strong>（最上层），离用户最近。用于显示数据和接收用户输入的数据，为用户提供一种交互式操作的界面</p><p><strong>业务逻辑层</strong><br>业务逻辑层（Business Logic Layer）无疑是系统架构中体现核心价值的部分。它的关注点主要集中在<strong>业务规则的制定</strong>、业务流程的实现等与业务需求有关的系统设计，也即是说它是与系统所应对的领域（Domain）逻辑有关，很多时候，也将业务逻辑层称为领域层。例如Martin Fowler在《Patterns of Enterprise Application Architecture》一书中，将整个架构分为三个主要的层：表示层、领域层和数据源层。作为领域驱动设计的先驱Eric Evans，对<strong>业务逻辑层</strong>作了更细致地划分，<strong>细分</strong>为<strong>应用层</strong>与<strong>领域层</strong>，通过分层进一步将<strong>领域逻辑</strong>与<strong>领域逻辑的解决方案</strong>分离。</p><img src="https://i.loli.net/2021/09/05/3iO2CjIbuo84QWS.png" alt="" style="zoom:33%;" /><p><strong>业务逻辑层</strong>在体系架构中的位置很关键，它处于<strong>数据访问层</strong>与<strong>表示层</strong>中间，起到了数据交换中承上启下的作用。由于层是一种<strong>弱耦合结构</strong>，层与层之间的依赖是<strong>向下</strong>的，底层对于上层而言是“无知”的，改变上层的设计对于其调用的底层而言没有任何影响。如果在分层设计时，遵循了<strong>面向接口设计</strong>的思想，那么这种向下的依赖也应该是一种<strong>弱依赖关系</strong>。因而在不改变接口定义的前提下，理想的<strong>分层式架构</strong>，应该是一个支持<strong>可抽取、可替换的“抽屉”式架构</strong>。正因为如此，业务逻辑层的设计对于一个<strong>支持可扩展的架构</strong>尤为关键，因为它扮演了两个不同的角色。对于<strong>数据访问层</strong>而言，它是<strong>调用者</strong>；对于<strong>表示层</strong>而言，它却是<strong>被调用者</strong>。依赖与被依赖的关系都纠结在<strong>业务逻辑层</strong>上，如何实现<strong>依赖关系</strong>的<strong>解耦</strong>，则是除了实现业务逻辑之外留给设计师的任务。</p><p><strong>数据层</strong><br><strong>数据访问层</strong>：有时候也称为是<strong>持久层</strong>，其功能主要是负责<strong>数据库的访问</strong>，可以访问<strong>数据库系统</strong>、<strong>二进制文件</strong>、<strong>文本文档</strong>或是<strong>XML文档</strong>。<br>简单的说法就是实现对数据表的<strong>Select，Insert，Update，Delete</strong>的操作。如果要加入ORM的元素，那么就会包括对象和数据表之间的mapping，以及对象实体的持久化</p><p>三层架构，<strong>数据层</strong>(DAL)、<strong>逻辑层</strong>(BLL)、<strong>表示层</strong>(UI);</p><h3 id="三层结构的优点"><a href="#三层结构的优点" class="headerlink" title="三层结构的优点"></a>三层结构的优点</h3><p><strong>分层式结构</strong>究竟其优势何在？Martin Fowler在《Patterns of Enterprise Application Architecture》一书中给出了答案：<br>1、开发人员可以<strong>只关注整个结构</strong>中的其中某一层；<br>2、可以很容易的用<strong>新的实现来替换原有层次的实现</strong>；<br>3、可以<strong>降低层与层之间的依赖</strong>；<br>4、有利于<strong>标准化</strong>；<br>5、利于各层逻辑的<strong>复用</strong>。</p><img src="https://i.loli.net/2021/09/05/JzwvX1BrlOZuaSN.png" alt="" style="zoom:33%;" /><p>概括来说，分层式设计可以达至如下目的：<strong>分散关注</strong>、<strong>松散耦合</strong>、<strong>逻辑复用</strong>、<strong>标准定义</strong>。<br>一个好的分层式结构，可以使得开发人员的分工更加明确。一旦定义好各层次之间的接口，负责不同逻辑设计的开发人员就可以分散关注，齐头并进。例如<strong>UI人员</strong>只需考虑<strong>用户界面的体验与操作</strong>，<strong>领域的设计人员</strong>可以仅<strong>关注业务逻辑的设计</strong>，而<strong>数据库设计人员</strong>也不必为繁琐的用户交互而头疼了。每个开发人员的任务得到了确认，开发进度就可以迅速的提高。<br><strong>松散耦合</strong>的好处是显而易见的。如果一个系统没有分层，那么各自的逻辑都紧紧纠缠在一起，彼此间相互依赖，谁都是不可替换的。<strong>一旦发生改变，则牵一发而动全身</strong>，对项目的影响极为严重。<strong>降低层与层间的依赖性</strong>，既可以良好地<strong>保证未来的可扩展</strong>，在<strong>复用性</strong>上也是优势明显。<strong>每个功能模块</strong>一旦<strong>定义好统一的接口</strong>，就可以被各个模块所调用，而不用为相同的功能进行重复地开发。<br>进行好的<strong>分层式结构设计</strong>，标准也是必不可少的。只有在一定程度的标准化基础上，这个系统才是可扩展的，可替换的。而层与层之间的通信也必然保证了<strong>接口的标准化</strong>。<br>如果是一个考试系统，考试合格的最低分数线要改，只需要修改<strong>业务逻辑相对应函数就</strong>可以了，只要此函数的<strong>入口参数</strong>和<strong>返回内容</strong>不变，在客户端不需作任何改动。在这里，看到了<strong>面向对象编程</strong>的特性之一<strong>封装性</strong>的优点，而这一点在开发大型应用时尤其有用，可以把开发人员分成两组，一组负责开发界面层，另一组负责开发商业逻辑层，<strong>双方只要按照事先商定的函数接口，并行地开发就可以</strong>，而不必向从前那样，后面的工作必须等前面的工作完成后才能开始。当然，这样的开发模式需要很好的项目协调和文档作支持。<br>如果现在用的系统是SQL SERVER数据库，由于各种原因要更改用ORACLE。如果不是三层结构系统的话，可能需要改很多代码，延长了开发周期。现在使用了三层结构，只要在加一个Oracle的数据访问层。这样就可以实现多数据库了。<br>现在可能要做另外一个系统了，该系统也要对数据库进行操作。如果以前编写过，这样的一个数据层。只要把以前写的那个数据层拷贝过来就可以了。<strong>实现代码复用</strong>。从而<strong>减短了软件的开发周期</strong>了。</p><h3 id="三层结构的缺点"><a href="#三层结构的缺点" class="headerlink" title="三层结构的缺点"></a>三层结构的缺点</h3><p>“金无足赤，人无完人”，分层式结构也不可避免具有一些缺陷：</p><ol><li><strong>降低了系统的性能</strong>。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以此<strong>获取相应的数据</strong>，如今却必须通过中间层来完成。</li><li>有时会导致<strong>级联的修改</strong>。这种修改尤其体现在<strong>自上而下</strong>的方向。如果在<strong>表示层中需要增加一个功能</strong>，为保证其设计符合<strong>分层式结构</strong>，可能需要在相应的<strong>业务逻辑层</strong>和<strong>数据访问层</strong>中都增加相应的代码。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和枯燥的终端说再见吧 → 终端复用工具 Tmux</title>
      <link href="/2021/08/23/tmux%E6%95%99%E7%A8%8B-1/"/>
      <url>/2021/08/23/tmux%E6%95%99%E7%A8%8B-1/</url>
      
        <content type="html"><![CDATA[<h3 id="PART-0-→-Tmux-能干什么？"><a href="#PART-0-→-Tmux-能干什么？" class="headerlink" title="PART 0 → Tmux 能干什么？"></a>PART 0 → Tmux 能干什么？</h3><p><strong>Tmux</strong> 的全称是 <strong>T</strong>erminal <strong>MU</strong>tiple<strong>X</strong>er，及终端复用软件。顾名思义，它的主要功能就是在你<strong>关闭终端窗口</strong>之后<strong>保持进程</strong>的运行，此外 Tmux 的另一个重大功能就是<strong>分屏</strong> ↓</p><p><img src="https://i.loli.net/2021/08/24/S5Ju7DN8KkcQtVp.jpg">这是我的 Tmux 配置（图片仅供参考，产品以实物为准) ↑</p><p>你可会说：有很多终端模拟器（Terminal Emulator）都支持<strong>分屏</strong>啊？！</p><p>我在这里不想给你争论哪个方法更好，因为仅凭几句话很明显无法说服你顽固的想法。</p><p>这个星球上还有一个和 Tmux 相似的软件叫 Screen，不过 Screen 项目几百年前（夸张手法）就停止维护了，而且功能也较少，据说还会和其他软件发生冲突。因此我们有充足的理由选用 Tmux 而不是 Screen。</p><h3 id="PART-1-→-安装"><a href="#PART-1-→-安装" class="headerlink" title="PART 1 → 安装"></a>PART 1 → 安装</h3><p>使用 apt-get 在 Ubuntu 系统中安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 homebrew 在 Mac 上安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>其他系统（比如Windows）请自行搜索</em></p><h3 id="PART-2-→-基本使用-所有指令见文末"><a href="#PART-2-→-基本使用-所有指令见文末" class="headerlink" title="PART 2 → 基本使用 (所有指令见文末)"></a>PART 2 → 基本使用 (所有指令见文末)</h3><p>绝大多数 Tmux 的快捷键都以一个 &lt;Prefix&gt; （前缀）开始，Tmux 默认的 <strong>Prefix</strong> 是 <strong>Ctrl + b</strong>，中所周知，这个 Prefix 简直烂爆了，按起来别扭的像个什么一样，因此我会在 <em>PART 2 → 自定义配置</em> 中讲讲如何更改这个 Prefix。</p><p>举个例子，快捷键 <strong>&lt;prefix&gt; + k</strong> 的意思就是先同时按下 <strong>Ctrl 和 b</strong>，然后松开，然后再按 k。</p><p>现在启动 Tmux，在一个空白的终端窗口输入命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按下你人生中的第一个 Tmux 快捷键：&lt;prefix&gt; + %</p><p>也就是说，你需要先同时按下 Ctrl 和 b，然后再按 % （一般来说是 Shift + 5），<strong>请务必使用英文输入法且不要打开大写锁定</strong></p><p>你会看见你的终端窗口分成了左右两部分，再按 <strong>&lt;prefix&gt; + o</strong> （是英文字母 o，不是0）。你会发现你的光标从右侧窗口切换到了左侧，如果再重复这些操作，你的光标会在两个窗口之间切换。</p><p>玩够了之后，在试试 <strong>&lt;prefix&gt; + “</strong>  （英文输入法下的双引号，也就是Shift + 单引号，通常在 return/enter 键的左侧）</p><p>这时你的<strong>终端窗口</strong>又被上下分屏了。</p><p>在告诉你更多快捷键之前，我想介绍一下 Tmux 的 Session，Window，和 Pane 的关系。</p><p>这是某年某月某日我在 Tmux 中工作的截图。</p><p><img src="https://i.loli.net/2021/08/24/bRfwXZJz8NVCF5x.jpg"></p><p>我的 Tmux 主题和你的有些不同，但是基本概念是一样的 ↑</p><p>就像图上写的那样，屏幕上的一个<strong>工作区域</strong>叫 <strong>Pane</strong>。</p><p>除了 Pane 以外，Tmux 还允许你打开多个 Window，其实 Window 这个词比较有误导性。你可以把 <strong>Tmux</strong> 中的 <strong>Window</strong> 理解为 <strong>Linux</strong> 中的 <strong>Workspace</strong>，或者 <strong>macOS/Windows</strong> 中的桌面 （<strong>Desktop</strong>）。</p><p>在 <strong>Tmux</strong> 中，<strong>一个 Window 可以有多个 Pane</strong>。这就好比在 macOS/Windows 中一个桌面可以有多个窗口。</p><p>而所有的 Window 都是在一个 Session 里，而你可以同时打开多个 Session。</p><p>现在你可以尝试着创建多个 Window，按下快捷键 <strong>&lt;prefix&gt; + c</strong>，你会进入一个新的 Window，这个 Window 只有一个 Pane；你可以试着用我之前说的方法把这个 Window 分割成多个 Pane。</p><p>一张图概括 Session，Window 和 Pane 的关系：</p><p><img src="https://i.loli.net/2021/08/24/jFKPxn5tX7mwUeG.jpg"></p><p>Session &amp;amp;amp;amp;gt; Window &amp;amp;amp;amp;gt; Pane</p><p>如果你需要创建多个Session，请按下 <strong>&lt;prefix&gt; +</strong> : （英文冒号），然后输入new，在按下 return/enter。</p><p>你现在进入了一个全新的Session，如果你希望切换回原来的 Session，试着按下 <strong>&lt;prefix&gt; + s</strong> 或 <strong>&lt;prefix&gt; + w</strong>。</p><p><img src="https://i.loli.net/2021/08/24/KICDsoR5jM2tal7.jpg"></p><p>现在你可以看见你所有的 Tmux 的 Session，Window 和 Pane。<strong>上下移动</strong>来选择你要进入的 <strong>Session</strong>。</p><p>需要知道的是，所有的 Session 都在一个 Tmux Server 里运行，一般来说，你不可以创建多个 Server（特殊情况这里不做讨论）。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一个window可以有好多个panel。一个session可以有好多个window。一个tmux 可以有好多个session。</p><p>在Tmux逻辑中，需要分清楚<strong>Server &gt; Session &gt; Window &gt; Pane</strong>这个大小和层级顺序是极其重要的，直接关系到工作效率：</p><ul><li>Server：是整个tmux的后台服务。有时候更改配置不生效，就要使用tmux kill-server来重启tmux。</li><li>Session：是tmux的所有会话。我之前就错把这个session当成窗口用，造成了很多不便里。一般只要保存一个session就足够了。</li><li>Window：相当于一个工作区，包含很多分屏，可以针对每种任务分一个Window。如<strong>下载一个Window</strong>，<strong>编程一个window</strong>。</li><li>Pane：是在Window里面的小分屏。最常用也最好用</li></ul><h3 id="PART-3-→-自定义配置"><a href="#PART-3-→-自定义配置" class="headerlink" title="PART 3 → 自定义配置"></a>PART 3 → 自定义配置</h3><p>如果没有配置文件的话先创建: <code>touch ~/.tmux.conf</code></p><h4 id="tmux修改prefix前缀快捷键"><a href="#tmux修改prefix前缀快捷键" class="headerlink" title="tmux修改prefix前缀快捷键"></a>tmux修改prefix前缀快捷键</h4><p> tmux默认&lt;prefix&gt;（前缀快捷键）是Ctrl+b。由于键盘上<strong>Ctrl和b距离过远</strong>，按键不方便，可以把&lt;prefic&gt; 换成<strong>Ctrl+a</strong>。修改 ~/.tmux.conf文件如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Send prefixset-option -g prefix C-aunbind-key C-abind-key C-a send-prefix                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/24/5hp41MzIegF8ba6.png"></p><h3 id="PART-4-→-Tmux指令大全"><a href="#PART-4-→-Tmux指令大全" class="headerlink" title="PART 4 → Tmux指令大全"></a>PART 4 → Tmux指令大全</h3><h4 id="系统指令："><a href="#系统指令：" class="headerlink" title="系统指令："></a>系统指令：</h4><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>?</td><td>显示快捷键帮助文档</td></tr><tr><td>Ctrl+b</td><td>d</td><td>断开当前会话</td></tr><tr><td>Ctrl+b</td><td>D</td><td>选择要断开的会话</td></tr><tr><td>Ctrl+b</td><td>Ctrl+z</td><td>挂起当前会话</td></tr><tr><td>Ctrl+b</td><td>r</td><td>强制重载当前会话</td></tr><tr><td>Ctrl+b</td><td>s</td><td>显示会话列表用于选择并切换</td></tr><tr><td>Ctrl+b</td><td>:</td><td>进入命令行模式，此时可直接输入ls等命令</td></tr><tr><td>Ctrl+b</td><td>[</td><td>进入复制模式，按q退出</td></tr><tr><td>Ctrl+b</td><td>]</td><td>粘贴复制模式中复制的文本</td></tr><tr><td>Ctrl+b</td><td>~</td><td>列出提示信息缓存</td></tr></tbody></table><h4 id="窗口（window）指令："><a href="#窗口（window）指令：" class="headerlink" title="窗口（window）指令："></a>窗口（window）指令：</h4><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>c</td><td>新建窗口</td></tr><tr><td>Ctrl+b</td><td>&amp;</td><td>关闭当前窗口</td></tr><tr><td>Ctrl+b</td><td>0~9</td><td>切换到指定窗口</td></tr><tr><td>Ctrl+b</td><td>p</td><td>切换到上一窗口</td></tr><tr><td>Ctrl+b</td><td>n</td><td>切换到下一窗口</td></tr><tr><td>Ctrl+b</td><td>w</td><td>打开窗口列表，用于且切换窗口</td></tr><tr><td>Ctrl+b</td><td>,</td><td>重命名当前窗口</td></tr><tr><td>Ctrl+b</td><td>.</td><td>修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td>Ctrl+b</td><td>f</td><td>快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><h4 id="面板（pane）指令："><a href="#面板（pane）指令：" class="headerlink" title="面板（pane）指令："></a>面板（pane）指令：</h4><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>“</td><td>当前面板上下一分为二，下侧新建面板</td></tr><tr><td>Ctrl+b</td><td>%</td><td>当前面板左右一分为二，右侧新建面板</td></tr><tr><td>Ctrl+b</td><td>x</td><td>关闭当前面板（关闭前需输入y or n确认）</td></tr><tr><td>Ctrl+b</td><td>z</td><td>最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td>Ctrl+b</td><td>!</td><td>将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td>Ctrl+b</td><td>;</td><td>切换到最后一次使用的面板</td></tr><tr><td>Ctrl+b</td><td>q</td><td>显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td>Ctrl+b</td><td>{</td><td>向前置换当前面板</td></tr><tr><td>Ctrl+b</td><td>}</td><td>向后置换当前面板</td></tr><tr><td>Ctrl+b</td><td>Ctrl+o</td><td>顺时针旋转当前窗口中的所有面板</td></tr><tr><td>Ctrl+b</td><td>方向键</td><td>移动光标切换面板</td></tr><tr><td>Ctrl+b</td><td>o</td><td>选择下一面板</td></tr><tr><td>Ctrl+b</td><td>空格键</td><td>在自带的面板布局中循环切换</td></tr><tr><td>Ctrl+b</td><td>Alt+方向键</td><td>以5个单元格为单位调整当前面板边缘</td></tr><tr><td>Ctrl+b</td><td>Ctrl+方向键</td><td>以1个单元格为单位调整当前面板边缘（Mac下</td></tr><tr><td>Ctrl+b</td><td>t</td><td>显示时钟</td></tr></tbody></table><p>本文PART0,1,2部分源自<a href="https://zhuanlan.zhihu.com/p/58668651">zhi乎 和枯燥的终端说再见吧 → 终端复用工具 Tmux</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA酷炫插件推荐</title>
      <link href="/2021/08/23/IDEA%E9%85%B7%E7%82%AB%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2021/08/23/IDEA%E9%85%B7%E7%82%AB%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>今天介绍一下IDEA的一些炫酷的插件，IDEA强大的插件库，不仅能给我们带来一些开发的便捷，还能体现我们的与众不同。</p><h2 id="1-插件的安装"><a href="#1-插件的安装" class="headerlink" title="1.插件的安装"></a>1.插件的安装</h2><p>打开IDEA左上角<strong>setting</strong>文选择<strong>Plugins</strong>选项</p><ul><li><strong>Ctrl + Alt + S</strong></li><li><strong>File -&gt; Setting</strong></li></ul><p><img src="https://i.loli.net/2021/08/24/bXRL4qyYrB9m1lJ.png"></p><h2 id="2-各种插件"><a href="#2-各种插件" class="headerlink" title="2.各种插件"></a>2.各种插件</h2><h3 id="1-activate-power-mode-和-Power-mode-II"><a href="#1-activate-power-mode-和-Power-mode-II" class="headerlink" title="1. activate-power-mode 和 Power mode II"></a>1. activate-power-mode 和 Power mode II</h3><p>​        写代码时<strong>飞出颗粒</strong>，整个<strong>屏幕都在抖动</strong>，<strong>activate-power-mode</strong>是白的的，<strong>Power mode II</strong>色彩更酷炫点。</p><p><img src="https://i.loli.net/2021/08/24/bI1lMhWOm84is6t.gif"></p><h3 id="2-Nyan-Progress-Bar"><a href="#2-Nyan-Progress-Bar" class="headerlink" title="2. Nyan Progress Bar"></a>2. Nyan Progress Bar</h3><p>​        这是一个<strong>进度条美化</strong>的插件，让你能想到的和想不到的进度条也可以萌萌哒</p><p><img src="https://i.loli.net/2021/08/24/ECDOhSv7Fl4LPj6.gif"></p><h3 id="3-Rainbow-Brackets"><a href="#3-Rainbow-Brackets" class="headerlink" title="3.Rainbow Brackets"></a>3.Rainbow Brackets</h3><p>​        <strong>彩虹色括号</strong>，能更好的分辨相应的括号，妈妈再也不要担心我不知道哪里少括号啦。</p><p><img src="https://i.loli.net/2021/08/24/w4MrQTP1ltE8axK.png"></p><h3 id="4-translation-plugin"><a href="#4-translation-plugin" class="headerlink" title="4.translation plugin"></a>4.translation plugin</h3><p>​        <strong>快速翻译</strong>，英语渣福利！！！！！不用在麻烦的百度了</p><p><img src="https://i.loli.net/2021/08/24/un2zHMOqUKexbY5.png"></p><h3 id="5-Lotus-theme"><a href="#5-Lotus-theme" class="headerlink" title="5. Lotus theme"></a>5. Lotus theme</h3><p>​        粉嫩可爱色系主题</p><p><img src="https://i.loli.net/2021/08/24/zLXjUsYSR2OaoAP.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
